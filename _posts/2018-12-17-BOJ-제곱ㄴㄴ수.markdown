---
title:  "BOJ 1016 제곱ㄴㄴ수"
date:   2018-12-17 01:41:23
categories: [Algorithms]
tags: [Algorithms, BOJ, Python]
comments: true
---

### [제곱ㄴㄴ수](https://www.acmicpc.net/problem/1016)

| 시간 제한 | 메모리 제한 |
| --------- | ----------- |
|    2초    |    512MB    |

#### 문제
어떤 수 X가 1보다 큰 제곱수로 나누어 떨어지지 않을 때, 제곱ㄴㄴ수라고 한다.<br/>
제곱수는 정수의 제곱이다. min과 max가 주어지면,<br/>
min과 max를 포함한 사이에 제곱ㄴㄴ수가 몇 개 있는지 출력한다.<br/>

#### 입력
첫째 줄에 min과 max가 주어진다.<br/>
min은 1보다 크거나 같고, 1,000,000,000,000보다 작거나 같은 자연수이고,<br/>
max는 min보다 크거나 같고, min+1,000,000보다 작거나 같은 자연수이다.<br/>

#### 출력
첫째 줄에 [min,max]구간에 제곱ㄴㄴ수가 몇 개인지 출력한다.<br/>

#### 예제 입력

```python
1 10
```

#### 예제 출력

```python
7
```

- - -

### 풀이

#### 제곱ㄴㄴ수란
`1`보다 큰 **재곱수**로 나누어 떨어지지 **않는** 수를 의미한다.<br/>
`1`에서 `10`사이의 **제곱ㄴㄴ수**는 `1`,`2`,`3`,`5`,`6`,`7`,`10`이 있다.<br/>
`4`는 제곱수인 `4`스스로 나누어 떨어 지기 때문에 **제곱ㄴㄴ수**가 아니고<br/>
`8`은 제곱수인 `4`로 나누어 떨어 지기 때문에 **제곱ㄴㄴ수**가 아니며<br/>
`9`는 제곱수인 `9`스스로 나누어 떨어지기 때문에 아니다.

<br/>

#### 유의사항
- min과 max의 최댓값은 **1조**다.
    + 수 **하나하나** 제곱수로 나누어 떨어지는지 **검사**하면 **시간초과**
- max - min의 값의 최대는 **100만**이다.
    + **하나하나** 검사하는 방법을 사용할 수 없다.
    + 배열을 사용해서 해결할 수 있다.
- **소수판별 알고리즘**을 사용하면 해결할 수 있다.

<br/>

#### 알고리즘
- `1`은 무조건 **제곱ㄴㄴ수**다.

#### 코드 구현부

```python
import sys

min, max = map(int, sys.stdin.readline().split())

num = [True for _ in range(min, max + 1)]
count = len(num)
n = 2

while n ** 2 <= max:
    square = n ** 2
    i = min // square

    while square * i <= max:
        idx = square * i - min

        if idx >= 0 and num[idx]:
            count -= 1
            num[idx] = False

        i += 1
    n += 1

print(count)
```


<br/>

#### 결과
<img src="/assets/2018-12-17-1016/1.PNG" width="500" height="auto">

느리고.. 느리고.. 느렸다..<br/>
채점하는데도 진짜 2분은 더 걸린 것 같다..<br/>
솔직히 엄청 금방 풀 줄 알았다..<br/>
[1977번 완전제곱수](https://www.acmicpc.net/problem/1977) 문제처럼 **Pythonic**하게도 짜봐야지~ 했는데...<br/>
**시간 초과**, **메모리 초과**의 벽에서 무너졌다&#128531;&#128531;

<img src="/assets/2018-12-17-1016/2.PNG" width="500" height="auto">

최근 푼 문제들 중에 **제일** 힘들었다...&#128565;&#128565;

&#9989; 코드는 [[여기]](https://github.com/alstn2468/BaekJoon_Online_Judge/blob/master/1000~1099/11016.py)에서 확인할 수 있다.
