{"componentChunkName":"component---src-templates-blog-post-js","path":"/ReScript/2020-12-23-ReScriptTutorialPart7","result":{"data":{"site":{"siteMetadata":{"title":"Minsu's Dev Log","author":"Minsu Kim","siteUrl":"https://alstn2468.github.io","comment":{"disqusShortName":"","utterances":"alstn2468/alstn2468.github.io"},"sponsor":{"buyMeACoffeeId":"eMLdEwU"}}},"markdownRemark":{"id":"84b0bed9-7dd7-5ce0-b8fd-b11064a12f97","excerpt":"본 포스트는 ReScript 공식문서를 스터디하며 정리한 포스트 입니다.\n포스트를 작성하며 작성한 코드는 여기에서 확인할 수 있습니다. Object ReScript의 Object타입은 Record타입과 비슷하지만 아래와 같은 차이점이 있다. 타입 선언이 필요하지 않다. Record타입과 다르게 구조적이고 다형성이 강하다. 객체가 JavaScript쪽에서 오지 않는한 업데이트를 지원하지 않는다. 패턴 매칭을 지원하지 않는다. ReScript의 Record타입은 깔끔한 JavaScript…","html":"<p>본 포스트는 <a href=\"https://rescript-lang.org/docs/latest/\">ReScript 공식문서</a>를 스터디하며 정리한 포스트 입니다.<br/>\n포스트를 작성하며 작성한 코드는 <a href=\"https://github.com/alstn2468/ReScript_Tutorial\">여기</a>에서 확인할 수 있습니다.</p>\n<h2 id=\"object\" style=\"position:relative;\"><a href=\"#object\" aria-label=\"object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object</h2>\n<p>ReScript의 Object타입은 <a href=\"https://rescript-lang.org/docs/manual/latest/record\">Record</a>타입과 비슷하지만 아래와 같은 차이점이 있다.</p>\n<ul>\n<li>타입 선언이 필요하지 않다.</li>\n<li>Record타입과 다르게 구조적이고 다형성이 강하다.</li>\n<li>객체가 JavaScript쪽에서 오지 않는한 업데이트를 지원하지 않는다.</li>\n<li><a href=\"https://rescript-lang.org/docs/manual/latest/pattern-matching-destructuring\">패턴 매칭</a>을 지원하지 않는다.</li>\n</ul>\n<p>ReScript의 Record타입은 깔끔한 JavaScript 객체로 컴파일되지만 ReScript의 Object타입은 JavaScript 객체에 에뮬레이팅이나 바인딩을할 수 있는 더 나은 후보다.</p>\n<h3 id=\"object의-타입-선언\" style=\"position:relative;\"><a href=\"#object%EC%9D%98-%ED%83%80%EC%9E%85-%EC%84%A0%EC%96%B8\" aria-label=\"object의 타입 선언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object의 타입 선언</h3>\n<p>Record타입과 달리 타입 선언이 선택적이다. Object타이은 값에서 타입이 추론되므로 실제로는 입력할 필요가 없다. 그럼에도 불구하고 타입 선언 문법은 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">type</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> string\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Record타입의 타입 선언 문법과 보기에 비슷하지만 필드의 이름이 <code class=\"language-text\">\"</code>로 감싸져 있다.</p>\n<h3 id=\"object를-생성하는-방법\" style=\"position:relative;\"><a href=\"#object%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"object를 생성하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object를 생성하는 방법</h3>\n<p>Object타입의 값을 생성하는 방법은 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">let</span> me <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Big ReScript\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위에서 설명한 것처럼, Record와 달리 이 <code class=\"language-text\">me</code>는 <code class=\"language-text\">\"age\"</code> 및 <code class=\"language-text\">\"name\"</code>필드를 사용하여 일치하는 타입 선언을 찾으려고 하지 않는다. 대신 <code class=\"language-text\">me</code>의 타입은 <code class=\"language-text\">{\"age\":int, \"name\":string}</code>로 추론된다. 이는 편리하지만 아래의 코드가 오류 없이 타입 검사를 통과한다는 것을 의미한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">type</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> int\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> me <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello!\"</span> <span class=\"token comment\">// age는 string이지만 오류가 발생하지 않는다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>왜냐하면 타입 체커는 <code class=\"language-text\">me</code>가 <code class=\"language-text\">person</code>타입인지 맞추려고 하지 않는다. Object값을 미리 선언된 Object타입으로 지정하기위해서는 아래와 같이 타입 주석을 사용하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">let</span> me<span class=\"token punctuation\">:</span>person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello!\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 타입 시스템은 적절하게 오류를 발생시킬 것이다.</p>\n<h3 id=\"object의-필드에-접근하는-방법\" style=\"position:relative;\"><a href=\"#object%EC%9D%98-%ED%95%84%EB%93%9C%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"object의 필드에 접근하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object의 필드에 접근하는 방법</h3>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> me<span class=\"token punctuation\">[</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Object의 필드에 접근하기 위해서는 위와 같이 <code class=\"language-text\">[]</code>를 이용해 접근한다.</p>\n<h3 id=\"object를-업데이트하는-방법\" style=\"position:relative;\"><a href=\"#object%EB%A5%BC-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"object를 업데이트하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object를 업데이트하는 방법</h3>\n<p>Object가 JavaScript에서 오는 바인딩이 아닌 경우 허용되지 않는다. 이 경우에는 <code class=\"language-text\">=:</code>를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">type</span> student <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  @bs<span class=\"token punctuation\">.</span>set <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">,</span>\n  @bs<span class=\"token punctuation\">.</span>set <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n@bs<span class=\"token punctuation\">.</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyJSFile\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> student1<span class=\"token punctuation\">:</span> student <span class=\"token operator\">=</span> <span class=\"token string\">\"student1\"</span>\n\nstudent1<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Mary\"</span></code></pre></div>\n<h3 id=\"팁--트릭\" style=\"position:relative;\"><a href=\"#%ED%8C%81--%ED%8A%B8%EB%A6%AD\" aria-label=\"팁  트릭 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>팁 &#x26; 트릭</h3>\n<p>Object는 타입 선언이 필요하지 않고 ReScript가 모든 타입을 제공하므로 매우 빠르고 쉽지만 위험하게 모든 JavaScript의 API에 바인딩할 수 있다. 아래 코드의 JavaScript 출력을 확인해볼 수 있다.</p>\n<blockquote>\n<p>실제 동작하는 코드는 <a href=\"https://github.com/alstn2468/ReScript_Tutorial/blob/main/src/6_Object/index.html\">여기</a>에 있다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token comment\">// document의 타입은 랜덤 타입인 'a 다</span>\n<span class=\"token comment\">// 굳이 명시하지 않아도 되는 타입이다.</span>\n@bs<span class=\"token punctuation\">.</span><span class=\"token keyword\">val</span> <span class=\"token keyword\">external</span> document<span class=\"token punctuation\">:</span> <span class=\"token operator\">'</span>a <span class=\"token operator\">=</span> <span class=\"token string\">\"document\"</span>\n\n<span class=\"token comment\">// 메서드 호출</span>\ndocument<span class=\"token punctuation\">[</span><span class=\"token string\">\"addEventListener\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mouseup\"</span><span class=\"token punctuation\">,</span> _event <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Js</span><span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span><span class=\"token string\">\"clicked!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 속성 가져오기</span>\n<span class=\"token keyword\">let</span> loc <span class=\"token operator\">=</span> document<span class=\"token punctuation\">[</span><span class=\"token string\">\"location\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// 속성 설정하기</span>\ndocument<span class=\"token punctuation\">[</span><span class=\"token string\">\"location\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"href\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"http://www.rescript-lang.org\"</span></code></pre></div>\n<p><code class=\"language-text\">External</code> 기능과 이 트릭의 사용법은 뒷부분의 <a href=\"https://rescript-lang.org/docs/manual/latest/external#tips--tricks\">external</a> 섹션에도 나와 있다. 특정 라이브러리에 대한 바인딩이 있는지에 대해 걱정하지 않고 일부 ReScript 코드를 쓰기 시작할 수 있는 훌륭한 방법이다.</p>","frontmatter":{"title":"ReScript 공식문서로 ReScript 훑어보기 (7)","date":"December 23, 2020","thumbnail":null}}},"pageContext":{"slug":"/ReScript/2020-12-23-ReScriptTutorialPart7/","previous":{"fields":{"slug":"/ReScript/2020-12-21-ReScriptTutorialPart6/"},"frontmatter":{"title":"ReScript 공식문서로 ReScript 훑어보기 (6)","category":"ReScript","draft":false}},"next":{"fields":{"slug":"/ReScript/2020-12-26-ReScriptTutorialPart8/"},"frontmatter":{"title":"ReScript 공식문서로 ReScript 훑어보기 (8)","category":"ReScript","draft":false}}}},"staticQueryHashes":["3001444076","3128451518"]}