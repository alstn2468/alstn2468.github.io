{"componentChunkName":"component---src-templates-blog-post-js","path":"/ReScript/2020-12-28-ReScriptTutorialPart9","result":{"data":{"site":{"siteMetadata":{"title":"Minsu's Dev Log","author":"Minsu Kim","siteUrl":"https://alstn2468.github.io","comment":{"disqusShortName":"","utterances":"alstn2468/alstn2468.github.io"},"sponsor":{"buyMeACoffeeId":"eMLdEwU"}}},"markdownRemark":{"id":"ff044db6-47ca-558b-973c-671fd60c3b83","excerpt":"본 포스트는 ReScript 공식문서를 스터디하며 정리한 포스트 입니다.\n포스트를 작성하며 작성한 코드는 여기에서 확인할 수 있습니다. Null, Undefined and Option ReScriptt에는  또는  개념이 존재하지 않는다. 모든 카테고리의 버그를 없애기 때문에 이것은 좋은 일이다. 더이상 이나 를 마주칠 일이 없다. 그러나, 잠재적으로 존재하지 않는 값에 대한 개념은 여전히 유용하고, ReScript…","html":"<p>본 포스트는 <a href=\"https://rescript-lang.org/docs/latest/\">ReScript 공식문서</a>를 스터디하며 정리한 포스트 입니다.<br/>\n포스트를 작성하며 작성한 코드는 <a href=\"https://github.com/alstn2468/ReScript_Tutorial\">여기</a>에서 확인할 수 있습니다.</p>\n<h2 id=\"null-undefined-and-option\" style=\"position:relative;\"><a href=\"#null-undefined-and-option\" aria-label=\"null undefined and option permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Null, Undefined and Option</h2>\n<p>ReScriptt에는 <code class=\"language-text\">null</code> 또는 <code class=\"language-text\">undefined</code> 개념이 존재하지 않는다. 모든 카테고리의 버그를 없애기 때문에 이것은 좋은 일이다. 더이상 <code class=\"language-text\">undefined is not function</code>이나 <code class=\"language-text\">cannot access someAttriute of undefined</code>를 마주칠 일이 없다.</p>\n<p>그러나, 잠재적으로 존재하지 않는 값에 대한 개념은 여전히 유용하고, ReScript에도 안전하게 존재한다.</p>\n<p><code class=\"language-text\">option</code>타입으로 값을 감싸 값의 존재와 존재하지 않음을 나타낸다다. 표준 라이브러리에서 정의한 내용은 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">type</span> option<span class=\"token operator\">&lt;</span><span class=\"token operator\">'</span>a<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constructor\">None</span> <span class=\"token operator\">|</span> <span class=\"token constructor\">Some</span><span class=\"token punctuation\">(</span><span class=\"token operator\">'</span>a<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 코드의 <code class=\"language-text\">option</code>타입은 아무것도 나타내지 않는 <code class=\"language-text\">None</code>이거나 <code class=\"language-text\">Some</code>에 포함된 실제 갓을 의미한다.</p>\n<p><code class=\"language-text\">option</code>타입이 일반적인 <a href=\"https://rescript-lang.org/docs/manual/latest/variant\">Variant</a>라는 점을 유의해야 한다.</p>\n<h3 id=\"예시\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h3>\n<p>아래 코드에는 일반적인 값을 갖는 <code class=\"language-text\">licenseNumber</code>가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">let</span> licenseNumber <span class=\"token operator\">=</span> <span class=\"token number\">5</span></code></pre></div>\n<p>null일 수도 있다는 개념을 나타내려면 이 변수를 감싸 <code class=\"language-text\">option</code>타입으로 변환해야 한다. 좀 더 설명이되는 예시를 위해 아래와 같은 조건을 제시할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">let</span> licenseNumber <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">if</span> personHasACar <span class=\"token punctuation\">{</span>\n    <span class=\"token constructor\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constructor\">None</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>나중에 다른 코드 조각이 이런 값을 받으면 <a href=\"https://rescript-lang.org/docs/manual/latest/pattern-matching-destructuring\">패턴 매칭</a>를 통해 두 가지 경우를 모두 처리해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">switch</span> licenseNumber <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">|</span> <span class=\"token constructor\">None</span> <span class=\"token operator\">=></span>\n  <span class=\"token class-name\">Js</span><span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span><span class=\"token string\">\"The person doesn't have a car\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span> <span class=\"token constructor\">Some</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token class-name\">Js</span><span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span><span class=\"token string\">\"The person's license number is \"</span> <span class=\"token operator\">+</span><span class=\"token operator\">+</span> <span class=\"token class-name\">Js</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>일반 <code class=\"language-text\">number</code>를 <code class=\"language-text\">option</code>타입으로 바꾸고 <code class=\"language-text\">None</code>케이스를 처리하도록 강요함으로써 언어는 개념적 <code class=\"language-text\">null</code> 값을 잘못 처리하거나 처리하는 것을 잊을 가능성을 효과적으로 제거했다. <strong>순수한 ReScript 프로그램에는 null 오류가 없다.</strong></p>\n<h3 id=\"javascript의-undefined와-null과-상호-운용\" style=\"position:relative;\"><a href=\"#javascript%EC%9D%98-undefined%EC%99%80-null%EA%B3%BC-%EC%83%81%ED%98%B8-%EC%9A%B4%EC%9A%A9\" aria-label=\"javascript의 undefined와 null과 상호 운용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript의 undefined와 null과 상호 운용</h3>\n<p><code class=\"language-text\">option</code>타입은 JavaScript로 컴파일할 때 특별한 경우가 있을 정도로 일반적이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token constructor\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위의 코드의 <code class=\"language-text\">x</code>는 간단히 <code class=\"language-text\">5</code>로 컴파일되고,</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token constructor\">None</span></code></pre></div>\n<p>이 코드의 <code class=\"language-text\">x</code>는 <code class=\"language-text\">undefined</code>로 컴파일 된다. 예를 들어 <code class=\"language-text\">undefined</code>일수도 있는 JavaScript의 문자열 인 경우 <code class=\"language-text\">option&lt;string></code>타입을 사용하면 된다. 마찬가지로, <code class=\"language-text\">Some(5)</code> 또는 <code class=\"language-text\">None</code>을 JavaScript에 보내고 올바르게 해석 될 것으로 기대할 수 있다.</p>\n<h4 id=\"caveat-1\" style=\"position:relative;\"><a href=\"#caveat-1\" aria-label=\"caveat 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caveat 1</h4>\n<p>ReScript에서는 <code class=\"language-text\">option</code> 값을 구성할 수 있기 때문에 <code class=\"language-text\">option</code>에서 <code class=\"language-text\">undefined</code>로 번환되는 것은 완벽하지 않다.</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token constructor\">Some</span><span class=\"token punctuation\">(</span><span class=\"token constructor\">Some</span><span class=\"token punctuation\">(</span><span class=\"token constructor\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위의 <code class=\"language-text\">x</code>는 여전히 <code class=\"language-text\">5</code>로 컴파일되지만 아래 코드는 문제가 생긴다.</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token constructor\">Some</span><span class=\"token punctuation\">(</span><span class=\"token constructor\">None</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">Caml_option.some</code>은 무엇일까? 왜 이것이 <code class=\"language-text\">undefined</code>로 컴파일되지 않을까? 간단히 말해 다형성 옵션 타입(<code class=\"language-text\">'a</code>의 경우 <code class=\"language-text\">option&lt;'a></code>)을 다룰 때 값에 특별한 주석을 표시하지 않으면 많은 작업이 복잡해진다. 이해가 되지않아도 걱정하지 말고 아래의 규칙을 기헉하면 된다.</p>\n<ul>\n<li><strong>절대로 <code class=\"language-text\">Some(Some(Some(5)))</code>와 같은 충첩된 <code class=\"language-text\">option</code>값을 JavaScript로 넘기면 안된다.</strong></li>\n<li><strong>절대로 JavaScript에서 온 값에 <code class=\"language-text\">option&lt;'a></code>로 타입 주석을 작성하면 안된다. 항상 고정된 비다형성 타입을 주어야한다.</strong></li>\n</ul>\n<h4 id=\"caveat-2\" style=\"position:relative;\"><a href=\"#caveat-2\" aria-label=\"caveat 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Caveat 2</h4>\n<p>안타깝게도 JavaScript 값이 <code class=\"language-text\">null</code>이거나 <code class=\"language-text\">undefined</code>인 경우가 많다. 이런 경우 불행하게도 <code class=\"language-text\">option&lt;int></code>같이 값을 입력 할 수 없다. 왜냐하면 ReScript의 <code class=\"language-text\">option</code>타입은 <code class=\"language-text\">None</code>을 다룰 때 <code class=\"language-text\">undefined</code>이거나 <code class=\"language-text\">null</code>이 아닌지 확인하기 때문입니다.</p>\n<h5 id=\"solution-보다-정교한-undefined--null-인터럽트\" style=\"position:relative;\"><a href=\"#solution-%EB%B3%B4%EB%8B%A4-%EC%A0%95%EA%B5%90%ED%95%9C-undefined--null-%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8\" aria-label=\"solution 보다 정교한 undefined  null 인터럽트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Solution: 보다 정교한 undefined &#x26; null 인터럽트</h5>\n<p>이를 해결하기 위해 <a href=\"https://rescript-lang.org/docs/manual/latest/api/js/nullable\"><code class=\"language-text\">Js.Nullable</code></a> 모듈을 통해보다 정교한 <code class=\"language-text\">null</code> 및 <code class=\"language-text\">undefined</code> 헬퍼를 이용한 접근을 제공한다. 이것은 <code class=\"language-text\">option</code>타입처럼 어느정도 작동하지만 다르다.</p>\n<h5 id=\"예시-1\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-1\" aria-label=\"예시 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h5>\n<p>JavaScript의 <code class=\"language-text\">null</code>을 만들기위해서는 <code class=\"language-text\">Js.Nullable.null</code>값을 사용하면 된다. JavaScript의 <code class=\"language-text\">undefined</code>를 만들기위해서는 <code class=\"language-text\">Js.Nullable.undefined</code>를 사용하면 된다. (당연히 <code class=\"language-text\">None</code>도 사용할 수 있지만 여기서 그게 중요하지 않다. <code class=\"language-text\">Js.Nullable.*</code>헬퍼는 작동하지 않는다.)</p>\n<p>예를 들어 <code class=\"language-text\">null</code>이거나 <code class=\"language-text\">undefined</code>일 수 있는 JavaScript 문자열을 받는 경우 아래와 같이 작성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\">@bs<span class=\"token punctuation\">.</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyConstant\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> myId<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Js</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Nullable</span><span class=\"token punctuation\">.</span>t<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token string\">\"myId\"</span></code></pre></div>\n<p>ReScript에서 이런 <code class=\"language-text\">nullable</code>문자열을 생성하기 위해서(아마 인터럽트 목적으로 JavaScript쪽으로 값을 전달하기 위해)는 아래와 같이 작성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\">@bs<span class=\"token punctuation\">.</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyIdValidator\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> validate<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Js</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Nullable</span><span class=\"token punctuation\">.</span>t<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token operator\">=></span> bool <span class=\"token operator\">=</span> <span class=\"token string\">\"validate\"</span>\n<span class=\"token keyword\">let</span> personId<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Js</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Nullable</span><span class=\"token punctuation\">.</span>t<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Js</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Nullable</span><span class=\"token punctuation\">.</span>return<span class=\"token punctuation\">(</span><span class=\"token string\">\"abc123\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> validate<span class=\"token punctuation\">(</span>personId<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">return</code>부분은 문자열을 <code class=\"language-text\">nullable</code>문자열로 감싸 타입 시스템이이 값을 전달할 때 단순히 문자열이 아니라 <code class=\"language-text\">null</code>이거나 <code class=\"language-text\">undefined</code>일 수 있는 문자열이라는 사실을 이해하고 추적하도록한다.</p>\n<h5 id=\"option에서-또는-option으로-변환\" style=\"position:relative;\"><a href=\"#option%EC%97%90%EC%84%9C-%EB%98%90%EB%8A%94-option%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98\" aria-label=\"option에서 또는 option으로 변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>option에서 또는 option으로 변환</h5>\n<p><code class=\"language-text\">Js.Nullable.fromOption</code>은 <code class=\"language-text\">option</code>으로부터 <code class=\"language-text\">Js.Nullable.t</code>로 변환한다. <code class=\"language-text\">Js.Nullable.toOption</code>은 반대의 기능을 한다.</p>","frontmatter":{"title":"ReScript 공식문서로 ReScript 훑어보기 (9)","date":"December 28, 2020","thumbnail":null}}},"pageContext":{"slug":"/ReScript/2020-12-28-ReScriptTutorialPart9/","previous":{"fields":{"slug":"/ReScript/2020-12-26-ReScriptTutorialPart8/"},"frontmatter":{"title":"ReScript 공식문서로 ReScript 훑어보기 (8)","category":"ReScript","draft":false}},"next":{"fields":{"slug":"/ReScript/2020-12-31-ReScriptTutorialPart10/"},"frontmatter":{"title":"ReScript 공식문서로 ReScript 훑어보기 (10)","category":"ReScript","draft":false}}}},"staticQueryHashes":["3001444076","3128451518"]}