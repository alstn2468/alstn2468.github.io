{"componentChunkName":"component---src-templates-blog-post-js","path":"/ReScript/2020-12-16-ReScriptTutorialPart2","result":{"data":{"site":{"siteMetadata":{"title":"Minsu's Dev Log","author":"Minsu Kim","siteUrl":"https://alstn2468.github.io","comment":{"disqusShortName":"","utterances":"alstn2468/alstn2468.github.io"},"sponsor":{"buyMeACoffeeId":"eMLdEwU"}}},"markdownRemark":{"id":"c37b7695-234a-5085-a452-53fb6ea33e5e","excerpt":"본 포스트는 ReScript 공식문서를 스터디하며 정리한 포스트 입니다.\n포스트를 작성하며 작성한 코드는 여기에서 확인할 수 있습니다. Let Binding ReScript에서의 Let Binding은 다른 언어에서의 변수 선언이라고 할 수 있다. 위의 코드와 같이  키워드를 사용해 값을 이름에 바인딩한다. Block Scope ReScript…","html":"<p>본 포스트는 <a href=\"https://rescript-lang.org/docs/latest/\">ReScript 공식문서</a>를 스터디하며 정리한 포스트 입니다.<br/>\n포스트를 작성하며 작성한 코드는 <a href=\"https://github.com/alstn2468/ReScript_Tutorial\">여기</a>에서 확인할 수 있습니다.</p>\n<h2 id=\"let-binding\" style=\"position:relative;\"><a href=\"#let-binding\" aria-label=\"let binding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Let Binding</h2>\n<p>ReScript에서의 Let Binding은 다른 언어에서의 변수 선언이라고 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">let</span> gretting <span class=\"token operator\">=</span> <span class=\"token string\">\"hello!\"</span>\n<span class=\"token keyword\">let</span> score <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">let</span> newScore <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> scores</code></pre></div>\n<p>위의 코드와 같이 <code class=\"language-text\">let</code> 키워드를 사용해 값을 이름에 바인딩한다.</p>\n<h2 id=\"block-scope\" style=\"position:relative;\"><a href=\"#block-scope\" aria-label=\"block scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Block Scope</h2>\n<p>ReScript에서는 <code class=\"language-text\">{}</code>를 이용해 바인딩 범위를 지정할 수 있다. 블록 스코프 안에서 선언된 변수는 밖에서 접근할 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> part1 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>\n  <span class=\"token keyword\">let</span> part2 <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// part1과 part2에 접근할 수 없다.</span></code></pre></div>\n<p>블록 스코프의 마지막 줄의 값은 암시적으로 반환된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> part1 <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>\n  <span class=\"token keyword\">let</span> part2 <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span>\n  pert1 <span class=\"token operator\">+</span><span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span><span class=\"token operator\">+</span> part2\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>따라서 위 코드의 <code class=\"language-text\">message</code> 변수는 <code class=\"language-text\">\"hello world\"</code>의 값을 갖게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Generated by ReScript, PLEASE EDIT WITH CARE</span>\n<span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">var</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* No side effect */</span></code></pre></div>\n<p>JavaScript로 컴파일된 결과는 위와 같으며 <code class=\"language-text\">message</code> 변수가 <code class=\"language-text\">\"hello world\"</code>인 것을 확인할 수 있다.</p>\n<h2 id=\"design-decisions\" style=\"position:relative;\"><a href=\"#design-decisions\" aria-label=\"design decisions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Design Decisions</h2>\n<p>ReScript의 <code class=\"language-text\">if</code>, <code class=\"language-text\">while</code> 구문과 함수는 모두 동일한 블록 스코프 지정 매커니즘을 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">let</span> displayGretting <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">if</span> displayGretting <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"Enjoying the docs so far?\"</span>\n  <span class=\"token class-name\">Js</span><span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// message는 여기에서 접근할 수 없다.</span></code></pre></div>\n<p>앞에서 설명한 <a href=\"#block-scope\">블록 스코프</a>와 동일하게 모두 <code class=\"language-text\">{}</code>를 이용해 블록 스코프를 지정한다.</p>\n<h2 id=\"binding-are-immutable\" style=\"position:relative;\"><a href=\"#binding-are-immutable\" aria-label=\"binding are immutable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Binding Are Immutable</h2>\n<p><strong>Let Binding은 불변</strong>하며 “바뀔 수 없음”이라고 한다. 이런 <strong>불변함</strong>은 타입 시스템이 다른 언어보다 훨씬 더 많은 것을 추론하고 최적화할 수 있도록 돕는다.</p>\n<h2 id=\"binding-shadowing\" style=\"position:relative;\"><a href=\"#binding-shadowing\" aria-label=\"binding shadowing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Binding Shadowing</h2>\n<p>바인딩이 불변하다는 것은 비현실적으로 들릴 수 있다. 바인딩된 값을 변경하기 위해서 사용할 수 있는 방법으로는 2가지가 있다.</p>\n<ol>\n<li>변수의 값을 변경하는 것이 아닌 경우가 많다는 것을 깨닫는 것이다.</li>\n</ol>\n<p>아래의 JavaScirpt 패턴으로 예를 들 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nresult <span class=\"token operator\">=</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nresult <span class=\"token operator\">=</span> <span class=\"token function\">calculateSomeMore</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드는 아래와 같이 작성해도 동일하게 동작하며 결과가 왜곡되지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> result1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result2 <span class=\"token operator\">=</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result3 <span class=\"token operator\">=</span> <span class=\"token function\">calculateSomeMore</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드는 ReScript로 작성해도 확실히 동일하게 동작한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">let</span> result1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">let</span> result2 <span class=\"token operator\">=</span> calculate<span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> result3 <span class=\"token operator\">=</span> calculateSomeMore<span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span></code></pre></div>\n<p>JavaScript로 컴파일된 결과물 또한 위의 바로 위의 JavaScript 코드와 동일할 것이다.</p>\n<ol start=\"2\">\n<li>바인딩에 사용한 이름을 재사용하면 동일한 이름의 이전 바인딩이 가려진다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> calculate<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> calculateSomeMore<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위와 같이 코드를 작성해도 동작하며 JavaScript로 컴파일된 코드는 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result$1 <span class=\"token operator\">=</span> <span class=\"token function\">calculateSomeMore</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>추천하는 방법은 아니지만 아래의 코드 또한 유효하며 동작한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>\n<span class=\"token class-name\">Js</span><span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints \"hello\"</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token class-name\">Js</span><span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// prints 1</span></code></pre></div>\n<p>위의 코드는 JavaScript로 컴파일이 되면 <code class=\"language-text\">result</code> 변수는 마지막에 선언한 하나만 남게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>실질적인 변형은 없으며</strong> 참조하는 바인딩은 위쪽에 가장 가까운 바인딩이 된다. 만약 값을 전달하거나 많은 코드들에 의해 진짜 변형이 필요한 경우 ReScript는 약간 더 무거운 <a href=\"https://rescript-lang.org/docs/manual/latest/mutation\">변형 기능</a>을 제공한다.</p>\n<h2 id=\"private-let-bindings\" style=\"position:relative;\"><a href=\"#private-let-bindings\" aria-label=\"private let bindings permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Private Let Bindings</h2>\n<p>Private let bindingns은 7.2 버전 릴리즈에 도입되었다. ReScript의 모듈 시스템에서 모든 필드들은 기본적으로 public으로 사용된다. 값을 숨기는 유일한 방법은 public 필드와 필드 타입을 나타내는 별도의 시그니처를 작성하는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">module</span> <span class=\"token constructor\">A</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> b<span class=\"token punctuation\">:</span> int\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n  <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 모듈을 작성하게 될 경우 변수 <code class=\"language-text\">int</code>타입의 변수인 <code class=\"language-text\">b</code>만 public필드로 사용된다. JavaScript로 컴파일된 코드는 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Generated by ReScript, PLEASE EDIT WITH CARE</span>\n<span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">var</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* No side effect */</span></code></pre></div>\n<p>ReScript의 모듈 <code class=\"language-text\">A</code>가 컴파일된 JavaScript 객체 <code class=\"language-text\">A</code>에서 <code class=\"language-text\">a</code> 필드에 관한 데이터는 없이 컴파일 된 것을 볼 수 있다. 또한 <code class=\"language-text\">%private</code>를 이용해 직접적으로 private 필드를 지정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"reason\"><pre class=\"language-reason\"><code class=\"language-reason\"><span class=\"token keyword\">module</span> <span class=\"token constructor\">C</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  %%<span class=\"token keyword\">private</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">%private</code>는 파일 수준 모듈에도 적용되게 되며 컴파일된 결과는 시그니처를 제공하는 방법과 동일하다.</p>\n<p><code class=\"language-text\">%private</code>를 사용하는 방법보다는 시그니처를 제공하는 방법은 별도의 컴파일 유닛을 더 잘 제공하며 문서화에도 적합해 권장된다. 하지만 <code class=\"language-text\">%private</code>를 이용하는 방법은 아래와 같은 상황에서 유용하다.</p>\n<ul>\n<li>코드 제너레이터 : 일부 코드 제너레이터는 일부 값을 숨기려하지만 코드 제너레이터가 public 필드의 타입을 합성하는 것은 어렵거나 시간이 오래걸리게 된다.</li>\n<li>빠른 프로토타이핑 : 빠르게 프로토타이핑을 진행할 경우 값을 숨기고 싶지만 인터페이스 파일이 안정적이지 않을 때 편의를 제공한다.</li>\n</ul>","frontmatter":{"title":"ReScript 공식문서로 ReScript 훑어보기 (2)","date":"December 16, 2020","thumbnail":null}}},"pageContext":{"slug":"/ReScript/2020-12-16-ReScriptTutorialPart2/","previous":{"fields":{"slug":"/ReScript/2020-12-15-ReScriptTutorialPart1/"},"frontmatter":{"title":"ReScript 공식문서로 ReScript 훑어보기 (1)","category":"ReScript","draft":false}},"next":{"fields":{"slug":"/ReScript/2020-12-17-ReScriptTutorialPart3/"},"frontmatter":{"title":"ReScript 공식문서로 ReScript 훑어보기 (3)","category":"ReScript","draft":false}}}},"staticQueryHashes":["3001444076","3128451518"]}