{"componentChunkName":"component---src-templates-blog-post-js","path":"/MachineLearning/2019-01-07-BasicChapter5-3","result":{"data":{"site":{"siteMetadata":{"title":"Minsu's Dev Log","author":"Minsu Kim","siteUrl":"https://alstn2468.github.io","comment":{"disqusShortName":"","utterances":"alstn2468/alstn2468.github.io"},"sponsor":{"buyMeACoffeeId":"eMLdEwU"}}},"markdownRemark":{"id":"3aa4656e-271d-5ccc-a35f-371c21c8759e","excerpt":"해당 게시물은 Edwith에서 제공하는\n머신러닝과 딥러닝 BASIC을 듣고 요약 정리한 글입니다. Slicing Indexing, Slicing, Iterating Arrays can be indexted, sliced, iterated much like lists\nand other sequence types in Python As with Python lists, slicing in Numpy can be\naccomplished with the colon() syntax Colon…","html":"<p>해당 게시물은 <a href=\"https://www.edwith.org\">Edwith</a>에서 제공하는<br/>\n<a href=\"https://www.edwith.org/others26/joinLectures/9829\">머신러닝과 딥러닝 BASIC</a>을 듣고 요약 정리한 글입니다.</p>\n<h2 id=\"slicing\" style=\"position:relative;\"><a href=\"#slicing\" aria-label=\"slicing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Slicing</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">nums <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Range is a built in function that creates a of integers</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>           <span class=\"token comment\"># Prints \"[0, 1, 2, 3, 4]\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\"># Get a slice from index 2 to 4 (exclusive) prints \"[2, 3]\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\"># Get a slice from index 2 to end prints \"[2, 3, 4]\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\"># Get a slice from start to 2 (exclusive) prints \"[0, 1]\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\"># Get a slice of the whole list prints \"[0, 1, 2, 3, 4]\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\"># Slice indices can be negative prints \"[0, 1, 2, 3]\"</span>\nnums<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\"># Assign a new sublist to a slice</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>           <span class=\"token comment\"># Prints \"[0, 1, 8, 9, 4]\"</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[0, 1, 2, 3, 4]\n[2, 3]\n[2, 3, 4]\n[0, 1]\n[0, 1, 2, 3, 4]\n[0, 1, 2, 3]\n[0, 1, 8, 9, 4]</code></pre></div>\n<h2 id=\"indexing-slicing-iterating\" style=\"position:relative;\"><a href=\"#indexing-slicing-iterating\" aria-label=\"indexing slicing iterating permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Indexing, Slicing, Iterating</h2>\n<ul>\n<li>Arrays can be indexted, sliced, iterated much like lists<br/>\nand other sequence types in Python</li>\n<li>As with Python lists, slicing in Numpy can be<br/>\naccomplished with the colon(<code class=\"language-text\">:</code>) syntax</li>\n<li>Colon instances(<code class=\"language-text\">:</code>) can be replaced with dots(<code class=\"language-text\">...</code>)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\na <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [1 2 3 4 5]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [2 3]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 5</span>\na<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [9 9 3 4 5]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[1 2 3 4 5]\n[2 3]\n5\n[9 9 3 4 5]</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">b <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [[ 1  2  3  4]</span>\n<span class=\"token comment\">#  [ 5  6  7  8]</span>\n<span class=\"token comment\">#  [ 9 10 11 12]]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [ 2  6 10]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [ 9 10 11 12]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [ 9 10 11 12]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [ 9 10 11 12]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># [[1 2 3 4]</span>\n<span class=\"token comment\">#  [5 6 7 8]]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[[ 1  2  3  4]\n [ 5  6  7  8]\n [ 9 10 11 12]]\n[ 2  6 10]\n[ 9 10 11 12]\n[ 9 10 11 12]\n[ 9 10 11 12]\n[[1 2 3 4]\n [5 6 7 8]]</code></pre></div>\n<h2 id=\"loading-data-from-file\" style=\"position:relative;\"><a href=\"#loading-data-from-file\" aria-label=\"loading data from file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Loading data from file</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> tensorflow <span class=\"token keyword\">as</span> tf\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\nxy <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>loadtxt<span class=\"token punctuation\">(</span><span class=\"token string\">'data-01-test-score.csv'</span><span class=\"token punctuation\">,</span>\n               delimiter<span class=\"token operator\">=</span><span class=\"token string\">','</span><span class=\"token punctuation\">,</span>\n               dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span>\nx_data <span class=\"token operator\">=</span> xy<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\ny_data <span class=\"token operator\">=</span> xy<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># Make sure the shape and data are OK</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> x_data<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>x_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>y_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> y_data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Placeholders for a tensor that will be always fed.</span>\nX <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>placeholder<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">,</span> shape<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nY <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>placeholder<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">,</span> shape<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nW <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>Variable<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>random_normal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'weight'</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>Variable<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>random_normal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'bias'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Hypothesis</span>\nhypothesis <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>matmul<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> b\n\n<span class=\"token comment\"># Simplifed cost/loss function</span>\ncost <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>reduce_mean<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>square<span class=\"token punctuation\">(</span>hypothesis <span class=\"token operator\">-</span> Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Minimize</span>\noptimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">.</span>GradientDescentOptimizer<span class=\"token punctuation\">(</span>learning_rate<span class=\"token operator\">=</span><span class=\"token number\">1e-5</span><span class=\"token punctuation\">)</span>\ntrain <span class=\"token operator\">=</span> optimizer<span class=\"token punctuation\">.</span>minimize<span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Launch the graph in a session.</span>\nsess <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Initalizaties global variables in the graph.</span>\nsess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>global_variables_initializer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Set up feed_dict variables inside the loop.</span>\n<span class=\"token keyword\">for</span> step <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cost_val<span class=\"token punctuation\">,</span> hy_val<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> sess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>cost<span class=\"token punctuation\">,</span> hypothesis<span class=\"token punctuation\">,</span> train<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                  feed_dict<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>X<span class=\"token punctuation\">:</span> x_data<span class=\"token punctuation\">,</span> Y<span class=\"token punctuation\">:</span> y_data<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> step <span class=\"token operator\">%</span> <span class=\"token number\">200</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cost:\"</span><span class=\"token punctuation\">,</span> cost_val<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nPrediction:\\n\"</span><span class=\"token punctuation\">,</span> hy_val<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Ask my score</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Your score will be '</span><span class=\"token punctuation\">,</span>\n      sess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>hypothesis<span class=\"token punctuation\">,</span> feed_dict<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>X<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Other scores will be '</span><span class=\"token punctuation\">,</span>\n      sess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>hypothesis<span class=\"token punctuation\">,</span> feed_dict<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>X<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">110</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(25, 3) [[ 73.  80.  75.]\n [ 93.  88.  93.]\n [ 89.  91.  90.]\n [ 96.  98. 100.]\n [ 73.  66.  70.]\n [ 53.  46.  55.]\n [ 69.  74.  77.]\n [ 47.  56.  60.]\n [ 87.  79.  90.]\n [ 79.  70.  88.]\n ...\n [168.16574 ]\n [154.1013  ]\n [190.0794  ]]\nYour score will be  [[178.08527]]\nOther scores will be  [[177.84918]\n [179.8424 ]]</code></pre></div>\n<h2 id=\"queue-runners\" style=\"position:relative;\"><a href=\"#queue-runners\" aria-label=\"queue runners permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Queue Runners</h2>\n<p>파일이 커 메모리에 한 번에 올리기 어려울 때 사용<br/>\n여러개의 파일을 읽어와 <code class=\"language-text\">큐</code>에 삽입한 후 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">filename_queue <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">.</span>string_input_producer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'data-01-test-score.csv'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                                shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n                                                name<span class=\"token operator\">=</span><span class=\"token string\">'filename_queue'</span><span class=\"token punctuation\">)</span>\n\nreader <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>TextLineReader<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nkey<span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span>filename_queue<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Default values, in case of empty columns. Also specifies the type of the</span>\n<span class=\"token comment\"># decoded result.</span>\nrecord_defaults <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nxy <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>decode_csv<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> record_defaults<span class=\"token operator\">=</span>record_defaults<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"tftrainbatch\" style=\"position:relative;\"><a href=\"#tftrainbatch\" aria-label=\"tftrainbatch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tf.train.batch</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># collect batches of csv in</span>\ntrain_x_batch<span class=\"token punctuation\">,</span> train_y_batch <span class=\"token operator\">=</span> \\\n    tf<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">.</span>batch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>xy<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> xy<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># placeholders for a tensor that will be always fed.</span>\nX <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>placeholder<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">,</span> shape<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nY <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>placeholder<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">,</span> shape<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nW <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>Variable<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>random_normal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'weight'</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>Variable<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>random_normal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'bias'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Hypothesis</span>\nhypothesis <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>matmul<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> b\n\n<span class=\"token comment\"># Simplified cost/loss function</span>\ncost <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>reduce_mean<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>square<span class=\"token punctuation\">(</span>hypothesis <span class=\"token operator\">-</span> Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Minimize</span>\noptimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">.</span>GradientDescentOptimizer<span class=\"token punctuation\">(</span>learning_rate<span class=\"token operator\">=</span><span class=\"token number\">1e-5</span><span class=\"token punctuation\">)</span>\ntrain <span class=\"token operator\">=</span> optimizer<span class=\"token punctuation\">.</span>minimize<span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Launch the graph in a session.</span>\nsess <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Initializes global variables in the graph.</span>\nsess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>global_variables_initializer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Start populating the filename queue.</span>\ncoord <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">.</span>Coordinator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nthreads <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">.</span>start_queue_runners<span class=\"token punctuation\">(</span>sess<span class=\"token operator\">=</span>sess<span class=\"token punctuation\">,</span> coord<span class=\"token operator\">=</span>coord<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> step <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    x_batch<span class=\"token punctuation\">,</span> y_batch <span class=\"token operator\">=</span> sess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>train_x_batch<span class=\"token punctuation\">,</span> train_y_batch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    cost_val<span class=\"token punctuation\">,</span> hy_val<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> sess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>cost<span class=\"token punctuation\">,</span> hypothesis<span class=\"token punctuation\">,</span> train<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                   feed_dict<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>X<span class=\"token punctuation\">:</span> x_batch<span class=\"token punctuation\">,</span> Y<span class=\"token punctuation\">:</span> y_batch<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> step <span class=\"token operator\">%</span> <span class=\"token number\">200</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cost: \"</span><span class=\"token punctuation\">,</span> cost_val<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\nPrediction:\\n\"</span><span class=\"token punctuation\">,</span> hy_val<span class=\"token punctuation\">)</span>\n\ncoord<span class=\"token punctuation\">.</span>request_stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncoord<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>threads<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Ask my score</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your score will be \"</span><span class=\"token punctuation\">,</span>\n      sess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>hypothesis<span class=\"token punctuation\">,</span> feed_dict<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>X<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Other scores will be \"</span><span class=\"token punctuation\">,</span>\n      sess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>hypothesis<span class=\"token punctuation\">,</span> feed_dict<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>X<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">110</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">0 Cost:  22151.262\nPrediction:\n [[ 7.2209897]\n [ 8.223362 ]\n [ 8.158764 ]\n [11.476162 ]\n [ 3.9453242]\n [ 6.7052045]\n [12.457916 ]\n [14.690582 ]\n [10.668201 ]\n [15.46727  ]]\n200 Cost:  10.406\nPrediction:\n [[153.47284 ]\n [183.99193 ]\n [181.35991 ]\n ...\n [117.32164 ]\n [174.39641 ]\n [165.7827  ]]\n2000 Cost:  6.780886\nPrediction:\n [[153.70616 ]\n [184.24493 ]\n [181.66989 ]\n [199.7963  ]\n [138.71309 ]\n [105.05913 ]\n [152.4696  ]\n [117.156815]\n [174.3722  ]\n [165.6622  ]]\nYour score will be  [[184.30801]]\nOther scores will be  [[192.92122]\n [173.19138]]</code></pre></div>\n<h2 id=\"shuffle_batch\" style=\"position:relative;\"><a href=\"#shuffle_batch\" aria-label=\"shuffle_batch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>shuffle_batch</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># min_after_dequeue defines how big a buffer we will randomly sample</span>\n<span class=\"token comment\">#   from -- bigger means better shuffling but slower start up and more</span>\n<span class=\"token comment\">#   memory used.</span>\n<span class=\"token comment\"># capacity must be Larger than min_after_dequeue and the amount Larger</span>\n<span class=\"token comment\">#   determines the maximum we will prefetch. Recommendation:</span>\n<span class=\"token comment\">#   min_after_dequeue + (num_threads + a small safety margin) * batch_size</span>\nmin_after_dequeue <span class=\"token operator\">=</span> <span class=\"token number\">10000</span>\ncapacity <span class=\"token operator\">=</span> min_after_dequeue <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> batch_size\nexample_batch<span class=\"token punctuation\">,</span> label_batch <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">.</span>shuffle_batch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>example<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                                    batch_size<span class=\"token operator\">=</span>batch_size<span class=\"token punctuation\">,</span>\n                                                    capacity<span class=\"token operator\">=</span>capacity<span class=\"token punctuation\">,</span>\n                                                    min_after_dequeue<span class=\"token operator\">=</span>min_after_dequeue<span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"lab:TensorFlow로 파일에서 데이타 읽어오기","date":"January 07, 2019","thumbnail":null}}},"pageContext":{"slug":"/MachineLearning/2019-01-07-BasicChapter5-3/","previous":{"fields":{"slug":"/MachineLearning/2019-01-05-BasicChapter5_1/"},"frontmatter":{"title":"multi-variable linear regression","category":"Machine Learning","draft":false}},"next":{"fields":{"slug":"/MachineLearning/2019-01-08-BasicChapter6-1/"},"frontmatter":{"title":"Logistic Classification의 가설 함수 정의","category":"Machine Learning","draft":false}}}},"staticQueryHashes":["3001444076","3128451518"]}