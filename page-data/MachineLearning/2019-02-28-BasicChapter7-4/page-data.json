{"componentChunkName":"component---src-templates-blog-post-js","path":"/MachineLearning/2019-02-28-BasicChapter7-4","result":{"data":{"site":{"siteMetadata":{"title":"Minsu's Dev Log","author":"Minsu Kim","siteUrl":"https://alstn2468.github.io","comment":{"disqusShortName":"","utterances":"alstn2468/alstn2468.github.io"},"sponsor":{"buyMeACoffeeId":"eMLdEwU"}}},"markdownRemark":{"id":"d6c40f0e-7686-5549-994f-8f354acbe8fb","excerpt":"해당 게시물은 Edwith에서 제공하는\n머신러닝과 딥러닝 BASIC을 듣고 요약 정리한 글입니다. Animal classification 동물의 특징에 따라 동물이 어떤 종인지 예측 Load data file tf.one_hot and reshape 의 데이터가 one hot과정을 거치게 되면 한 차원들\n더해 의 데이터가 된다.\n기존의 데이터가 2차원일 경우 3차원의 데이터가 된다.\n따라서 함수를 사용해 차원을 맞춰준다.\n후의 데이터는 이다. (?, 1) -> (?, 1, 7) -> (?,…","html":"<p>해당 게시물은 <a href=\"https://www.edwith.org\">Edwith</a>에서 제공하는<br/>\n<a href=\"https://www.edwith.org/others26/joinLectures/9829\">머신러닝과 딥러닝 BASIC</a>을 듣고 요약 정리한 글입니다.</p>\n<h2 id=\"animal-classification\" style=\"position:relative;\"><a href=\"#animal-classification\" aria-label=\"animal classification permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Animal classification</h2>\n<p>동물의 특징에 따라 동물이 어떤 종인지 예측</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> tensorflow <span class=\"token keyword\">as</span> tf\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/anaconda3/lib/python3.6/site-packages/h5py/__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\n  from ._conv import register_converters as _register_converters</code></pre></div>\n<h2 id=\"load-data-file\" style=\"position:relative;\"><a href=\"#load-data-file\" aria-label=\"load data file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Load data file</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 다양한 특징들을 기반으로 동물의 종을 예측</span>\nxy <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>loadtxt<span class=\"token punctuation\">(</span><span class=\"token string\">'data-04-zoo.csv'</span><span class=\"token punctuation\">,</span> delimiter<span class=\"token operator\">=</span><span class=\"token string\">','</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span>\nx_data <span class=\"token operator\">=</span> xy<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\ny_data <span class=\"token operator\">=</span> xy<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> y_data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(101, 16) (101, 1)</code></pre></div>\n<h2 id=\"tfone_hot-and-reshape\" style=\"position:relative;\"><a href=\"#tfone_hot-and-reshape\" aria-label=\"tfone_hot and reshape permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tf.one_hot and reshape</h2>\n<p><code class=\"language-text\">[[0]. [3]]</code>의 데이터가 <strong>one hot</strong>과정을 거치게 되면 한 차원들<br/>\n더해 <code class=\"language-text\">[[[1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0]]]</code>의 데이터가 된다.<br/>\n기존의 데이터가 2차원일 경우 3차원의 데이터가 된다.<br/>\n따라서 <code class=\"language-text\">reshape</code>함수를 사용해 차원을 맞춰준다.<br/>\n<code class=\"language-text\">reshape</code>후의 데이터는 <code class=\"language-text\">[[1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0]]</code>이다.<br/></p>\n<p><strong>(?, 1) -> (?, 1, 7) -> (?, 7)</strong>로 <code class=\"language-text\">shape</code>이 변경된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">nb_classes <span class=\"token operator\">=</span> <span class=\"token number\">7</span> <span class=\"token comment\"># 0 ~ 6</span>\n\n<span class=\"token comment\"># 동물의 특징 데이터 16가지</span>\nX <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>placeholder<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 동물의 종 7가지</span>\nY <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>placeholder<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>int32<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 0 ~ 6, shape=(?, 1)</span>\n\nY_one_hot <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>one_hot<span class=\"token punctuation\">(</span>Y<span class=\"token punctuation\">,</span> nb_classes<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># one hot shape=(?, 1, 7)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"one_hot\"</span><span class=\"token punctuation\">,</span> Y_one_hot<span class=\"token punctuation\">)</span>\n\nY_one_hot <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>Y_one_hot<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> nb_classes<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># shape=(?, 7)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reshape\"</span><span class=\"token punctuation\">,</span> Y_one_hot<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">one_hot Tensor(\"one_hot:0\", shape=(?, 1, 7), dtype=float32)\nreshape Tensor(\"Reshape:0\", shape=(?, 7), dtype=float32)</code></pre></div>\n<h2 id=\"logits--hypothesis\" style=\"position:relative;\"><a href=\"#logits--hypothesis\" aria-label=\"logits  hypothesis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logits &#x26; Hypothesis</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">W <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>Variable<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>random_normal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span> nb_classes<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'weight'</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>Variable<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>random_normal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>nb_classes<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">'bias'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># tf.nn.softmax함수가 softmax 연산 진행, 아래 식과 동일</span>\n<span class=\"token comment\"># softmax = exp(logits) / reduce_sum(exp(logits), dim)</span>\nlogits <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>matmul<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> b\nhypothesis <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>softmax<span class=\"token punctuation\">(</span>logits<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"cross-entropy-cost--loss-function\" style=\"position:relative;\"><a href=\"#cross-entropy-cost--loss-function\" aria-label=\"cross entropy cost  loss function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cross entropy cost / Loss Function</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">cost_i <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>softmax_cross_entropy_with_logits<span class=\"token punctuation\">(</span>logits<span class=\"token operator\">=</span>logits<span class=\"token punctuation\">,</span>\n                                                labels<span class=\"token operator\">=</span>Y_one_hot<span class=\"token punctuation\">)</span>\ncost <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>reduce_mean<span class=\"token punctuation\">(</span>cost_i<span class=\"token punctuation\">)</span>\noptimizer <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">.</span>GradientDescentOptimizer<span class=\"token punctuation\">(</span>learning_rate<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>minimize<span class=\"token punctuation\">(</span>cost<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">WARNING:tensorflow:From &lt;ipython-input-5-bc56557890b4>:2: softmax_cross_entropy_with_logits (from tensorflow.python.ops.nn_ops) is deprecated and will be removed in a future version.\nInstructions for updating:\n\nFuture major versions of TensorFlow will allow gradients to flow\ninto the labels input on backprop by default.\n\nSee `tf.nn.softmax_cross_entropy_with_logits_v2`.</code></pre></div>\n<h2 id=\"training\" style=\"position:relative;\"><a href=\"#training\" aria-label=\"training permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Training</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">prediction <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>hypothesis<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ncorrect_prediction <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>equal<span class=\"token punctuation\">(</span>prediction<span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>Y_one_hot<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\naccuracy <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>reduce_mean<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>cast<span class=\"token punctuation\">(</span>correct_prediction<span class=\"token punctuation\">,</span> tf<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 학습 시작</span>\n<span class=\"token keyword\">with</span> tf<span class=\"token punctuation\">.</span>Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> sess<span class=\"token punctuation\">:</span>\n    sess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">.</span>global_variables_initializer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> step <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        sess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>optimizer<span class=\"token punctuation\">,</span> feed_dict<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>X<span class=\"token punctuation\">:</span> x_data<span class=\"token punctuation\">,</span> Y<span class=\"token punctuation\">:</span> y_data<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> step <span class=\"token operator\">%</span> <span class=\"token number\">100</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            loss<span class=\"token punctuation\">,</span> acc <span class=\"token operator\">=</span> sess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>cost<span class=\"token punctuation\">,</span> accuracy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> feed_dict<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n                X<span class=\"token punctuation\">:</span> x_data<span class=\"token punctuation\">,</span>\n                Y<span class=\"token punctuation\">:</span> y_data<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Step : {:5}\\tLoss : {:.3f}\\tAcc : {:.2%}\"</span>\\\n                 <span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">,</span> loss<span class=\"token punctuation\">,</span> acc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 예츨 결과 확인</span>\n    pred <span class=\"token operator\">=</span> sess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>prediction<span class=\"token punctuation\">,</span> feed_dict<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>X<span class=\"token punctuation\">:</span> x_data<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Step :     0\tLoss : 7.064\tAcc : 1.98%\nStep :   100\tLoss : 0.940\tAcc : 83.17%\nStep :   200\tLoss : 0.515\tAcc : 85.15%\nStep :   300\tLoss : 0.362\tAcc : 88.12%\nStep :   400\tLoss : 0.284\tAcc : 92.08%\nStep :   500\tLoss : 0.233\tAcc : 93.07%\nStep :   600\tLoss : 0.197\tAcc : 94.06%\nStep :   700\tLoss : 0.171\tAcc : 95.05%\nStep :   800\tLoss : 0.150\tAcc : 95.05%\nStep :   900\tLoss : 0.133\tAcc : 97.03%\nStep :  1000\tLoss : 0.120\tAcc : 98.02%\nStep :  1100\tLoss : 0.109\tAcc : 98.02%\nStep :  1200\tLoss : 0.100\tAcc : 99.01%\nStep :  1300\tLoss : 0.092\tAcc : 100.00%\nStep :  1400\tLoss : 0.085\tAcc : 100.00%\nStep :  1500\tLoss : 0.079\tAcc : 100.00%\nStep :  1600\tLoss : 0.074\tAcc : 100.00%\nStep :  1700\tLoss : 0.070\tAcc : 100.00%\nStep :  1800\tLoss : 0.066\tAcc : 100.00%\nStep :  1900\tLoss : 0.062\tAcc : 100.00%</code></pre></div>\n<h2 id=\"check-predictive-results\" style=\"position:relative;\"><a href=\"#check-predictive-results\" aria-label=\"check predictive results permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Check Predictive Results</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># y_data: (N,1) = flatten => (N, ) matches pred.shape</span>\n<span class=\"token keyword\">for</span> p<span class=\"token punctuation\">,</span> y <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">,</span> y_data<span class=\"token punctuation\">.</span>flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[{}] Prediction : {} True Y : {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[True] Prediction : 0 True Y : 0\n[True] Prediction : 0 True Y : 0\n...\n[True] Prediction : 0 True Y : 0\n[True] Prediction : 6 True Y : 6\n[True] Prediction : 1 True Y : 1</code></pre></div>","frontmatter":{"title":"lab:TensorFlow로 Fancy Softmax Classification의 구현하기","date":"February 28, 2019","thumbnail":null}}},"pageContext":{"slug":"/MachineLearning/2019-02-28-BasicChapter7-4/","previous":{"fields":{"slug":"/MachineLearning/2019-02-27-BasicChapter7-3/"},"frontmatter":{"title":"lab:TensorFlow로 Softmax Classification의 구현하기","category":"Machine Learning","draft":false}},"next":{"fields":{"slug":"/Algorithms/2019-03-13-Check-Power-Of-Four/"},"frontmatter":{"title":"주어진 수가 4의 거듭제곱인지 확인하기","category":"Algorithms","draft":false}}}},"staticQueryHashes":["3001444076","3128451518"]}