{"componentChunkName":"component---src-templates-blog-post-js","path":"/TypeScript/2021-06-12-fp-ts-9","result":{"data":{"site":{"siteMetadata":{"title":"Minsu's Dev Log","author":"Minsu Kim","siteUrl":"https://alstn2468.github.io","comment":{"disqusShortName":"","utterances":"alstn2468/alstn2468.github.io"},"sponsor":{"buyMeACoffeeId":"eMLdEwU"}}},"markdownRemark":{"id":"c5e2d44c-044e-5663-b340-835e5ce8d516","excerpt":"본 포스트는 fp-ts 공식 문서의 Learning Resources에 있는 Getting Started에서 소개하는 문서들을 번역하며 학습한 문서입니다. 원본 문서는 링크에서 확인할 수 있으며 작성한 코드들은 여기에서 확인할 수 있습니다. 문제 계정을 등록하기 위한 웹 양식을 구현해야 합니다. 양식에는 과  두 가지 필드가 있으며 아래의 유효성 검사 규칙을 따라야 합니다. 은 비워둘 수 없습니다. 에 를 포함할 수 없습니다. 는…","html":"<p>본 포스트는 fp-ts 공식 문서의 <a href=\"https://gcanti.github.io/fp-ts/learning-resources/\">Learning Resources</a>에 있는 Getting Started에서 소개하는 문서들을 번역하며 학습한 문서입니다. 원본 문서는 <a href=\"https://dev.to/gcanti/getting-started-with-fp-ts-either-vs-validation-5eja\">링크</a>에서 확인할 수 있으며 작성한 코드들은 <a href=\"https://github.com/alstn2468/getting-started-fp-ts/tree/main/src/getting_started_series/9_either_vs_validation\">여기</a>에서 확인할 수 있습니다.</p>\n<h2 id=\"문제\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제</h2>\n<p>계정을 등록하기 위한 웹 양식을 구현해야 합니다. 양식에는 <code class=\"language-text\">username</code>과 <code class=\"language-text\">password</code> 두 가지 필드가 있으며 아래의 유효성 검사 규칙을 따라야 합니다.</p>\n<ul>\n<li><code class=\"language-text\">username</code>은 비워둘 수 없습니다.</li>\n<li><code class=\"language-text\">username</code>에 <code class=\"language-text\">–</code>를 포함할 수 없습니다.</li>\n<li><code class=\"language-text\">password</code>는 6자 이상이어야 합니다.</li>\n<li><code class=\"language-text\">password</code>는 적어도 하나의 대문자를 가져야 합니다.</li>\n<li><code class=\"language-text\">password</code>는 최소 하나의 숫자를 가져야 합니다.</li>\n</ul>\n<h2 id=\"either\" style=\"position:relative;\"><a href=\"#either\" aria-label=\"either permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Either</h2>\n<p><code class=\"language-text\">Either&lt;E, A></code> 타입은 <code class=\"language-text\">E</code> 타입의 오류로 실패하거나 <code class=\"language-text\">A</code> 타입의 값으로 성공할 수 있는 계산을 나타내므로 유효성 검사 규칙을 구현하기에 좋은 후보입니다.</p>\n<p>예를 들어 각 비밀번호 규칙을 인코딩해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> Either <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Either'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> left<span class=\"token punctuation\">,</span> right <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Either'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> minLength <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Either<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span>\n  s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> <span class=\"token number\">6</span> <span class=\"token operator\">?</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span><span class=\"token string\">'at least 6 characters'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> oneCapital <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Either<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span>\n  <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[A-Z]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span><span class=\"token string\">'at least one capital letter'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> oneNumber <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Either<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span>\n  <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[0-9]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span><span class=\"token string\">'at least one number'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>우리는 모든 규칙을 <code class=\"language-text\">chain</code>을 이용해 묶을 수 있습니다.</p>\n<blockquote>\n<p>원문에서는 <code class=\"language-text\">pipeable/pipe</code>를 사용하라고 작성되어 있지만, 최신 버전의 fp-ts에서는 deprecated 되어 있으며 <a href=\"https://gcanti.github.io/fp-ts/modules/function.ts.html#pipe\"><code class=\"language-text\">function/pipe</code></a>를 사용하면 됩니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> Either <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Either'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> chain <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Either'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> pipe <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/function'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> chainValidatePassword <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Either<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">minLength</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">chain</span><span class=\"token punctuation\">(</span>oneCapital<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">chain</span><span class=\"token punctuation\">(</span>oneNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>우리는 <code class=\"language-text\">Either</code>를 사용하고 있기 때문에 먼저 실패하는 것만 확인합니다. 즉, 앞의 검증에 실패하면 뒤의 검증을 하지 않음으로 하나의 오류만 발생합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">validatePassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ab'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => left(\"at least 6 characters\")</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">validatePassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abcdef'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => left(\"at least one capital letter\")</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">validatePassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Abcdef'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => left(\"at least one number\")</span></code></pre></div>\n<p>그러나 이것은 나쁜 UX로 이어질 수 있으며 이런 모든 오류를 동시에 보고하는 것이 좋습니다.</p>\n<p>여기에서 <code class=\"language-text\">Validation</code> 추상화가 도움이 될 수 있습니다.</p>\n<h2 id=\"validation\" style=\"position:relative;\"><a href=\"#validation\" aria-label=\"validation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Validation</h2>\n<p><code class=\"language-text\">Validation</code>은 <code class=\"language-text\">Either&lt;E, A></code>와 매우 유사하며 <code class=\"language-text\">E</code> 타입의 오류로 실패하거나 <code class=\"language-text\">A</code> 타입의 값으로 성공할 수 있는 계산을 나타내지만 <code class=\"language-text\">Either</code>의 일반적인 계산과는 달리 <strong>여러 실패를 수집할 수 있습니다</strong>.</p>\n<p>이를 위해서는 <code class=\"language-text\">E</code> 타입의 <strong>두 값을 결합</strong>하는 방법을 <code class=\"language-text\">Validation</code>에게 알려야 합니다.</p>\n<p>동일한 타입의 두 값을 결합하는 것이 <a href=\"https://alstn2468.github.io/TypeScript/2021-04-25-fp-ts-3/\">Semigroup</a>의 모든 것입니다.</p>\n<p>예를 들어 오류를 비어있지 않은 배열에 압축 할 수 있습니다.</p>\n<p><code class=\"language-text\">'fp-ts/lib/Either'</code> 모듈은 <code class=\"language-text\">Semigroup</code>이 주어지면 <code class=\"language-text\">Either</code>에 대한 대체 <a href=\"https://alstn2468.github.io/TypeScript/2021-05-30-fp-ts-7/\">Applicative</a> 인스턴스를 반환하는 <del><code class=\"language-text\">getValidation</code> 함수를 제공</del>합니다.</p>\n<blockquote>\n<p>원문에서는 <code class=\"language-text\">getValidation</code>을 사용하라고 작성되어 있지만, 최신 버전의 fp-ts에서는 deprecated 되어 있으며 <a href=\"https://gcanti.github.io/fp-ts/modules/Either.ts.html#getapplicativevalidation\"><code class=\"language-text\">getApplicativeValidation</code></a>를 사용하면 됩니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getSemigroup <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/NonEmptyArray'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getApplicativeValidation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Either'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> applicativeValidation <span class=\"token operator\">=</span> <span class=\"token function\">getApplicativeValidation</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">getSemigroup</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그러나 <code class=\"language-text\">applicativeValidation</code>을 사용하려면 먼저 <code class=\"language-text\">Either&lt;NonEmptyArray&lt;string>, string></code> 타입의 값을 반환하도록 모든 규칙을 재정의 해야 합니다.</p>\n<p>번거롭게 이전 함수를 모두 다시 작성하는 대신 <code class=\"language-text\">Either&lt;E, A></code>를 반환하는 것을 <code class=\"language-text\">Either&lt;NonEmptyArray&lt;E>, A></code>를 반환하도록 <a href=\"https://dev.to/gcanti/functional-design-combinators-14pn\">콤비네이터</a>를 정의할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> NonEmptyArray <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/NonEmptyArray'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> mapLeft <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Either'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">lift</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">E</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  <span class=\"token function-variable function\">check</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Either<span class=\"token operator\">&lt;</span><span class=\"token constant\">E</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Either<span class=\"token operator\">&lt;</span>NonEmptyArray<span class=\"token operator\">&lt;</span><span class=\"token constant\">E</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">=></span>\n    <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">mapLeft</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> minLengthV <span class=\"token operator\">=</span> <span class=\"token function\">lift</span><span class=\"token punctuation\">(</span>minLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> oneCapitalV <span class=\"token operator\">=</span> <span class=\"token function\">lift</span><span class=\"token punctuation\">(</span>oneCapital<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> oneNumberV <span class=\"token operator\">=</span> <span class=\"token function\">lift</span><span class=\"token punctuation\">(</span>oneNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>모두 합쳐서 <code class=\"language-text\">n</code>개의 작업을 왼쪽에서 오른쪽으로 수행하여 결과 튜플을 반환하는 <code class=\"language-text\">sequenceT</code> 헬퍼 함수를 사용할 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> sequenceT <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Apply'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> map <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Either'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">validatePassword</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Either<span class=\"token operator\">&lt;</span>NonEmptyArray<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">sequenceT</span><span class=\"token punctuation\">(</span><span class=\"token function\">getApplicativeValidation</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">getSemigroup</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">minLengthV</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">oneCapitalV</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">oneNumberV</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> s<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">validatePassword</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ab'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => left([\"at least 6 characters\", \"at least one capital letter\", \"at least one number\"])</span></code></pre></div>\n<h2 id=\"부록\" style=\"position:relative;\"><a href=\"#%EB%B6%80%EB%A1%9D\" aria-label=\"부록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>부록</h2>\n<blockquote>\n<p>참고: <code class=\"language-text\">sequenceT</code> 헬퍼 함수는 다양한 타입의 작업을 처리 할 수 ​​있습니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Person 생성자</span>\n<span class=\"token keyword\">const</span> toPerson <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Person <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">,</span>\n  age<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> validateName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Either<span class=\"token operator\">&lt;</span>NonEmptyArray<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span>\n  s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Invalid name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> validateAge <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Either<span class=\"token operator\">&lt;</span>NonEmptyArray<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Invalid age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">validatePerson</span><span class=\"token punctuation\">(</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Either<span class=\"token operator\">&lt;</span>NonEmptyArray<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> Person<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">sequenceT</span><span class=\"token punctuation\">(</span>applicativeValidation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">validateName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">validateAge</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>toPerson<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"fp-ts로 Typescript 함수형 프로그래밍 시작하기 9 (Either vs Validation)","date":"June 12, 2021","thumbnail":null}}},"pageContext":{"slug":"/TypeScript/2021-06-12-fp-ts-9/","previous":{"fields":{"slug":"/TypeScript/2021-06-05-fp-ts-8/"},"frontmatter":{"title":"fp-ts로 Typescript 함수형 프로그래밍 시작하기 8 (Monad)","category":"TypeScript","draft":false}},"next":{"fields":{"slug":"/TypeScript/2021-06-20-fp-ts-10/"},"frontmatter":{"title":"fp-ts로 Typescript 함수형 프로그래밍 시작하기 10 (IO)","category":"TypeScript","draft":false}}}},"staticQueryHashes":["3001444076","3128451518"]}