{"componentChunkName":"component---src-templates-blog-post-js","path":"/TypeScript/2022-01-03-fp-ts-funtional-design-6","result":{"data":{"site":{"siteMetadata":{"title":"Minsu's Dev Log","author":"Minsu Kim","siteUrl":"https://alstn2468.github.io","comment":{"disqusShortName":"","utterances":"alstn2468/alstn2468.github.io"},"sponsor":{"buyMeACoffeeId":"eMLdEwU"}}},"markdownRemark":{"id":"6b37cdff-d5b0-55bf-b4d0-e9979e3b2d6c","excerpt":"본 포스트는 fp-ts 공식 문서의 Learning Resources에 있는 Functional design series에서 소개하는 문서들을 번역하며 학습한 문서입니다. 원본 문서는 링크에서 확인할 수 있으며 작성한 코드들은 여기에서 확인할 수 있습니다. 함수형 디자인: 속성 기반 테스트 소개 Eq, Ord, Semigroup 과 Monoid…","html":"<p>본 포스트는 fp-ts 공식 문서의 <a href=\"https://gcanti.github.io/fp-ts/learning-resources/\">Learning Resources</a>에 있는 Functional design series에서 소개하는 문서들을 번역하며 학습한 문서입니다. 원본 문서는 <a href=\"https://dev.to/gcanti/introduction-to-property-based-testing-17nk\">링크</a>에서 확인할 수 있으며 작성한 코드들은 <a href=\"https://github.com/alstn2468/getting-started-fp-ts/tree/main/src/functional_design_series/6_property_based_testing\">여기</a>에서 확인할 수 있습니다.</p>\n<h2 id=\"함수형-디자인-속성-기반-테스트-소개\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%EB%94%94%EC%9E%90%EC%9D%B8-%EC%86%8D%EC%84%B1-%EA%B8%B0%EB%B0%98-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%86%8C%EA%B0%9C\" aria-label=\"함수형 디자인 속성 기반 테스트 소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수형 디자인: 속성 기반 테스트 소개</h2>\n<p><a href=\"https://alstn2468.github.io/TypeScript/2021-04-24-fp-ts-1/\">Eq</a>, <a href=\"https://alstn2468.github.io/TypeScript/2021-04-25-fp-ts-2/\">Ord</a>, <a href=\"https://alstn2468.github.io/TypeScript/2021-04-25-fp-ts-3/\">Semigroup</a> 과 <a href=\"https://alstn2468.github.io/TypeScript/2021-04-29-fp-ts-4/\">Monoid</a>에 대한 이전 게시물에서는 인스턴스가 몇 가지 <strong>규칙</strong>을 지켜야 함을 보았습니다.</p>\n<p>그렇다면 인스턴스가 <strong>규칙을 지키는지</strong> 어떻게 확인할 수 있을까요?</p>\n<h2 id=\"속성-기반-테스트\" style=\"position:relative;\"><a href=\"#%EC%86%8D%EC%84%B1-%EA%B8%B0%EB%B0%98-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"속성 기반 테스트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>속성 기반 테스트</h2>\n<p>속성 기반 테스트는 기존 단위 테스트 방법을 보완하는 코드를 테스트하는 또 다른 방법입니다.</p>\n<p><strong>생성된 임의의 항목</strong>을 테스트하여 속성이 거짓이 되도록 하는 입력을 찾으려 시도합니다. 실패의 경우 속성 기반 테스트 프레임워크는 반례와 생성에 사용된 시드를 모두 제공합니다.</p>\n<p>속성 기반 테스트를 <code class=\"language-text\">Semigroup</code>의 규칙에 적용해 보겠습니다.</p>\n<ul>\n<li><strong>결합 법칙(Associativity)</strong> : <code class=\"language-text\">concat(concat(x, y), z) = concat(x, concat(y, z))</code></li>\n</ul>\n<p>TypeScript로 작성된 속성 기반 테스트 프레임워크인 <a href=\"https://github.com/dubzzz/fast-check\">fast-check</a>을 사용하겠습니다.</p>\n<h2 id=\"code-classlanguage-textsemigroupcode-인스턴스-테스트하기\" style=\"position:relative;\"><a href=\"#code-classlanguage-textsemigroupcode-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0\" aria-label=\"code classlanguage textsemigroupcode 인스턴스 테스트하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">Semigroup</code> 인스턴스 테스트하기</h2>\n<p>아래의 세 가지 재료가 필요합니다.</p>\n<ol>\n<li>타입 <code class=\"language-text\">A</code>에 대한 <code class=\"language-text\">Semigroup&lt;A></code> 인스턴스</li>\n<li>결합 법칙을 인코딩하는 <em>속성</em></li>\n<li>임의의 타입 <code class=\"language-text\">A</code> 값을 생성하는 방법</li>\n</ol>\n<h3 id=\"인스턴스\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4\" aria-label=\"인스턴스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인스턴스</h3>\n<p>인스턴스는 아래와 같이 사용할 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> Semigroup <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Semigroup'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">S</span><span class=\"token operator\">:</span> Semigroup<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">concat</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> y<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"속성\" style=\"position:relative;\"><a href=\"#%EC%86%8D%EC%84%B1\" aria-label=\"속성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>속성</h3>\n<p>속성은 <code class=\"language-text\">boolean</code>을 반환하는 <code class=\"language-text\">predicate</code> 함수입니다. <code class=\"language-text\">predicate</code> 함수가 <code class=\"language-text\">true</code>를 반환하면 속성이 유지된다고 할 수 있습니다.</p>\n<p>따라서 결합 법칙 속성을 아래와 같이 정의할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">associativity</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> z<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token constant\">S</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token constant\">S</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"code-classlanguage-textarbitraryltacode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textarbitraryltacode\" aria-label=\"code classlanguage textarbitraryltacode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">Arbitrary&lt;A></code></h3>\n<p><code class=\"language-text\">Arbitrary&lt;A></code>는 타입 <code class=\"language-text\">A</code>의 임의 값을 생성하는 역할을 합니다. <code class=\"language-text\">Arbitrary&lt;string></code>이 ​​필요합니다. 다행스럽게도 <code class=\"language-text\">fast-check</code>은 많은 내장된 임의 값을 제공합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> fc <span class=\"token keyword\">from</span> <span class=\"token string\">'fast-check'</span>\n\n<span class=\"token keyword\">const</span> arb<span class=\"token operator\">:</span> fc<span class=\"token punctuation\">.</span>Arbitrary<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> fc<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>모든 것을 사용하면 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fast-check을 이용한 속성 기반 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(x + y) + z === x + (y + z)인지 확인하는 associativity 함수 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> arb<span class=\"token operator\">:</span> fc<span class=\"token punctuation\">.</span>Arbitrary<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> fc<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fc<span class=\"token punctuation\">.</span><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>fc<span class=\"token punctuation\">.</span><span class=\"token function\">property</span><span class=\"token punctuation\">(</span>arb<span class=\"token punctuation\">,</span> arb<span class=\"token punctuation\">,</span> arb<span class=\"token punctuation\">,</span> associativity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">fast-check</code>에서 오류가 발생하지 않으면 인스턴스가 잘 정의되어 있다고 확신할 수 있습니다.</p>\n<h2 id=\"code-classlanguage-textmonoidcode-인스턴스-테스트하기\" style=\"position:relative;\"><a href=\"#code-classlanguage-textmonoidcode-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0\" aria-label=\"code classlanguage textmonoidcode 인스턴스 테스트하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">Monoid</code> 인스턴스 테스트하기</h2>\n<p>인스턴스가 규칙을 어길 때 어떤 일이 발생하는지 봅시다.</p>\n<p>인스턴스는 아래와 같이 사용할 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> Monoid <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Monoid'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">S</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./S'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">M</span><span class=\"token operator\">:</span> Monoid<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span>\n  empty<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">Monoid</code> 법칙을 속성으로 인코딩해야 합니다.</p>\n<ul>\n<li>오른쪽 항등식(<strong>Right identity</strong>): <code class=\"language-text\">concat(x, empty) = x</code></li>\n<li>왼쪽 항등식(<strong>Left identity</strong>): <code class=\"language-text\">concat(empty, x) = x</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rightIdentity</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">M</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> x<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">leftIdentity</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">M</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token constant\">M</span><span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> x<span class=\"token punctuation\">;</span></code></pre></div>\n<p>마지막으로 아래와 같이 테스트를 작성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fast-check을 이용한 속성 기반 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'concat(x, empty) == x인지 확인하는 rightIdentity 함수 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    fc<span class=\"token punctuation\">.</span><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>fc<span class=\"token punctuation\">.</span><span class=\"token function\">property</span><span class=\"token punctuation\">(</span>arb<span class=\"token punctuation\">,</span> rightIdentity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'concat(empty, x) == x인지 확인하는 leftIdentity 함수 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    fc<span class=\"token punctuation\">.</span><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>fc<span class=\"token punctuation\">.</span><span class=\"token function\">property</span><span class=\"token punctuation\">(</span>arb<span class=\"token punctuation\">,</span> leftIdentity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>테스트를 실행하면 아래와 같은 결과를 얻을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">Error</span><span class=\"token punctuation\">:</span> Property failed after 1 tests\n<span class=\"token punctuation\">{</span> <span class=\"token key atrule\">seed</span><span class=\"token punctuation\">:</span> <span class=\"token number\">-2056884750</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"0:0\"</span><span class=\"token punctuation\">,</span> <span class=\"token key atrule\">endOnFailure</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token punctuation\">}</span>\n<span class=\"token key atrule\">Counterexample</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>훌륭합니다. <code class=\"language-text\">fast-check</code>은 우리에게 <code class=\"language-text\">\"\"</code>라는 반례를 제공합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token constant\">M</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">' '</span> <span class=\"token comment\">// ''가 되어야 한다.</span></code></pre></div>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<p>타입 클래스 규칙을 쉽게 테스트할 수 있는 라이브러리는 <a href=\"https://github.com/gcanti/fp-ts-laws\">fp-ts-laws</a>를 확인하면 된다.</p>","frontmatter":{"title":"함수형 디자인: 속성 기반 테스트 소개","date":"January 03, 2022","thumbnail":null}}},"pageContext":{"slug":"/TypeScript/2022-01-03-fp-ts-funtional-design-6/","previous":{"fields":{"slug":"/TypeScript/2021-12-05-fp-ts-funtional-design-5/"},"frontmatter":{"title":"함수형 디자인: Typescript에서의 TDD (declare의 남용)","category":"TypeScript","draft":false}},"next":{"fields":{"slug":"/TypeScript/2022-05-10-fp-ts-funtional-design-7/"},"frontmatter":{"title":"함수형 디자인: 대수적 자료형","category":"TypeScript","draft":false}}}},"staticQueryHashes":["3001444076","3128451518"]}