{"componentChunkName":"component---src-templates-blog-post-js","path":"/TypeScript/2021-07-12-fp-ts-funtional-design-1","result":{"data":{"site":{"siteMetadata":{"title":"Minsu's Dev Log","author":"Minsu Kim","siteUrl":"https://alstn2468.github.io","comment":{"disqusShortName":"","utterances":"alstn2468/alstn2468.github.io"},"sponsor":{"buyMeACoffeeId":"eMLdEwU"}}},"markdownRemark":{"id":"dfb31c07-913d-5405-aa44-660c526b22cb","excerpt":"본 포스트는 fp-ts 공식 문서의 Learning Resources에 있는 Functional design series에서 소개하는 문서들을 번역하며 학습한 문서입니다. 원본 문서는 링크에서 확인할 수 있으며 작성한 코드들은 여기에서 확인할 수 있습니다. 함수형 디자인: combinators 이번 포스트에서 “combinator”라는 용어는 combinator…","html":"<p>본 포스트는 fp-ts 공식 문서의 <a href=\"https://gcanti.github.io/fp-ts/learning-resources/\">Learning Resources</a>에 있는 Functional design series에서 소개하는 문서들을 번역하며 학습한 문서입니다. 원본 문서는 <a href=\"https://dev.to/gcanti/functional-design-combinators-14pn\">링크</a>에서 확인할 수 있으며 작성한 코드들은 <a href=\"https://github.com/alstn2468/getting-started-fp-ts/tree/main/src/functional_design_series/1_combinator_one\">여기</a>에서 확인할 수 있습니다.</p>\n<h2 id=\"함수형-디자인-combinators\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%EB%94%94%EC%9E%90%EC%9D%B8-combinators\" aria-label=\"함수형 디자인 combinators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수형 디자인: combinators</h2>\n<p>이번 포스트에서 “combinator”라는 용어는 <a href=\"https://wiki.haskell.org/Combinator\">combinator 패턴</a>을 가리킵니다.</p>\n<blockquote>\n<p>어떤 것을 결합하는 아이디어 중심으로 라이브러리를 구성하는 방식. 일반적으로 <code class=\"language-text\">T</code> 타입, <code class=\"language-text\">T</code> 타입의 “원시” 값, 그리고 <code class=\"language-text\">T</code> 타입의 값을 다양한 방법으로 조합하여 <code class=\"language-text\">T</code> 타입보다 복잡한 값을 구성할 수 있는 “combinator”가 있습니다.</p>\n</blockquote>\n<p>따라서 combinator의 일반적인 모양은 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">combinator</span><span class=\"token operator\">:</span> <span class=\"token constant\">Thing</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Thing</span></code></pre></div>\n<p>combinator의 목표는 이전에 정의된 “Thing”에서 새로운 “Thing”을 만드는 것입니다.</p>\n<p>결과는 입력으로 다시 전달될 수 있기 때문에 복합적인 폭발적 가능성을 갖게 되고, 이는 이러한 패턴을 매우 강력하게 만듭니다.</p>\n<p>여러 combinator를 함께 조합하면 훨씬 더 큰 조합 폭발이 일어납니다.</p>\n<p>따라서 함수형 모듈에서 자주 찾을 수 있는 디자인은 아래와 같습니다.</p>\n<ul>\n<li>아주 단순한 “원시값”의 작은 집합</li>\n<li>더 복잡한 구조로 결합하기 위한 “combinator” 집합</li>\n</ul>\n<p>몇 가지 예시를 살펴보겠습니다.</p>\n<h2 id=\"예시-1-code-classlanguage-texteqcode\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-1-code-classlanguage-texteqcode\" aria-label=\"예시 1 code classlanguage texteqcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 1: <code class=\"language-text\">Eq</code></h2>\n<p><code class=\"language-text\">getEq</code> combinator: <code class=\"language-text\">A</code>에 대한 <code class=\"language-text\">Eq</code> 인스턴스가 주어지면 <code class=\"language-text\">ReadonlyArray&lt;A></code>에 대한 <code class=\"language-text\">Eq</code> 인스턴스를 파생할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> Eq <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Eq'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> fromEquals <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Eq'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">getEq</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">E</span><span class=\"token operator\">:</span> Eq<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Eq<span class=\"token operator\">&lt;</span>ReadonlyArray<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fromEquals</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span>xs<span class=\"token punctuation\">,</span> ys<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      xs<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> ys<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> xs<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">E</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> ys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>작성한 <code class=\"language-text\">getEq</code> combinator를 사용하는 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/** `number`를 위한 원시적인 `Eq` 인스턴스 */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> eqNumber<span class=\"token operator\">:</span> Eq<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">equals</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">===</span> y<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 파생된</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> eqNumbers<span class=\"token operator\">:</span> Eq<span class=\"token operator\">&lt;</span>ReadonlyArray<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">>></span> <span class=\"token operator\">=</span> <span class=\"token function\">getEq</span><span class=\"token punctuation\">(</span>eqNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 파생된</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> eqNumbersNumbers<span class=\"token operator\">:</span> Eq<span class=\"token operator\">&lt;</span>ReadonlyArray<span class=\"token operator\">&lt;</span>ReadonlyArray<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">>>></span> <span class=\"token operator\">=</span> <span class=\"token function\">getEq</span><span class=\"token punctuation\">(</span>\n  eqNumbers<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 파생된</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> eqNumbersNumbersNumbers<span class=\"token operator\">:</span> Eq<span class=\"token operator\">&lt;</span>\n  ReadonlyArray<span class=\"token operator\">&lt;</span>ReadonlyArray<span class=\"token operator\">&lt;</span>ReadonlyArray<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">>>></span>\n<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">getEq</span><span class=\"token punctuation\">(</span>eqNumbersNumbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// etc...</span></code></pre></div>\n<p>또 다른 combinator인 <code class=\"language-text\">contramap</code>: <code class=\"language-text\">A</code>에 대한 <code class=\"language-text\">Eq</code> 인스턴스와 <code class=\"language-text\">B</code>에서 <code class=\"language-text\">A</code>로의 함수가 주어지면 <code class=\"language-text\">B</code>에 대한 <code class=\"language-text\">Eq</code> 인스턴스를 파생할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> Eq <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Eq'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> fromEquals <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Eq'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> contramap <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">f</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">:</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token constant\">E</span><span class=\"token operator\">:</span> Eq<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Eq<span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">fromEquals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">E</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>작성한 <code class=\"language-text\">contramap</code> combinator를 사용하는 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> Eq <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Eq'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> contramap <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Eq'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> pipe <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/function'</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">N</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/number'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">RA</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/ReadonlyArray'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> eqUser<span class=\"token operator\">:</span> Eq<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n  <span class=\"token constant\">N</span><span class=\"token punctuation\">.</span>Eq<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">contramap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">:</span> User<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> eqUsers<span class=\"token operator\">:</span> Eq<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>User<span class=\"token operator\">>></span> <span class=\"token operator\">=</span> <span class=\"token constant\">RA</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEq</span><span class=\"token punctuation\">(</span>eqUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"예시-2-code-classlanguage-textmonoidcode\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-2-code-classlanguage-textmonoidcode\" aria-label=\"예시 2 code classlanguage textmonoidcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 2: <code class=\"language-text\">Monoid</code></h2>\n<p><code class=\"language-text\">getMonoid</code> combinator: <code class=\"language-text\">A</code>에 대한 <code class=\"language-text\">Monoid</code> 인스턴스가 주어지면 <code class=\"language-text\">IO&lt;A></code>에 대한 <code class=\"language-text\">Monoid</code> 인스턴스를 파생할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">IO</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/IO'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> Monoid <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Monoid'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">getMonoid</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">M</span><span class=\"token operator\">:</span> Monoid<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Monoid<span class=\"token operator\">&lt;</span><span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">concat</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">M</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">empty</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">M</span><span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">getMonoid</code>를 사용하여 다른 combinator인 <code class=\"language-text\">replicateIO</code>를 파생할 수 있습니다. 숫자 <code class=\"language-text\">n</code>과 <code class=\"language-text\">IO&lt;void></code> 타입의 작업 <code class=\"language-text\">mv</code>가 주어지면 <code class=\"language-text\">n</code>번 <code class=\"language-text\">mv</code>를 수행하는 작업을 파생할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> Monoid <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Monoid'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> concatAll <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Monoid'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> replicate <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/ReadonlyArray'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** `void`를 위한 원시적인 `Monoid` 인스턴스 */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> monoidVoid<span class=\"token operator\">:</span> Monoid<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">concat</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n  empty<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">replicateIO</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> mv<span class=\"token operator\">:</span> <span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">concatAll</span><span class=\"token punctuation\">(</span><span class=\"token function\">getMonoid</span><span class=\"token punctuation\">(</span>monoidVoid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">replicate</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> mv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">getMonoid</code> combinator에서 파생된 <code class=\"language-text\">replicateIO</code> combinator를 사용하는 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// 헬퍼함수</span>\n<span class=\"token comment\">//</span>\n\n<span class=\"token comment\">/** 콘솔에 메세지를 출력하는 함수 */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/** `low`와 `high` 사이의 임의의 정수를 반환하는 함수. */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> randomInt <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>low<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> high<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>high <span class=\"token operator\">-</span> low <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> low<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// 프로그램</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> chain <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/IO'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> pipe <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/function'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/** 임의의 피보나치 수열을 계산하고 결과를 콘솔에 출력하는 함수 */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> printFib<span class=\"token operator\">:</span> <span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">randomInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">chain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">replicateIO</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> printFib<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/*\n1346269\n9227465\n3524578\n*/</span></code></pre></div>\n<h2 id=\"예시-3-code-classlanguage-textiocode\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-3-code-classlanguage-textiocode\" aria-label=\"예시 3 code classlanguage textiocode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 3: <code class=\"language-text\">IO</code></h2>\n<p><code class=\"language-text\">IO</code>를 위한 다른 많은 combinator를 만들 수 있습니다. 예를 들어 <code class=\"language-text\">time</code> combinator는 유사한 Unix 명령을 모방합니다. <code class=\"language-text\">IO&lt;A></code> 작업이 주어지면 실행 시간을 콘솔에 출력하는 작업 <code class=\"language-text\">IO&lt;A></code>를 파생할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">IO</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/IO'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Monad <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/IO'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> now <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Date'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> log <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Console'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">time</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>ma<span class=\"token operator\">:</span> <span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Monad<span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    Monad<span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span>ma<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      Monad<span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        Monad<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Elapsed: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>end <span class=\"token operator\">-</span> start<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>작성한 <code class=\"language-text\">time</code> combinator를 사용하는 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token function\">replicateIO</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> printFib<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/*\n5702887\n1346269\n14930352\nElapsed: 193\n*/</span></code></pre></div>\n<p>아래와 같이 부분적으로도 적용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token function\">replicateIO</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span>printFib<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/*\n3524578\nElapsed: 32\n14930352\nElapsed: 125\n3524578\nElapsed: 32\nElapsed: 189\n*/</span></code></pre></div>\n<p>어떻게 하면 <code class=\"language-text\">time</code> combinator를 더 일반적으로 만들 수 있을까요? <a href=\"https://alstn2468.github.io/TypeScript/2021-07-20-fp-ts-funtional-design-2/\">다음 포스트</a>에서 방법을 살펴보겠습니다.</p>","frontmatter":{"title":"함수형 디자인: combinators","date":"July 12, 2021","thumbnail":null}}},"pageContext":{"slug":"/TypeScript/2021-07-12-fp-ts-funtional-design-1/","previous":{"fields":{"slug":"/TypeScript/2021-07-05-fp-ts-11/"},"frontmatter":{"title":"fp-ts로 Typescript 함수형 프로그래밍 시작하기 11 (Reader)","category":"TypeScript","draft":false}},"next":{"fields":{"slug":"/TypeScript/2021-07-20-fp-ts-funtional-design-2/"},"frontmatter":{"title":"함수형 디자인: time combinators를 더 일반적으로 만드는 방법","category":"TypeScript","draft":false}}}},"staticQueryHashes":["3001444076","3128451518"]}