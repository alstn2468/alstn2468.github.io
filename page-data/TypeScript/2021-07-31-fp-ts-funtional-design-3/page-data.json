{"componentChunkName":"component---src-templates-blog-post-js","path":"/TypeScript/2021-07-31-fp-ts-funtional-design-3","result":{"data":{"site":{"siteMetadata":{"title":"Minsu's Dev Log","author":"Minsu Kim","siteUrl":"https://alstn2468.github.io","comment":{"disqusShortName":"","utterances":"alstn2468/alstn2468.github.io"},"sponsor":{"buyMeACoffeeId":"eMLdEwU"}}},"markdownRemark":{"id":"b53d5743-1893-5534-a812-3bdd943d41f6","excerpt":"본 포스트는 fp-ts 공식 문서의 Learning Resources에 있는 Functional design series에서 소개하는 문서들을 번역하며 학습한 문서입니다. 원본 문서는 링크에서 확인할 수 있으며 작성한 코드들은 여기에서 확인할 수 있습니다. 함수형 디자인: tagless final 지난 글에서 유사한 Unix 명령을 모방하는  combinator…","html":"<p>본 포스트는 fp-ts 공식 문서의 <a href=\"https://gcanti.github.io/fp-ts/learning-resources/\">Learning Resources</a>에 있는 Functional design series에서 소개하는 문서들을 번역하며 학습한 문서입니다. 원본 문서는 <a href=\"https://dev.to/gcanti/functional-design-tagless-final-332k\">링크</a>에서 확인할 수 있으며 작성한 코드들은 <a href=\"https://github.com/alstn2468/getting-started-fp-ts/tree/main/src/functional_design_series/3_tagless_final\">여기</a>에서 확인할 수 있습니다.</p>\n<h2 id=\"함수형-디자인-tagless-final\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%EB%94%94%EC%9E%90%EC%9D%B8-tagless-final\" aria-label=\"함수형 디자인 tagless final permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수형 디자인: tagless final</h2>\n<p><a href=\"https://alstn2468.github.io/TypeScript/2021-07-20-fp-ts-funtional-design-2/\">지난 글</a>에서 유사한 Unix 명령을 모방하는 <code class=\"language-text\">time</code> combinator를 작성했습니다. <code class=\"language-text\">IO&lt;A></code> 작업이 주어지면 계산된 값과 함께 실행 시간을 반환하는 작업 <code class=\"language-text\">IO&lt;[A, number]></code>를 파생할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">IO</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/IO'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> now <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Date'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Monad <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/IO'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">time</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>ma<span class=\"token operator\">:</span> <span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Monad<span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    Monad<span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span>ma<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Monad<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 여전히 문제가 있습니다. <code class=\"language-text\">time</code> combinator는 <code class=\"language-text\">IO</code>에서만 동작합니다.</p>\n<p><code class=\"language-text\">Task</code>에 대한 <code class=\"language-text\">time</code> combinator를 원하면 어떻게 할 수 있을까요? 아니면 <code class=\"language-text\">TaskEther</code>? 아니면 <code class=\"language-text\">ReaderTaskEither</code>라도?</p>\n<h2 id=\"조금-수정해보기\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EA%B8%88-%EC%88%98%EC%A0%95%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"조금 수정해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조금 수정해보기</h2>\n<p><code class=\"language-text\">io</code>의 이름을 <strong>M</strong>onad와 같은 <code class=\"language-text\">M</code>으로 바꾸겠습니다.</p>\n<blockquote>\n<p>원문에서는 <code class=\"language-text\">io</code>를 사용해서 내부 매서드들을 사용하고 있었지만, 현재 <code class=\"language-text\">fp-ts</code>의 버전에서는 <code class=\"language-text\">Monad</code>로 이미 변경되어 있습니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">IO</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/IO'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> now <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Date'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Monad <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/IO'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">time</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>ma<span class=\"token operator\">:</span> <span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Monad<span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    Monad<span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span>ma<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Monad<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">fp-ts/lib/IO</code>에서 내보낸 값 <code class=\"language-text\">Monad</code>에는 <code class=\"language-text\">IO</code>의 <code class=\"language-text\">Monad</code> 인스턴스가 포함됩니다.</p>\n<p><code class=\"language-text\">fp-ts</code>에서 타입 클래스는 <code class=\"language-text\">interfaces</code>로 인코딩되고 인스턴스는 타입 클래스에 의해 정의된 연산을 포함하는 정적 딕셔너리로 인코딩됩니다.</p>\n<p>따라서 <code class=\"language-text\">Monad</code> 인스턴스의 경우 <code class=\"language-text\">map</code>, <code class=\"language-text\">of</code>, <code class=\"language-text\">ap</code> 및 <code class=\"language-text\">chain</code>과 같은 작업이 필요합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// fp-ts/lib/IO.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Monad <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  map<span class=\"token operator\">:</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">of</span><span class=\"token operator\">:</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span>\n  ap<span class=\"token operator\">:</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span>\n  chain<span class=\"token operator\">:</span> <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>같은 스타일을 사용하여 <code class=\"language-text\">Task</code>에 대한 <code class=\"language-text\">time</code> combinator를 작성해 봅시다.</p>\n<h2 id=\"들어-올리기\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4-%EC%98%AC%EB%A6%AC%EA%B8%B0\" aria-label=\"들어 올리기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어 올리기</h2>\n<p>타입 검사기를 만족스럽게 만들기 위해 <code class=\"language-text\">IO&lt;number></code> 타입의 <code class=\"language-text\">now</code> 작업을 <code class=\"language-text\">Task</code> 모나드로 들어 올려야 합니다.</p>\n<p>다행히 <code class=\"language-text\">fp-ts</code>는 이를 위해 내장된 <code class=\"language-text\">fromIO</code> 함수를 제공합니다. <code class=\"language-text\">fromIO</code>는 모든 <code class=\"language-text\">A</code>에 대해 <code class=\"language-text\">IO&lt;A></code>를 <code class=\"language-text\">Task&lt;A></code>로 변환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> Task <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Task'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> task <span class=\"token keyword\">as</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">,</span> fromIO <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Task'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">D</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Date'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">time</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>ma<span class=\"token operator\">:</span> Task<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Task<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> now <span class=\"token operator\">=</span> <span class=\"token function\">fromIO</span><span class=\"token punctuation\">(</span><span class=\"token constant\">D</span><span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token constant\">M</span><span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span>ma<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">M</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드는 정상적으로 동작하지만, 너무 많은 중복이 있습니다.</p>\n<p>함수의 첫 번째 줄만 무시하면 두 개의 코드는 완전히 비슷합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">time</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>ma<span class=\"token operator\">:</span> <span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">,</span> start <span class=\"token operator\">=></span> <span class=\"token constant\">M</span><span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span>ma<span class=\"token punctuation\">,</span> a <span class=\"token operator\">=></span> <span class=\"token constant\">M</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">,</span> end <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">time</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>ma<span class=\"token operator\">:</span> Task<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Task<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">,</span> start <span class=\"token operator\">=></span> <span class=\"token constant\">M</span><span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span>ma<span class=\"token punctuation\">,</span> a <span class=\"token operator\">=></span> <span class=\"token constant\">M</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">,</span> end <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이것이 모나딕 인터페이스의 장점입니다. 거의 같은 코드로 동기 및 비동기 계산을 처리할 수 있습니다.</p>\n<h2 id=\"tagless-final\" style=\"position:relative;\"><a href=\"#tagless-final\" aria-label=\"tagless final permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tagless final</h2>\n<p>그래서 아이디어는 <code class=\"language-text\">time</code> combinator가 <code class=\"language-text\">now</code>를 들어 올릴 수 있는 모나드 <code class=\"language-text\">M</code>을 지원하는 것입니다.</p>\n<p>또는 더 일반적으로 모든 <code class=\"language-text\">A</code>에 대해 <code class=\"language-text\">IO&lt;A></code> 작업을 <code class=\"language-text\">M&lt;A></code> 작업으로 올릴 수 있는 모나드 <code class=\"language-text\">M</code>입니다.</p>\n<p>이러한 기능을 <code class=\"language-text\">MonadIO</code>라는 타입 클래스(즉, TypeScript의 <code class=\"language-text\">interface</code>)로 인코딩해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">IO</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/IO'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> Monad1 <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Monad'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> Kind<span class=\"token punctuation\">,</span> <span class=\"token constant\">URIS</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/HKT'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MonadIO<span class=\"token operator\">&lt;</span><span class=\"token constant\">M</span> <span class=\"token keyword\">extends</span> <span class=\"token constant\">URIS</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Monad1<span class=\"token operator\">&lt;</span><span class=\"token constant\">M</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> fromIO<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>fa<span class=\"token operator\">:</span> <span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Kind<span class=\"token operator\">&lt;</span><span class=\"token constant\">M</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Kind&lt;M, A></code> 타입은 <code class=\"language-text\">fp-ts</code>가 <code class=\"language-text\">* -> *</code> 타입의 일반 타입 생성자 <code class=\"language-text\">M&lt;A></code>를 인코딩하는 방법입니다.</p>\n<blockquote>\n<p>TypeScript는 기본적으로 상위 유형(HKT, Higher Kinded Types)을 지원하지 않습니다.</p>\n</blockquote>\n<p>추가로 첫 번째 매개변수로 전달된 <code class=\"language-text\">MonadIO</code> 인터페이스에 대해 <code class=\"language-text\">time</code> combinaotr를 다시 작성해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">time</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">M</span> <span class=\"token keyword\">extends</span> <span class=\"token constant\">URIS</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  <span class=\"token constant\">M</span><span class=\"token operator\">:</span> MonadIO<span class=\"token operator\">&lt;</span><span class=\"token constant\">M</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>ma<span class=\"token operator\">:</span> Kind<span class=\"token operator\">&lt;</span><span class=\"token constant\">M</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Kind<span class=\"token operator\">&lt;</span><span class=\"token constant\">M</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> now <span class=\"token operator\">=</span> <span class=\"token constant\">M</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromIO</span><span class=\"token punctuation\">(</span><span class=\"token constant\">D</span><span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 들어 올리기</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>ma<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token constant\">M</span><span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token constant\">M</span><span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span>ma<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">M</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>이러한 스타일의 프로그래밍을 “tagless final” 또는 “MTL 스타일”이라고 합니다.</p>\n</blockquote>\n<p>이제부터는 <code class=\"language-text\">MonadIO</code> 인스턴스를 허용하는 모든 모나드에서 <code class=\"language-text\">time</code>을 사용할 수 있습니다!</p>\n<h2 id=\"code-classlanguage-textmonadiocode-인스턴스-작성하기\" style=\"position:relative;\"><a href=\"#code-classlanguage-textmonadiocode-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"code classlanguage textmonadiocode 인스턴스 작성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">MonadIO</code> 인스턴스 작성하기</h2>\n<p><code class=\"language-text\">IO</code>에 대한 <code class=\"language-text\">MonadIO</code> 인스턴스를 작성하려면 <code class=\"language-text\">identity</code> 함수인 <code class=\"language-text\">fromIO</code> 연산으로 <code class=\"language-text\">Monad</code> 인스턴스를 확장해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">URI</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/IO'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Monad <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/IO'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> identity <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/function'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> monadIOIO<span class=\"token operator\">:</span> MonadIO<span class=\"token operator\">&lt;</span><span class=\"token constant\">URI</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>Monad<span class=\"token punctuation\">,</span>\n  fromIO<span class=\"token operator\">:</span> identity<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">Task</code>를 위한 <code class=\"language-text\">MonadIO</code> 인스턴스는 아래와 같이 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">URI</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Task'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Monad<span class=\"token punctuation\">,</span> fromIO <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Task'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> monadIOTask<span class=\"token operator\">:</span> MonadIO<span class=\"token operator\">&lt;</span><span class=\"token constant\">URI</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>Monad<span class=\"token punctuation\">,</span>\n  fromIO<span class=\"token operator\">:</span> fromIO<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 해당 <code class=\"language-text\">MonadIO</code> 인스턴스를 전달하여 구체적인 타입 생성자에 대한 <code class=\"language-text\">time</code>의 특별화된 버전을 얻을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// timeIO: &lt;A>(ma: IO&lt;A>) => IO&lt;[A, number]></span>\n<span class=\"token keyword\">const</span> timeIO <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span>monadIOIO<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// timeTask: &lt;A>(ma: Task&lt;A>) => Task&lt;[A, number]></span>\n<span class=\"token keyword\">const</span> timeTask <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span>monadIOTask<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 접근 방식은 큰 이점이 있습니다. tagless final을 기반으로 함수를 작성할 때 함수의 대상 모나드는 사용자가 나중에 변경할 수 있습니다.</p>","frontmatter":{"title":"함수형 디자인: tagless final","date":"July 31, 2021","thumbnail":null}}},"pageContext":{"slug":"/TypeScript/2021-07-31-fp-ts-funtional-design-3/","previous":{"fields":{"slug":"/TypeScript/2021-07-20-fp-ts-funtional-design-2/"},"frontmatter":{"title":"함수형 디자인: time combinators를 더 일반적으로 만드는 방법","category":"TypeScript","draft":false}},"next":{"fields":{"slug":"/TypeScript/2021-08-13-fp-ts-funtional-design-4/"},"frontmatter":{"title":"함수형 디자인: 똑똑한 생성자","category":"TypeScript","draft":false}}}},"staticQueryHashes":["3001444076","3128451518"]}