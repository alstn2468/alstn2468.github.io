{"componentChunkName":"component---src-templates-blog-post-js","path":"/TypeScript/2021-04-25-fp-ts-2","result":{"data":{"site":{"siteMetadata":{"title":"Minsu's Dev Log","author":"Minsu Kim","siteUrl":"https://alstn2468.github.io","comment":{"disqusShortName":"","utterances":"alstn2468/alstn2468.github.io"},"sponsor":{"buyMeACoffeeId":"eMLdEwU"}}},"markdownRemark":{"id":"c2c55f23-e19b-560b-ad17-2f8eb37e511a","excerpt":"본 포스트는 fp-ts 공식 문서의 Learning Resources에 있는 Getting Started에서 소개하는 문서들을 번역하며 학습한 문서입니다. 원본 문서는 링크에서 확인할 수 있으며 작성한 코드들은 여기에서 확인할 수 있습니다. fp-ts 시작하기 (Ord) Eq…","html":"<p>본 포스트는 fp-ts 공식 문서의 <a href=\"https://gcanti.github.io/fp-ts/learning-resources/\">Learning Resources</a>에 있는 Getting Started에서 소개하는 문서들을 번역하며 학습한 문서입니다. 원본 문서는 <a href=\"https://dev.to/gcanti/getting-started-with-fp-ts-ord-5f1e\">링크</a>에서 확인할 수 있으며 작성한 코드들은 <a href=\"https://github.com/alstn2468/getting-started-fp-ts/tree/main/src/getting_started_series/2_ord\">여기</a>에서 확인할 수 있습니다.</p>\n<h2 id=\"fp-ts-시작하기-ord\" style=\"position:relative;\"><a href=\"#fp-ts-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-ord\" aria-label=\"fp ts 시작하기 ord permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fp-ts 시작하기 (Ord)</h2>\n<p><a href=\"https://alstn2468.github.io/TypeScript/2021-04-24-fp-ts-1/\">Eq</a>에 대한 이전 블로그 게시물에서는 <strong>동등성</strong>에 대한 개념을 다루고 있었습니다. 이 블로그 게시물에서는 <strong>순서</strong>의 개념을 다루려고 합니다.</p>\n<p>전체 순서를 허용하는 타입을 포함하는 타입 클래스 <code class=\"language-text\">Ord</code>는 아래와 같은 방법으로 선언됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Eq <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Eq'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Ordering</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">0</span> <span class=\"token operator\">|</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Ord<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Eq<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> <span class=\"token function-variable function\">compare</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Ordering<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>두 개의 값 <code class=\"language-text\">x</code>, <code class=\"language-text\">y</code>는 아래와 같이 비교할 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">x &lt; y</code>이거나 <code class=\"language-text\">compare(x, y)</code>가 <code class=\"language-text\">-1</code>인 경우</li>\n<li><code class=\"language-text\">x</code>와 <code class=\"language-text\">y</code>가 같거나 <code class=\"language-text\">compare(x, y)</code>가 <code class=\"language-text\">0</code>인 경우</li>\n<li><code class=\"language-text\">x > y</code>이거나 <code class=\"language-text\">compare(x, y)</code>가 <code class=\"language-text\">1</code>인 경우</li>\n</ul>\n<p>결과적으로 <code class=\"language-text\">compare(x, y) &lt;= 0</code>인 경우에 <code class=\"language-text\">x &lt;= y</code>라고 말할 수 있습니다.</p>\n<p>아래 예시는 <code class=\"language-text\">number</code> 타입에 대한 <code class=\"language-text\">Ord</code> 인스턴스입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> ordNumber<span class=\"token operator\">:</span> Ord<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">equals</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">===</span> y<span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">compare</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> y <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> x <span class=\"token operator\">></span> y <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>인스턴스는 아래의 규칙을 만족합니다.</p>\n<ol>\n<li>반사성(<strong>Reflexivity</strong>): <code class=\"language-text\">A</code>의 모든 <code class=\"language-text\">x</code>에 대하여 <code class=\"language-text\">compare(x, x) === 0</code>을 만족한다.</li>\n<li>반대칭(<strong>Antisymmetry</strong>): <code class=\"language-text\">A</code>의 모든 <code class=\"language-text\">x</code>, <code class=\"language-text\">y</code>에 대하여 <code class=\"language-text\">compare(x, y) &lt;= 0</code>이고 <code class=\"language-text\">compare(y, x) &lt;= 0</code>이면 <code class=\"language-text\">x</code> 와 <code class=\"language-text\">y</code>는 같다.</li>\n<li>이동성(<strong>Transitivity</strong>): <code class=\"language-text\">A</code>의 모든 <code class=\"language-text\">x</code>, <code class=\"language-text\">y</code>, <code class=\"language-text\">z</code>에 대하여 <code class=\"language-text\">compare(x, y) &lt;= 0</code>이고 <code class=\"language-text\">compare(y, z) &lt;= 0</code>이면 <code class=\"language-text\">compare(x, z) &lt;= 0</code>을 만족한다.</li>\n</ol>\n<p>또한 <code class=\"language-text\">compare</code>은 <code class=\"language-text\">Eq</code>의 <code class=\"language-text\">equals</code>와 일치해야 합니다.</p>\n<p><code class=\"language-text\">A</code>의 모든 <code class=\"language-text\">x</code>, <code class=\"language-text\">y</code>에 대하여 <code class=\"language-text\">compare(x, y) === 0</code>일 경우 <code class=\"language-text\">equals(x, y) === true</code>의 경우만 만족합니다.</p>\n<blockquote>\n<p>참고: 규칙에 따르는 <code class=\"language-text\">equals</code>는 아래와 같이 <code class=\"language-text\">compare</code>에서 도출할 수 있습니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function-variable function\">equals</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>실제로 <code class=\"language-text\">fp-ts/lib/Ord</code> 모듈에는 간단히 비교 함수를 지정하여 <code class=\"language-text\">Ord</code> 인스턴스를 정의할 수 있는 편리한 <code class=\"language-text\">fromCompare</code> 헬퍼 함수가 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> Ord <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Ord'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> fromCompare <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Ord'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ordNumber<span class=\"token operator\">:</span> Ord<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">fromCompare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  x <span class=\"token operator\">&lt;</span> y <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> x <span class=\"token operator\">></span> y <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>프로그래머는 아래와 같은 방법으로 <code class=\"language-text\">min</code> 함수를 정의할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">min</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">O</span><span class=\"token operator\">:</span> Ord<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">A</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token constant\">O</span><span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> y <span class=\"token operator\">:</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>작성한 <code class=\"language-text\">min</code> 함수는 아래와 같이 테스트할 수 있습니다. <code class=\"language-text\">min</code> 함수는 <code class=\"language-text\">Ord</code> 인스턴스를 받아 <code class=\"language-text\">x</code>, <code class=\"language-text\">y</code>의 값을 <code class=\"language-text\">compare</code>로 함수로 비교해 <code class=\"language-text\">x</code>, <code class=\"language-text\">y</code> 중에서 작은 값을 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ord 인터페이스를 이용한 min 함수 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ordNumber를 이용한 min 함수 테스트 '</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ordNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>ordNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">toBe</code> 함수를 이용해 <code class=\"language-text\">min</code> 함수가 반환한 함수에 인자로 넣은 값 중에 작은 값이 정상적으로 반환되는지 확인할 수 있습니다.</p>\n<p><code class=\"language-text\">number</code> 타입에 관해 이야기 할 때에는 전체성(<strong>Totality</strong>)은 분명해 보일 수 있지만 (즉, <code class=\"language-text\">x &lt;= y</code> 또는 <code class=\"language-text\">y &lt;= x</code>) 항상 그런 것은 아닙니다. 더 복잡한 타입을 고려해 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">Ord&lt;User></code> 인터페이스를 어떻게 정의할 수 있나요?</p>\n<p>실제로는 상황에 따라 다르지만 가능한 선택으로는 <code class=\"language-text\">age</code> 속성으로 사용자를 정렬하는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> byAge<span class=\"token operator\">:</span> Ord<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">fromCompare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ordNumber<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">contramap</code> <a href=\"https://dev.to/gcanti/functional-design-combinators-14pn\">콤비네이터</a>를 사용하여 일부 자주 사용하는 구문을 피할 수 있습니다. <code class=\"language-text\">A</code>에 대한 <code class=\"language-text\">Ord</code> 인스턴스와 <code class=\"language-text\">B</code>에서 <code class=\"language-text\">A</code>로의 함수가 주어지면 <code class=\"language-text\">B</code>에 대한 <code class=\"language-text\">Ord</code>의 인스턴스를 파생시킬 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> contramap <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Ord'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> byAge<span class=\"token operator\">:</span> Ord<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">contramap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">:</span> User<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ordNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 <code class=\"language-text\">min</code>을 사용하여 두 <code class=\"language-text\">User</code> 중 더 어린 <code class=\"language-text\">User</code>를 선택할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> getYounger <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>byAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>작성한 <code class=\"language-text\">getYounger</code> 함수는 아래와 같이 테스트할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'byAge 함수와 min 함수를 사용하는 getYounger 함수 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getYounger 함수 테스트 '</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">getYounger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Guido'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">48</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Giulio'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">45</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Giulio'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">45</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">getYounger</code> 함수로 전달된 두 <code class=\"language-text\">User</code> 타입 객체 중 <code class=\"language-text\">age</code> 속성의 값이 작은 <code class=\"language-text\">User</code> 타입 객체가 정상적으로 반환되는지 확인할 수 있습니다.</p>\n<p>반대로 더 오래된 것을 선택하려면 어떻게 할 수 있을까요? 우리는 “순서를 뒤집거나” 기술적으로 말하면 <strong>이중</strong> 정렬을 받아야 합니다.</p>\n<p>다행히도 이런 상황을 위해 <code class=\"language-text\">fp-ts</code>가 제공하는 다른 콤비네이터가 있습니다.</p>\n<blockquote>\n<p>원문에서는 <code class=\"language-text\">getDualOrd</code>를 사용하라고 작성되어 있지만, 최신 버전의 fp-ts에서는 deprecated 되어 있으며 <a href=\"https://gcanti.github.io/fp-ts/modules/Ord.ts.html#reverse\"><code class=\"language-text\">reverse</code></a>를 사용하면 됩니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> Ord <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Ord'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> reverse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Ord'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> byAge <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./byAge'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> min <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./min'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">max</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">O</span><span class=\"token operator\">:</span> Ord<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">A</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">O</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> getOlder <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>byAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>작성한 <code class=\"language-text\">getOlder</code> 함수는 아래와 같이 테스트할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'byAge, min, reverse 함수를 사용하는 getOlder 함수 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getOlder 함수 테스트 '</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">getOlder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Guido'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">48</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Giulio'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">45</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Guido'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">48</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">getOlder</code> 함수로 전달된 두 <code class=\"language-text\">User</code> 타입 객체 중 <code class=\"language-text\">age</code> 속성의 값이 큰 <code class=\"language-text\">User</code> 타입 객체가 정상적으로 반환되는지 확인할 수 있습니다.</p>","frontmatter":{"title":"fp-ts로 Typescript 함수형 프로그래밍 시작하기 2 (Ord)","date":"April 25, 2021","thumbnail":null}}},"pageContext":{"slug":"/TypeScript/2021-04-25-fp-ts-2/","previous":{"fields":{"slug":"/TypeScript/2021-04-24-fp-ts-1/"},"frontmatter":{"title":"fp-ts로 Typescript 함수형 프로그래밍 시작하기 1 (Eq)","category":"TypeScript","draft":false}},"next":{"fields":{"slug":"/TypeScript/2021-04-25-fp-ts-3/"},"frontmatter":{"title":"fp-ts로 Typescript 함수형 프로그래밍 시작하기 3 (Semigroup)","category":"TypeScript","draft":false}}}},"staticQueryHashes":["3001444076","3128451518"]}