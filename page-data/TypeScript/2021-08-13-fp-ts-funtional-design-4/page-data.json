{"componentChunkName":"component---src-templates-blog-post-js","path":"/TypeScript/2021-08-13-fp-ts-funtional-design-4","result":{"data":{"site":{"siteMetadata":{"title":"Minsu's Dev Log","author":"Minsu Kim","siteUrl":"https://alstn2468.github.io","comment":{"disqusShortName":"","utterances":"alstn2468/alstn2468.github.io"},"sponsor":{"buyMeACoffeeId":"eMLdEwU"}}},"markdownRemark":{"id":"fe27cccb-a407-5352-b35a-0e55d5980a42","excerpt":"본 포스트는 fp-ts 공식 문서의 Learning Resources에 있는 Functional design series…","html":"<p>본 포스트는 fp-ts 공식 문서의 <a href=\"https://gcanti.github.io/fp-ts/learning-resources/\">Learning Resources</a>에 있는 Functional design series에서 소개하는 문서들을 번역하며 학습한 문서입니다. 원본 문서는 <a href=\"https://dev.to/gcanti/functional-design-how-to-make-the-time-combinator-more-general-3fge\">링크</a>에서 확인할 수 있으며 작성한 코드들은 <a href=\"https://github.com/alstn2468/getting-started-fp-ts/tree/main/src/functional_design_series/4_smart_constructors\">여기</a>에서 확인할 수 있습니다.</p>\n<h2 id=\"함수형-디자인-똑똑한-생성자\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%ED%98%95-%EB%94%94%EC%9E%90%EC%9D%B8-%EB%98%91%EB%98%91%ED%95%9C-%EC%83%9D%EC%84%B1%EC%9E%90\" aria-label=\"함수형 디자인 똑똑한 생성자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수형 디자인: 똑똑한 생성자</h2>\n<p>때로는 일반적인 타입 검사로 달성할 수 있는 것 이상으로 프로그램의 값에 대한 보장이 필요합니다. 이를 위해 똑똑한 생성자를 사용할 수 있습니다.</p>\n<h2 id=\"문제점\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제점</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">person</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Person <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> age <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 오류가 발생하지 않는다.</span></code></pre></div>\n<p>위와 같이 <code class=\"language-text\">string</code>과 <code class=\"language-text\">number</code>는 광범위한 유형입니다. 비어있지 않은 문자열을 어떻게 정의할 수 있을까요? 또는 양수, 정수, 양의 정수는 어떻게 정의할 수 있을까요?</p>\n<blockquote>\n<p>어떻게 더 일반적으로 <code class=\"language-text\">T</code> 타입을 구체적으로 어떻게 정의할 수 있을까요?</p>\n</blockquote>\n<h2 id=\"레시피\" style=\"position:relative;\"><a href=\"#%EB%A0%88%EC%8B%9C%ED%94%BC\" aria-label=\"레시피 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>레시피</h2>\n<ol>\n<li>구체적 정의를 나타내는 타입 <code class=\"language-text\">R</code> 정의</li>\n<li><code class=\"language-text\">R</code>에 대한 타입 생성자를 <strong>export 하지 마세요</strong>.</li>\n<li>아래 시그니처를 사용하는 함수(<strong>똑똑한 생성자</strong>)를 export 하세요.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function-variable function\">make</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Option<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"가능한-구현-branded-타입\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%8A%A5%ED%95%9C-%EA%B5%AC%ED%98%84-branded-%ED%83%80%EC%9E%85\" aria-label=\"가능한 구현 branded 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가능한 구현: branded 타입</h2>\n<p><strong>branded 타입</strong>은 <em>고유한</em> brand와 교차하는 타입 <code class=\"language-text\">T</code>입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">BrandT</span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token operator\">&amp;</span> Brand<span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 레시피에 따라 <code class=\"language-text\">NonEmptyString</code>을 구현해 보겠습니다.</p>\n<ol>\n<li>구체적 정의를 나타내는 <code class=\"language-text\">NonEmptyString</code> 유형을 정의합니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">NonEmptyStringBrand</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> NonEmptyString<span class=\"token operator\">:</span> unique <span class=\"token builtin\">symbol</span>\n  <span class=\"token comment\">// 전체 모듈/패키지에서 고유함을 보장한다.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">NonEmptyString</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">&amp;</span> NonEmptyStringBrand</code></pre></div>\n<ol start=\"2\">\n<li><code class=\"language-text\">NonEmptyString</code>에 대한 생성자를 export하지 마세요.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 이렇게 하지 마세요.</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">nonEmptyString</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> NonEmptyString <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"3\">\n<li>똑똑한 생성자인 <code class=\"language-text\">make: (s: string) => Option&lt;NonEmptyString></code>을 export 하세요.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> Option <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Option'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> none<span class=\"token punctuation\">,</span> some <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Option'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 사용자 지정 타입 가드로 구현된 런타임 검사</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">isNonEmptyString</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> s <span class=\"token keyword\">is</span> NonEmptyString <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">makeNonEmptyString</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Option<span class=\"token operator\">&lt;</span>NonEmptyString<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">isNonEmptyString</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">some</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> none<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">age</code> 필드에 대해 동일한 작업을 진행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IntBrand</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> Int<span class=\"token operator\">:</span> unique <span class=\"token builtin\">symbol</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">&amp;</span> IntBrand\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isInt</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> n <span class=\"token keyword\">is</span> Int <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Number<span class=\"token punctuation\">.</span><span class=\"token function\">isInteger</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> n <span class=\"token operator\">>=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">makeInt</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Option<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">isInt</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">some</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> none\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>작성한 <code class=\"language-text\">makeInt</code>와 <code class=\"language-text\">makeNonEmptyString</code>는 아래와 같이 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> NonEmptyString<span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">person</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> NonEmptyString<span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Person <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> age <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 정적 타입 오류</span>\n\n<span class=\"token keyword\">const</span> goodName <span class=\"token operator\">=</span> <span class=\"token function\">makeNonEmptyString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Giulio'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> badName <span class=\"token operator\">=</span> <span class=\"token function\">makeNonEmptyString</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> goodAge <span class=\"token operator\">=</span> <span class=\"token function\">makeInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> badAge <span class=\"token operator\">=</span> <span class=\"token function\">makeInt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Monad <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Option'</span><span class=\"token punctuation\">;</span>\n\nMonad<span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span>goodName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Monad<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>goodAge<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// some({ \"name\": \"Giulio\", \"age\": 45 })</span>\n\nMonad<span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span>badName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Monad<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>goodAge<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// none</span>\n\nMonad<span class=\"token punctuation\">.</span><span class=\"token function\">chain</span><span class=\"token punctuation\">(</span>goodName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Monad<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>badAge<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// none</span></code></pre></div>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>이런 방법은 런타임 검사의 부담을 호출자에게 주는 것처럼 보입니다.\n그것은 공평하지만, 호출자는 차례로 이 부담을 호출자에게 넘길 수 있으며, 어쨌든 입력 유효성 검사를 수행해야 하는 시스템 경계에 도달할 때까지 이런 식으로 계속됩니다.</p>\n<p>시스템 경계에서 런타임 유효성 검사를 쉽게 수행하고 branded 타입을 지원하는 라이브러리는 <a href=\"https://github.com/gcanti/io-ts\">io-ts</a>가 있습니다.</p>","frontmatter":{"title":"함수형 디자인: 똑똑한 생성자","date":"August 13, 2021","thumbnail":null}}},"pageContext":{"slug":"/TypeScript/2021-08-13-fp-ts-funtional-design-4/","previous":{"fields":{"slug":"/TypeScript/2021-07-31-fp-ts-funtional-design-3/"},"frontmatter":{"title":"함수형 디자인: tagless final","category":"TypeScript","draft":false}},"next":{"fields":{"slug":"/TypeScript/2021-12-05-fp-ts-funtional-design-5/"},"frontmatter":{"title":"함수형 디자인: Typescript에서의 TDD (declare의 남용)","category":"TypeScript","draft":false}}}},"staticQueryHashes":["3001444076","3128451518"]}