{"componentChunkName":"component---src-templates-blog-post-js","path":"/TypeScript/2021-07-05-fp-ts-11","result":{"data":{"site":{"siteMetadata":{"title":"Minsu's Dev Log","author":"Minsu Kim","siteUrl":"https://alstn2468.github.io","comment":{"disqusShortName":"","utterances":"alstn2468/alstn2468.github.io"},"sponsor":{"buyMeACoffeeId":"eMLdEwU"}}},"markdownRemark":{"id":"2ef2aa07-b908-5cd6-95af-cb225f025aa6","excerpt":"본 포스트는 fp-ts 공식 문서의 Learning Resources에 있는 Getting Started에서 소개하는 문서들을 번역하며 학습한 문서입니다. 원본 문서는 링크에서 확인할 수 있으며 작성한 코드들은 여기에서 확인할 수 있습니다. fp-ts 시작하기 (Reader…","html":"<p>본 포스트는 fp-ts 공식 문서의 <a href=\"https://gcanti.github.io/fp-ts/learning-resources/\">Learning Resources</a>에 있는 Getting Started에서 소개하는 문서들을 번역하며 학습한 문서입니다. 원본 문서는 <a href=\"https://dev.to/gcanti/getting-started-with-fp-ts-reader-1ie5\">링크</a>에서 확인할 수 있으며 작성한 코드들은 <a href=\"https://github.com/alstn2468/getting-started-fp-ts/tree/main/src/getting_started_series/11_reader\">여기</a>에서 확인할 수 있습니다.</p>\n<h2 id=\"fp-ts-시작하기-reader\" style=\"position:relative;\"><a href=\"#fp-ts-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-reader\" aria-label=\"fp ts 시작하기 reader permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fp-ts 시작하기 (Reader)</h2>\n<p><code class=\"language-text\">Reader</code> 모나드의 목적은 필요한 곳에서 인자를 얻기 위해 여러 함수를 통해 인자가 전달되는 것을 피하는 것입니다.</p>\n<p>여기에 제시된 아이디어 중 하나는 <strong>의존성 주입</strong>을 위해 <code class=\"language-text\">Reader</code> 모나드를 사용하는 것입니다.</p>\n<p>가장 먼저 알아야 할 것은 <code class=\"language-text\">Reader&lt;R, A></code> 타입이 함수 <code class=\"language-text\">(r : R) => A</code>를 나타낸다는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Reader<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span>r<span class=\"token operator\">:</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">A</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 <code class=\"language-text\">R</code>은 계산에 필요한 “환경”을 나타내며(여기에서 “읽을” 수 있음), <code class=\"language-text\">A</code>는 계산의 결과입니다.</p>\n<h2 id=\"예시\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h2>\n<p>아래와 같은 코드가 있다고 가정해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">?</span> <span class=\"token string\">'true'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'false'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> g <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> h <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=></span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'true'</span></code></pre></div>\n<p>만약 <code class=\"language-text\">f</code> 함수에 국제화가 필요하다면 우리는 다른 매개 변수를 추가할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Dependencies</span> <span class=\"token punctuation\">{</span>\n  i18n<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token boolean\">true</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n    <span class=\"token boolean\">false</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">,</span> deps<span class=\"token operator\">:</span> Dependencies<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=></span>\n  <span class=\"token punctuation\">(</span>b <span class=\"token operator\">?</span> deps<span class=\"token punctuation\">.</span>i18n<span class=\"token punctuation\">.</span><span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> deps<span class=\"token punctuation\">.</span>i18n<span class=\"token punctuation\">.</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>하지만 <code class=\"language-text\">g</code> 함수는 더 이상 컴파일되지 않는다는 문제가 발생했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> g <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// error: An argument for 'deps' was not provided</span></code></pre></div>\n<p>우리는 <code class=\"language-text\">g</code> 함수에도 매개변수를 추가해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> g <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> deps<span class=\"token operator\">:</span> Dependencies<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ok</span></code></pre></div>\n<p>아직 끝나지 않았습니다. 이제는 <code class=\"language-text\">h</code> 함수가 컴파일되지 않습니다. 우리는 <code class=\"language-text\">h</code> 함수에도 매개변수를 추가해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> h <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> deps<span class=\"token operator\">:</span> Dependencies<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">)</span></code></pre></div>\n<p>마침내 우리는 <code class=\"language-text\">Dependencies</code> 인터페이스의 실제 인스턴스를 제공해 <code class=\"language-text\">h</code> 함수를 실행할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> instance<span class=\"token operator\">:</span> Dependencies <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  i18n<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token boolean\">true</span><span class=\"token operator\">:</span> <span class=\"token string\">'vero'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">false</span><span class=\"token operator\">:</span> <span class=\"token string\">'falso'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'vero'</span></code></pre></div>\n<p>예시에서 볼 수 있듯이 <code class=\"language-text\">h</code>와 <code class=\"language-text\">g</code> 함수는 <code class=\"language-text\">f</code> 함수의 의존성을 사용하지 않아도 의존성에 대한 지식이 있어야 합니다.</p>\n<p>이 부분을 개선 할 수 있을까요? 네 가능합니다. <code class=\"language-text\">Dependencies</code>를 매개변수 목록에서 반환 타입으로 이동할 수 있습니다.</p>\n<h2 id=\"code-classlanguage-textreadercode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textreadercode\" aria-label=\"code classlanguage textreadercode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">Reader</code></h2>\n<p>우선 <code class=\"language-text\">deps</code> 매개 변수는 그대로 두고 함수를 다시 작성하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>deps<span class=\"token operator\">:</span> Dependencies<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> deps <span class=\"token operator\">=></span>\n  <span class=\"token punctuation\">(</span>b <span class=\"token operator\">?</span> deps<span class=\"token punctuation\">.</span>i18n<span class=\"token punctuation\">.</span><span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> deps<span class=\"token punctuation\">.</span>i18n<span class=\"token punctuation\">.</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> g <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>deps<span class=\"token operator\">:</span> Dependencies<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> h <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>deps<span class=\"token operator\">:</span> Dependencies<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>참고: <code class=\"language-text\">(deps: Dependencies) => string</code>는 <code class=\"language-text\">Reader&lt;Dependencies, string></code>일 뿐입니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Reader<span class=\"token operator\">&lt;</span>Dependencies<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>deps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  b <span class=\"token operator\">?</span> deps<span class=\"token punctuation\">.</span>i18n<span class=\"token punctuation\">.</span><span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> deps<span class=\"token punctuation\">.</span>i18n<span class=\"token punctuation\">.</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> g <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Reader<span class=\"token operator\">&lt;</span>Dependencies<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> h <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Reader<span class=\"token operator\">&lt;</span>Dependencies<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'vero'</span></code></pre></div>\n<h2 id=\"code-classlanguage-textaskcode\" style=\"position:relative;\"><a href=\"#code-classlanguage-textaskcode\" aria-label=\"code classlanguage textaskcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">ask</code></h2>\n<p><code class=\"language-text\">g</code> 함수에 하한 (예시에서는 <code class=\"language-text\">2</code>)도 주입하려면 어떻게 할 수 있을까요? 먼저 <code class=\"language-text\">Dependencies</code>에 새 필드를 추가하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Dependencies</span> <span class=\"token punctuation\">{</span>\n  i18n<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token boolean\">true</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token boolean\">false</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  lowerBound<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> instance<span class=\"token operator\">:</span> Dependencies <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  i18n<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token boolean\">true</span><span class=\"token operator\">:</span> <span class=\"token string\">'vero'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token boolean\">false</span><span class=\"token operator\">:</span> <span class=\"token string\">'falso'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  lowerBound<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 우리는 <code class=\"language-text\">ask</code>를 사용하여 환경에서 <code class=\"language-text\">lowerBound</code>를 읽을 수 있습니다.</p>\n<blockquote>\n<p>원문에서는 <code class=\"language-text\">pipeable/pipe</code>를 사용하라고 작성되어 있지만, 최신 버전의 fp-ts에서는 deprecated 되어 있으며 <a href=\"https://gcanti.github.io/fp-ts/modules/function.ts.html#pipe\"><code class=\"language-text\">function/pipe</code></a>를 사용하면 됩니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> Reader <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Reader'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> pipe <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/function'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ask<span class=\"token punctuation\">,</span> chain <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Reader'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> g <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Reader<span class=\"token operator\">&lt;</span>Dependencies2<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n    <span class=\"token generic-function\"><span class=\"token function\">ask</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Dependencies2<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">chain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>deps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> deps<span class=\"token punctuation\">.</span>lowerBound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'vero'</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>instance<span class=\"token punctuation\">,</span> lowerBound<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'falso'</span></code></pre></div>\n<p>추신: <code class=\"language-text\">Reader</code>의 <code class=\"language-text\">map</code>은 일반적인 함수 조합 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> flow<span class=\"token punctuation\">,</span> pipe <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/function'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> map <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Reader'</span>\n\n<span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span>length\n<span class=\"token keyword\">const</span> double <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">const</span> gt2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">></span> <span class=\"token number\">2</span>\n\n<span class=\"token keyword\">const</span> compositionWithFlow <span class=\"token operator\">=</span> <span class=\"token function\">flow</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">,</span> double<span class=\"token punctuation\">,</span> gt2<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 아래와 같다.</span>\n<span class=\"token keyword\">const</span> compositionWithPipe <span class=\"token operator\">=</span> <span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">,</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>double<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>gt2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"fp-ts로 Typescript 함수형 프로그래밍 시작하기 11 (Reader)","date":"July 05, 2021","thumbnail":null}}},"pageContext":{"slug":"/TypeScript/2021-07-05-fp-ts-11/","previous":{"fields":{"slug":"/TypeScript/2021-06-20-fp-ts-10/"},"frontmatter":{"title":"fp-ts로 Typescript 함수형 프로그래밍 시작하기 10 (IO)","category":"TypeScript","draft":false}},"next":{"fields":{"slug":"/TypeScript/2021-07-12-fp-ts-funtional-design-1/"},"frontmatter":{"title":"함수형 디자인: combinators","category":"TypeScript","draft":false}}}},"staticQueryHashes":["3001444076","3128451518"]}