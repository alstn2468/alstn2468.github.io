{"componentChunkName":"component---src-templates-blog-post-js","path":"/TypeScript/2021-05-30-fp-ts-7","result":{"data":{"site":{"siteMetadata":{"title":"Minsu's Dev Log","author":"Minsu Kim","siteUrl":"https://alstn2468.github.io","comment":{"disqusShortName":"","utterances":"alstn2468/alstn2468.github.io"},"sponsor":{"buyMeACoffeeId":"eMLdEwU"}}},"markdownRemark":{"id":"03b9f340-6ea1-503b-a6dd-6eda290af2a6","excerpt":"본 포스트는 fp-ts 공식 문서의 Learning Resources에 있는 Getting Started에서 소개하는 문서들을 번역하며 학습한 문서입니다. 원본 문서는 링크에서 확인할 수 있으며 작성한 코드들은 여기에서 확인할 수 있습니다. fp-ts 시작하기 (Applicative) 지난 포스트에서 우리는 가 Functor 인스턴스를 허용하는 경우 를  함수로 와 같이 들어 올림으로써 순수한 프로그램 로 이펙트 있는 프로그램 를 조합할 수 있음을 보았습니다. 프로그램 f 프로그램 g…","html":"<p>본 포스트는 fp-ts 공식 문서의 <a href=\"https://gcanti.github.io/fp-ts/learning-resources/\">Learning Resources</a>에 있는 Getting Started에서 소개하는 문서들을 번역하며 학습한 문서입니다. 원본 문서는 <a href=\"https://dev.to/gcanti/getting-started-with-fp-ts-applicative-1kb3\">링크</a>에서 확인할 수 있으며 작성한 코드들은 <a href=\"https://github.com/alstn2468/getting-started-fp-ts/tree/main/src/getting_started_series/7_applicative\">여기</a>에서 확인할 수 있습니다.</p>\n<h2 id=\"fp-ts-시작하기-applicative\" style=\"position:relative;\"><a href=\"#fp-ts-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-applicative\" aria-label=\"fp ts 시작하기 applicative permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fp-ts 시작하기 (Applicative)</h2>\n<p><a href=\"https://alstn2468.github.io/TypeScript/2021-05-01-fp-ts-5/\">지난 포스트</a>에서 우리는 <code class=\"language-text\">F</code>가 Functor 인스턴스를 허용하는 경우 <code class=\"language-text\">g</code>를 <code class=\"language-text\">lift(g)</code> 함수로 <code class=\"language-text\">lift(g): (fb: F&lt;B>) => F&lt;C></code>와 같이 들어 올림으로써 순수한 프로그램 <code class=\"language-text\">g: (b: B) => C</code>로 이펙트 있는 프로그램 <code class=\"language-text\">f: (a: A) => F&lt;B></code>를 조합할 수 있음을 보았습니다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">프로그램 f</th>\n<th align=\"center\">프로그램 g</th>\n<th align=\"center\">조합</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">순수한</td>\n<td align=\"center\">순수한</td>\n<td align=\"center\"><code class=\"language-text\">g ∘ f</code></td>\n</tr>\n<tr>\n<td align=\"center\">이펙트 있는</td>\n<td align=\"center\">순수한 (단항)</td>\n<td align=\"center\"><code class=\"language-text\">lift(g) ∘ f</code></td>\n</tr>\n</tbody>\n</table>\n<p>그러나 <code class=\"language-text\">g</code>는 단항이어야 합니다. 즉, 하나의 인자만 입력으로 받아야 합니다. <code class=\"language-text\">g</code>가 두 개의 인자를 받아야 한다면 어떻게 하면 될까요? 그래도 Functor 인스턴스만 사용해서 <code class=\"language-text\">g</code>를 들어 올릴 수 있을까요?</p>\n<h2 id=\"커링\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EB%A7%81\" aria-label=\"커링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커링</h2>\n<p>우선 우리는 두 개의 인자를 받아들이고 타입 <code class=\"language-text\">B</code>와 <code class=\"language-text\">C</code>(튜플을 사용할 수 있다.)를 받아들이고 <code class=\"language-text\">D</code> 타입 값을 반환하는 함수를 모델링해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function-variable function\">g</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">D</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>우리는 <strong>커링</strong>이라는 기술을 사용하여 <code class=\"language-text\">g</code>를 다시 작성할 수 있습니다.</p>\n<blockquote>\n<p>커링은 여러 인자를 사용하는 함수의 평가를 <strong>각각 단일 인자</strong>가 있는 일련의 함수를 평가하는 것으로 변환하는 기술입니다. 예를 들어, 두 개의 인수 (<code class=\"language-text\">B</code>에서 하나, <code class=\"language-text\">C</code>에서 하나)를 받고 커링을 통해 <code class=\"language-text\">D</code>에서 출력을 생성하는 함수는 <code class=\"language-text\">C</code>에서 단일 인자를 가져와 <code class=\"language-text\">B</code>에서 <code class=\"language-text\">C</code>로 출력 함수를 생성하는 함수로 변환됩니다.</p>\n</blockquote>\n<p><code class=\"language-text\">g</code>를 아래와 같이 다시 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function-variable function\">g</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">:</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>c<span class=\"token operator\">:</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">D</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>우리가 원하는 것은 들어 올리는 작업입니다. 이전 <code class=\"language-text\">lift</code>와 구별하기 위해 <code class=\"language-text\">liftA2</code>라고 부르며 아래 시그니처를 갖는 함수를 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">liftA2</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>fb<span class=\"token operator\">:</span> <span class=\"token constant\">F</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>fc<span class=\"token operator\">:</span> <span class=\"token constant\">F</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">C</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">F</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token operator\">></span></code></pre></div>\n<p><code class=\"language-text\">g</code>는 이제 단항이므로 Functor 인스턴스와 이전의 <code class=\"language-text\">lift</code>를 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">lift</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>fb<span class=\"token operator\">:</span> <span class=\"token constant\">F</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">F</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">:</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">D</span><span class=\"token operator\">></span></code></pre></div>\n<p>하지만 이제 막혔습니다. <code class=\"language-text\">F&lt;(c: C) => D></code> 값을 함수 <code class=\"language-text\">(fc: F&lt;C>) => F&lt;D></code>로 <strong>풀 수 있는</strong> Functor 인스턴스에 대한 정상적인 기능이 없습니다.</p>\n<h2 id=\"apply\" style=\"position:relative;\"><a href=\"#apply\" aria-label=\"apply permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apply</h2>\n<p>따라서 이런 푸는 작업을 갖는 <code class=\"language-text\">ap</code>라 불리는 새로운 추상화 <code class=\"language-text\">Apply</code>를 소개하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Apply<span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Functor<span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  ap<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">C</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>fcd<span class=\"token operator\">:</span> <span class=\"token constant\">HKT</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>c<span class=\"token operator\">:</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">D</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> fc<span class=\"token operator\">:</span> <span class=\"token constant\">HKT</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">HKT</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">ap</code> 함수는 기본적으로 인자를 재배열하여 묶인 것을 풉니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">unpack<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">C</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>fcd<span class=\"token operator\">:</span> <span class=\"token constant\">HKT</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>c<span class=\"token operator\">:</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">D</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fc<span class=\"token operator\">:</span> <span class=\"token constant\">HKT</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">HKT</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\nap<span class=\"token operator\">:</span>     <span class=\"token operator\">&lt;</span><span class=\"token constant\">C</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>fcd<span class=\"token operator\">:</span> <span class=\"token constant\">HKT</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>c<span class=\"token operator\">:</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">D</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> fc<span class=\"token operator\">:</span> <span class=\"token constant\">HKT</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">HKT</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token operator\">></span></code></pre></div>\n<p>따라서 <code class=\"language-text\">ap</code>는 <code class=\"language-text\">unpack</code>에서 파생될 수 있으며 반대의 경우도 마찬가지로 가능합니다.</p>\n<blockquote>\n<p>참고: <code class=\"language-text\">HKT</code> 타입은 제네릭 타입 생성자를 나타내는 fp-ts의 방식입니다. (<a href=\"https://www.cl.cam.ac.uk/~jdy22/papers/lightweight-higher-kinded-polymorphism.pdf\">Lightweight 고급 다형성</a> 논문에서 제안된 기술), <code class=\"language-text\">HKT&lt;F, X></code>를 보면 타입 <code class=\"language-text\">X</code>에 적용된 타입 생성자 <code class=\"language-text\">F</code>를 생각할 수 있습니다. (예: F<X>)</p>\n</blockquote>\n<h2 id=\"applicative\" style=\"position:relative;\"><a href=\"#applicative\" aria-label=\"applicative permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Applicative</h2>\n<p>또한 타입 <code class=\"language-text\">A</code>의 값을 타입 <code class=\"language-text\">F&lt;A></code>의 값으로 들어 올릴 수 있는 기능이 있으면 편리합니다. 이렇게 하면 <code class=\"language-text\">F&lt;B></code>와 <code class=\"language-text\">F&lt;C></code> 타입의 인자를 제공하거나 <code class=\"language-text\">B</code>와 <code class=\"language-text\">C</code> 타입의 값을 들어 올림으로써 <code class=\"language-text\">liftA2(g)</code> 함수를 호출 할 수 있습니다.</p>\n<p>이제 <code class=\"language-text\">Apply</code>를 기반으로 구현되고 이러한 기능(<code class=\"language-text\">of</code>라고 불리는)을 갖는 <code class=\"language-text\">Applicative</code> 추상화를 소개하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Applicative<span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Apply<span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">of</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">HKT</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>몇 가지 일반적인 데이터 타입에 대한 <code class=\"language-text\">Applicative</code> 인스턴스를 살펴보겠습니다.</p>\n<h3 id=\"예시-code-classlanguage-textf--arraycode\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-code-classlanguage-textf--arraycode\" aria-label=\"예시 code classlanguage textf  arraycode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 (<code class=\"language-text\">F = Array</code>)</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> flatten <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Array'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> applicativeArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  map<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>fa<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">f</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">B</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> fa<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">of</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  ap<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>fab<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">B</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> fa<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span>\n    <span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span>fab<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">=></span> fa<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"예시-code-classlanguage-textf--optioncode\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-code-classlanguage-textf--optioncode\" aria-label=\"예시 code classlanguage textf  optioncode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 (<code class=\"language-text\">F = Option</code>)</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Option<span class=\"token punctuation\">,</span> some<span class=\"token punctuation\">,</span> none<span class=\"token punctuation\">,</span> isNone <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Option'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> applicativeOption <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  map<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>fa<span class=\"token operator\">:</span> Option<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">f</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">B</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Option<span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span>\n    <span class=\"token function\">isNone</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> none <span class=\"token operator\">:</span> <span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">of</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Option<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token function\">some</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  ap<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>fab<span class=\"token operator\">:</span> Option<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">B</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> fa<span class=\"token operator\">:</span> Option<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Option<span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span>\n    <span class=\"token function\">isNone</span><span class=\"token punctuation\">(</span>fab<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> none <span class=\"token operator\">:</span> applicativeOption<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">,</span> fab<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"예시-code-classlanguage-textf--taskcode\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-code-classlanguage-textf--taskcode\" aria-label=\"예시 code classlanguage textf  taskcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 (<code class=\"language-text\">F = Task</code>)</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Task <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Task'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> applicativeTask <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  map<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>fa<span class=\"token operator\">:</span> Task<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">f</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">B</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Task<span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">of</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Task<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  ap<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>fab<span class=\"token operator\">:</span> Task<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">B</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> fa<span class=\"token operator\">:</span> Task<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Task<span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">fab</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">fa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"들어-올리기\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4-%EC%98%AC%EB%A6%AC%EA%B8%B0\" aria-label=\"들어 올리기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어 올리기</h2>\n<p>그렇다면 <code class=\"language-text\">F</code>를 위한 <code class=\"language-text\">Apply</code> 인스턴스가 주어지면 이제 <code class=\"language-text\">liftA2</code>를 작성할 수 있을까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">HKT</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/HKT'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Apply <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Apply'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Curried2<span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">:</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>c<span class=\"token operator\">:</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">D</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">liftA2</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  <span class=\"token constant\">F</span><span class=\"token operator\">:</span> Apply<span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  g<span class=\"token operator\">:</span> Curried2<span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Curried2<span class=\"token operator\">&lt;</span><span class=\"token constant\">HKT</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token constant\">HKT</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token constant\">HKT</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> g <span class=\"token operator\">=></span> fb <span class=\"token operator\">=></span> fc <span class=\"token operator\">=></span> <span class=\"token constant\">F</span><span class=\"token punctuation\">.</span><span class=\"token function\">ap</span><span class=\"token punctuation\">(</span><span class=\"token constant\">F</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>fb<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>좋습니다! 그러나 <strong>세 개</strong>의 인자가 있는 함수는 어떨까요? <em>또 다른 추상화</em>가 필요할까요?</p>\n<p>좋은 소식은 대답이 “아니요”라는 것입니다. <code class=\"language-text\">Apply</code>로 충분합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Curried3<span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">E</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">:</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>c<span class=\"token operator\">:</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">:</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">E</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">liftA3</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  <span class=\"token constant\">F</span><span class=\"token operator\">:</span> Apply<span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">E</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  g<span class=\"token operator\">:</span> Curried3<span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">E</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Curried3<span class=\"token operator\">&lt;</span><span class=\"token constant\">HKT</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token constant\">HKT</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">C</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token constant\">HKT</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">D</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token constant\">HKT</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">E</span><span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> g <span class=\"token operator\">=></span> fb <span class=\"token operator\">=></span> fc <span class=\"token operator\">=></span> fd <span class=\"token operator\">=></span> <span class=\"token constant\">F</span><span class=\"token punctuation\">.</span><span class=\"token function\">ap</span><span class=\"token punctuation\">(</span><span class=\"token constant\">F</span><span class=\"token punctuation\">.</span><span class=\"token function\">ap</span><span class=\"token punctuation\">(</span><span class=\"token constant\">F</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>fb<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>실제로 <code class=\"language-text\">Apply</code> 인스턴스가 주어지면 <strong>각각의</strong> <code class=\"language-text\">n</code>에 대해 <code class=\"language-text\">liftAn</code> 함수를 작성할 수 있습니다.</p>\n<blockquote>\n<p>참고: <code class=\"language-text\">liftA1</code>은 그냥 <code class=\"language-text\">Functor</code>의 기능인 <code class=\"language-text\">lift</code>입니다.</p>\n</blockquote>\n<p>이제 “조합표”를 업데이트 할 수 있습니다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">프로그램 f</th>\n<th align=\"center\">프로그램 g</th>\n<th align=\"center\">조합</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">순수한</td>\n<td align=\"center\">순수한</td>\n<td align=\"center\"><code class=\"language-text\">g ∘ f</code></td>\n</tr>\n<tr>\n<td align=\"center\">이펙트 있는</td>\n<td align=\"center\">순수한, <code class=\"language-text\">n</code>항</td>\n<td align=\"center\"><code class=\"language-text\">liftAn(g) ∘ f</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"일반적인-문제가-해결되었나요\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-%EB%AC%B8%EC%A0%9C%EA%B0%80-%ED%95%B4%EA%B2%B0%EB%90%98%EC%97%88%EB%82%98%EC%9A%94\" aria-label=\"일반적인 문제가 해결되었나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일반적인 문제가 해결되었나요?</h2>\n<p>아직 해결되지 않은 중요한 경우가 있습니다. 두 프로그램이 모두 이펙트가 있다면 어떨까요?</p>\n<p>다시 한번 더 필요한 것이 있습니다. 다음 포스트에서는 함수형 프로그래밍의 가장 중요한 추상화 중 하나인 <strong>모나드</strong>에 관해 이야기하겠습니다.</p>\n<blockquote>\n<p>요약 : 함수형 프로그래밍은 조합에 관한 것입니다.</p>\n</blockquote>","frontmatter":{"title":"fp-ts로 Typescript 함수형 프로그래밍 시작하기 7 (Applicative)","date":"May 30, 2021","thumbnail":null}}},"pageContext":{"slug":"/TypeScript/2021-05-30-fp-ts-7/","previous":{"fields":{"slug":"/TypeScript/2021-05-02-fp-ts-6/"},"frontmatter":{"title":"fp-ts로 Typescript 함수형 프로그래밍 시작하기 6 (Functor)","category":"TypeScript","draft":false}},"next":{"fields":{"slug":"/TypeScript/2021-06-05-fp-ts-8/"},"frontmatter":{"title":"fp-ts로 Typescript 함수형 프로그래밍 시작하기 8 (Monad)","category":"TypeScript","draft":false}}}},"staticQueryHashes":["3001444076","3128451518"]}