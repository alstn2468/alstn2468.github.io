{"componentChunkName":"component---src-templates-blog-post-js","path":"/TypeScript/2021-04-24-fp-ts-1","result":{"data":{"site":{"siteMetadata":{"title":"Minsu's Dev Log","author":"Minsu Kim","siteUrl":"https://alstn2468.github.io","comment":{"disqusShortName":"","utterances":"alstn2468/alstn2468.github.io"},"sponsor":{"buyMeACoffeeId":"eMLdEwU"}}},"markdownRemark":{"id":"ebd5ca87-c55f-549e-b094-77b8b368adf1","excerpt":"본 포스트는 fp-ts 공식 문서의 Learning Resources에 있는 Getting Started에서 소개하는 문서들을 번역하며 학습한 문서입니다. 원본 문서는 링크에서 확인할 수 있으며 작성한 코드들은 여기에서 확인할 수 있습니다. fp-ts 시작하기 (Eq) 이 블로그 시리즈에서는 종종 “타입 클래스”와 “인스턴스”에 대해 이야기할 것입니다. 그것들이 무엇이고 에서 어떻게 인코딩되는지 살펴보겠습니다. 위키피디아의 “type class…","html":"<p>본 포스트는 fp-ts 공식 문서의 <a href=\"https://gcanti.github.io/fp-ts/learning-resources/\">Learning Resources</a>에 있는 Getting Started에서 소개하는 문서들을 번역하며 학습한 문서입니다. 원본 문서는 <a href=\"https://dev.to/gcanti/getting-started-with-fp-ts-setoid-39f3\">링크</a>에서 확인할 수 있으며 작성한 코드들은 <a href=\"https://github.com/alstn2468/getting-started-fp-ts/tree/main/src/getting_started_series/1_eq\">여기</a>에서 확인할 수 있습니다.</p>\n<h2 id=\"fp-ts-시작하기-eq\" style=\"position:relative;\"><a href=\"#fp-ts-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-eq\" aria-label=\"fp ts 시작하기 eq permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fp-ts 시작하기 (Eq)</h2>\n<p>이 블로그 시리즈에서는 종종 “타입 클래스”와 “인스턴스”에 대해 이야기할 것입니다. 그것들이 무엇이고 <code class=\"language-text\">fp-ts</code>에서 어떻게 인코딩되는지 살펴보겠습니다.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Type_class\">위키피디아의 “type class”</a></p>\n<blockquote>\n<p>프로그래머는 클래스에 속하는 모든 유형에 대해 존재해야 하는 해당 타입과 함께 함수 또는 상수 이름 집합을 지정하여 <strong>타입 클래스</strong>를 정의합니다.</p>\n</blockquote>\n<p><code class=\"language-text\">fp-ts</code>에서 타입 클래스는 TypeScript의 <code class=\"language-text\">interface</code>로 인코딩됩니다.</p>\n<h2 id=\"eq-타입-클래스\" style=\"position:relative;\"><a href=\"#eq-%ED%83%80%EC%9E%85-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"eq 타입 클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Eq 타입 클래스</h2>\n<p><strong>동등성</strong>을 허용하는 타입을 포함하기 위한 타입 클래스 <code class=\"language-text\">Eq</code>는 아래와 같이 선언됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Eq<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/** `x`와 `y`가 같을 경우 `true`를 반환한다. */</span>\n  <span class=\"token keyword\">readonly</span> <span class=\"token function-variable function\">equals</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>선언은 아래와 같이 읽을 수 있습니다.</p>\n<blockquote>\n<p><code class=\"language-text\">A</code> 타입은 정의된 적절한 타입과 <code class=\"language-text\">equal</code>이라는 이름의 함수가 있는 경우 타입 클래스 <code class=\"language-text\">Eq</code>에 속합니다.</p>\n</blockquote>\n<p><strong>instance</strong>는 아래와 같습니다.</p>\n<blockquote>\n<p>프로그래머는 특정 타입 <code class=\"language-text\">A</code>에 대한 모든 <code class=\"language-text\">C</code> 멤버의 구현을 정의하는 인스턴스 선언을 사용하여 어떤 타입 <code class=\"language-text\">A</code>를 주어진 타입 클래스 <code class=\"language-text\">C</code>의 멤버로 만들 수 있습니다.</p>\n</blockquote>\n<p><code class=\"language-text\">fp-ts</code> 인스턴스는 정적인 딕셔너리로 인코딩됩니다.</p>\n<p>예를 들어 아래는 <code class=\"language-text\">number</code> 타입에 대한 <code class=\"language-text\">Eq</code>의 인스턴스입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> eqNumber<span class=\"token operator\">:</span> Eq<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">equals</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">===</span> y<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>인스턴스는 아래의 규칙을 만족합니다.</p>\n<ol>\n<li>반사성(<strong>Reflexivity</strong>): <code class=\"language-text\">A</code>의 모든 <code class=\"language-text\">x</code>에 대하여 <code class=\"language-text\">equals(x, x) === true</code>를 만족한다.</li>\n<li>대칭(<strong>Symmetry</strong>): <code class=\"language-text\">A</code>의 모든 <code class=\"language-text\">x</code>, <code class=\"language-text\">y</code>에 대하여 <code class=\"language-text\">equals(x, y) === equals(y, x)</code>를 만족한다.</li>\n<li>이동성(<strong>Transitivity</strong>): <code class=\"language-text\">A</code>의 모든 <code class=\"language-text\">x</code>, <code class=\"language-text\">y</code>, <code class=\"language-text\">z</code>에 대하여 <code class=\"language-text\">equals(x, y) === true</code>이고 <code class=\"language-text\">equals(y, z) === true</code>라면 <code class=\"language-text\">equals(x, z) === true</code>를 만족한다.</li>\n</ol>\n<h2 id=\"code-classlanguage-textelemcode-함수\" style=\"position:relative;\"><a href=\"#code-classlanguage-textelemcode-%ED%95%A8%EC%88%98\" aria-label=\"code classlanguage textelemcode 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">elem</code> 함수</h2>\n<p>프로그래머는 아래와 같은 방법으로 <code class=\"language-text\">elem</code>(요소가 배열에 있는지를 결정하는) 함수를 정의할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">elem</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">E</span><span class=\"token operator\">:</span> Eq<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">as</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">as</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">as</span><span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=></span> <span class=\"token constant\">E</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">number</code>타입의 <code class=\"language-text\">Eq</code> 인스턴스인 <code class=\"language-text\">eqNumber</code>를 이용한 <code class=\"language-text\">elem</code> 함수를 테스트하는 코드는 아래와 같다. <code class=\"language-text\">elem</code> 함수가 반환하는 <code class=\"language-text\">boolean</code> 타입값을 이용해 <code class=\"language-text\">toBeTruthy</code>, <code class=\"language-text\">toBeFalsy</code> 함수를 이용해 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'elem 함수 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'eqNumber를 이용한 elem 함수 테스트 (요소가 있는 경우)'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">elem</span><span class=\"token punctuation\">(</span>eqNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeTruthy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'eqNumber를 이용한 elem 함수 테스트 (요소가 없는 경우)'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">elem</span><span class=\"token punctuation\">(</span>eqNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeFalsy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>더 복잡한 타입에 대한 <code class=\"language-text\">Eq</code> 인스턴스를 작성해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Point</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> eqPoint<span class=\"token operator\">:</span> Eq<span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">equals</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> p1<span class=\"token punctuation\">.</span>x <span class=\"token operator\">===</span> p2<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&amp;&amp;</span> p1<span class=\"token punctuation\">.</span>y <span class=\"token operator\">===</span> p2<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>참조 동등성을 먼저 확인하여 <code class=\"language-text\">equals</code>를 최적화 할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> eqPoint<span class=\"token operator\">:</span> Eq<span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">equals</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> p1 <span class=\"token operator\">===</span> p2 <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>x <span class=\"token operator\">===</span> p2<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&amp;&amp;</span> p1<span class=\"token punctuation\">.</span>y <span class=\"token operator\">===</span> p2<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>하지만 이것은 대부분 보일러플레이트 입니다. 좋은 소식은 우리가 각 필드에 <code class=\"language-text\">Eq</code> 인스턴스를 제공할 수 있다면 <code class=\"language-text\">Point</code>와 같은 구조에 대한 <code class=\"language-text\">Eq</code> 인스턴스를 만들 수 있다는 것이다.</p>\n<p><del>실제로 <code class=\"language-text\">fp-ts/lib/Eq</code> 모듈이 <code class=\"language-text\">getStructEq</code> <a href=\"https://dev.to/gcanti/functional-design-combinators-14pn\">콤비네이터</a>을 내보냅니다.</del></p>\n<blockquote>\n<p>원문에서는 <code class=\"language-text\">getStructEq</code>를 사용하라고 작성되어 있지만, 최신 버전의 fp-ts에서는 deprecated 되어 있으며 <a href=\"https://gcanti.github.io/fp-ts/modules/Eq.ts.html#struct\"><code class=\"language-text\">struct</code></a>를 사용하면 됩니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> eqPoint<span class=\"token operator\">:</span> Eq<span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">struct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> eqNumber<span class=\"token punctuation\">,</span>\n  y<span class=\"token operator\">:</span> eqNumber<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>방금 정의한 인스턴스로 <code class=\"language-text\">struct</code>를 계속 지원할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> eqVector<span class=\"token operator\">:</span> Eq<span class=\"token operator\">&lt;</span>Vector<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">struct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  from<span class=\"token operator\">:</span> eqPoint<span class=\"token punctuation\">,</span>\n  to<span class=\"token operator\">:</span> eqPoint<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">struct</code>는 <code class=\"language-text\">fp-ts</code>에 의해 제공되는 유일한 콤비네이터가 아닙니다. <code class=\"language-text\">fp-ts/lib/Array</code>에는 배열을 위한 <code class=\"language-text\">Eq</code> 인스턴스를 도출할 수 있는 콤비네이터가 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getEq <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Array'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> eqArrayOfPoints<span class=\"token operator\">:</span> Eq<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">>></span> <span class=\"token operator\">=</span> <span class=\"token function\">getEq</span><span class=\"token punctuation\">(</span>eqPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>마지막으로 <code class=\"language-text\">Eq</code> 인스턴스를 구축할 수 있는 또 다른 유용한 방법은 <code class=\"language-text\">contramap</code> 콤비네이터입니다.</p>\n<ul>\n<li><code class=\"language-text\">contramap</code> 콤비네이터 타입 정의</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> contramap <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">B</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">f</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">:</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>fa<span class=\"token operator\">:</span> Eq<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Eq<span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">contramap</code> 콤비네이터는 <code class=\"language-text\">A</code>에 대한 <code class=\"language-text\">Eq</code>의 인스턴스와 <code class=\"language-text\">B</code>에서 <code class=\"language-text\">A</code>로의 함수가 주어지면 <code class=\"language-text\">B</code>에 대한 <code class=\"language-text\">Eq</code>의 인스턴스를 파생시킬 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> contramap <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Eq'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> eqNumber <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./eqNumber'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  userId<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** 두 User는`userId` 필드가 같으면 같습니다. */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> eqUser <span class=\"token operator\">=</span> <span class=\"token function\">contramap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">:</span> User<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>eqNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">eqUser</code>에서 사용한 <code class=\"language-text\">contramap</code> 콤비네이터는 <code class=\"language-text\">A</code> 타입으로 <code class=\"language-text\">number</code> 타입을 받고 <code class=\"language-text\">B</code> 타입으로 <code class=\"language-text\">User</code> 타입을 받으며 <code class=\"language-text\">number</code> 타입인 <code class=\"language-text\">User</code> 타입의 <code class=\"language-text\">userId</code> 필드를 <code class=\"language-text\">eqNumber</code> 함수를 이용해 동등성을 판단합니다.</p>\n<ul>\n<li><code class=\"language-text\">eqUser</code>에 사용된 <code class=\"language-text\">contramp</code> 함수의 타입 정의</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> contramap <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> User<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">f</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">:</span> User<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token punctuation\">(</span>fa<span class=\"token operator\">:</span> Eq<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Eq<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>작성한 <code class=\"language-text\">eqUser</code> 인스턴스는 아래와 같이 테스트할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Eq 인터페이스를 구현한 eqUser 인스턴스 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'eqUser 인스턴스 equals 함수 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n      eqUser<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">{</span> userId<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Giulio'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> userId<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Giulio Canti'</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeTruthy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n      eqUser<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">{</span> userId<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Giulio'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span> userId<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Giulio'</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeFalsy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">eqUser</code> 인스턴스의 <code class=\"language-text\">equals</code> 함수는 두 개의 인자로 받은 두 <code class=\"language-text\">User</code> 타입 객체의 <code class=\"language-text\">userId</code>가 같은 경우 <code class=\"language-text\">true</code>를 반환합니다. <code class=\"language-text\">userId</code> 필드는 앞에서 구현했던 <code class=\"language-text\">eqNumber</code> 인스턴스의 <code class=\"language-text\">equals</code> 함수를 이용해 값이 같은지 확인합니다.</p>","frontmatter":{"title":"fp-ts로 Typescript 함수형 프로그래밍 시작하기 1 (Eq)","date":"April 24, 2021","thumbnail":null}}},"pageContext":{"slug":"/TypeScript/2021-04-24-fp-ts-1/","previous":{"fields":{"slug":"/TypeScript/2021-04-21-fp-ts-0/"},"frontmatter":{"title":"fp-ts로 Typescript 함수형 프로그래밍 시작하기 0","category":"TypeScript","draft":false}},"next":{"fields":{"slug":"/TypeScript/2021-04-25-fp-ts-2/"},"frontmatter":{"title":"fp-ts로 Typescript 함수형 프로그래밍 시작하기 2 (Ord)","category":"TypeScript","draft":false}}}},"staticQueryHashes":["3001444076","3128451518"]}