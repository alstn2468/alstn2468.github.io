{"componentChunkName":"component---src-templates-blog-post-js","path":"/TypeScript/2021-04-25-fp-ts-3","result":{"data":{"site":{"siteMetadata":{"title":"Minsu's Dev Log","author":"Minsu Kim","siteUrl":"https://alstn2468.github.io","comment":{"disqusShortName":"","utterances":"alstn2468/alstn2468.github.io"},"sponsor":{"buyMeACoffeeId":"eMLdEwU"}}},"markdownRemark":{"id":"9fe1395b-b4d5-5c16-b79d-401745b3efbe","excerpt":"본 포스트는 fp-ts 공식 문서의 Learning Resources에 있는 Getting Started에서 소개하는 문서들을 번역하며 학습한 문서입니다. 원본 문서는 링크에서 확인할 수 있으며 작성한 코드들은 여기에서 확인할 수 있습니다. fp-ts 시작하기 (Semigroup…","html":"<p>본 포스트는 fp-ts 공식 문서의 <a href=\"https://gcanti.github.io/fp-ts/learning-resources/\">Learning Resources</a>에 있는 Getting Started에서 소개하는 문서들을 번역하며 학습한 문서입니다. 원본 문서는 <a href=\"https://dev.to/gcanti/getting-started-with-fp-ts-semigroup-2mf7\">링크</a>에서 확인할 수 있으며 작성한 코드들은 <a href=\"https://github.com/alstn2468/getting-started-fp-ts/tree/main/src/getting_started_series/3_semigroup\">여기</a>에서 확인할 수 있습니다.</p>\n<h2 id=\"fp-ts-시작하기-semigroup\" style=\"position:relative;\"><a href=\"#fp-ts-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-semigroup\" aria-label=\"fp ts 시작하기 semigroup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fp-ts 시작하기 (Semigroup)</h2>\n<p><code class=\"language-text\">Semigroup</code>은 함수형 프로그래밍의 근본적인 추상화이므로 이 글의 내용이 평소보다 길어질 것입니다.</p>\n<h3 id=\"일반적인-정의\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-%EC%A0%95%EC%9D%98\" aria-label=\"일반적인 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일반적인 정의</h3>\n<p><code class=\"language-text\">Semigroup</code>은 <code class=\"language-text\">A</code>가 비어 있지 않은 집합이고 <code class=\"language-text\">*</code>가 <code class=\"language-text\">A</code>에 대한 이진 <strong>연관</strong> 연산인 쌍 <code class=\"language-text\">(A, *)</code>입니다. 즉, <code class=\"language-text\">A</code>의 두 요소를 입력으로 받고 <code class=\"language-text\">A</code>의 요소를 출력으로 반환하는 함수입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token operator\">*</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Y</span><span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">A</span></code></pre></div>\n<p>결합 법칙은 아래의 동식이 모든 <code class=\"language-text\">A</code>에 대한 <code class=\"language-text\">x</code>, <code class=\"language-text\">y</code>, <code class=\"language-text\">z</code>에 대해 유지됨을 의미한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> z <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">*</span> z<span class=\"token punctuation\">)</span></code></pre></div>\n<p>결합 법칙은 단순히 표현식을 괄호로 묶는 것에 대해 걱정할 필요가 없으며 <code class=\"language-text\">x * y * z</code>를 쓸 수 있다는 것을 의미합니다.</p>\n<blockquote>\n<p><code class=\"language-text\">Semigroup</code>은 병렬화 가능한 연산의 본질을 포착합니다.</p>\n</blockquote>\n<p><code class=\"language-text\">Semigroup</code>의 예시는 아래와 같이 많이 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">(number, *)</code>: 여기에서 <code class=\"language-text\">*</code> 연산은 일반적인 숫자의 곱입니다.</li>\n<li><code class=\"language-text\">(string, +)</code>: 여기에서 <code class=\"language-text\">+</code> 연산은 일반적인 문자열 연결입니다.</li>\n<li><code class=\"language-text\">(boolean, &amp;&amp;)</code>: 여기에서 <code class=\"language-text\">&amp;&amp;</code> 연산은 일반적인 논리곱입니다.</li>\n</ul>\n<p>이 외에도 많은 예시가 있습니다.</p>\n<h2 id=\"타입-클래스-정의\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%A0%95%EC%9D%98\" aria-label=\"타입 클래스 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 클래스 정의</h2>\n<p><code class=\"language-text\">fp-ts</code>에서 <code class=\"language-text\">fp-ts/lib/Semigroup</code>모듈에 포함된 타입 클래스 <code class=\"language-text\">Semigroup</code>은 TypeScript의 <code class=\"language-text\">interface</code>로 구현됩니다. 여기서 작업 <code class=\"language-text\">*</code>는 <code class=\"language-text\">concat</code>으로 명명됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Semigroup<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">concat</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">A</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Semigroup</code>은 아래의 규칙이 유지되어야 합니다.</p>\n<ol>\n<li>결합 법칙(<strong>Associativity</strong>): <code class=\"language-text\">A</code>의 모든 <code class=\"language-text\">x</code>, <code class=\"language-text\">y</code>, <code class=\"language-text\">z</code>에 대하여 <code class=\"language-text\">concat(concat(x, y), z) = concat(x, concat(y, z))</code>를 만족한다.</li>\n</ol>\n<p><code class=\"language-text\">concat</code>이라는 이름은 배열에 대해 특히 의미가 있지만, 인스턴스를 구현하는 맥락 및 타입 <code class=\"language-text\">A</code>에 따라 <code class=\"language-text\">Semigroup</code> 연산은 다른 의미로 해석될 수 있습니다.</p>\n<ul>\n<li>연쇄(concatenation)</li>\n<li>병합(merging)</li>\n<li>퓨전(fusion)</li>\n<li>선택(selection)</li>\n<li>부가(addition)</li>\n<li>치환(substitution)</li>\n</ul>\n<p>이 외에도 다른 많은 의미로 해석될 수 있습니다.</p>\n<h2 id=\"인스턴스\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4\" aria-label=\"인스턴스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인스턴스</h2>\n<p>아래의 <code class=\"language-text\">semigroupProduct</code> 인스턴스가 <code class=\"language-text\">(number, *)</code>을 구현하는 방법입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/** number 타입의 곱셈 `Semigroup` */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> semigroupProduct<span class=\"token operator\">:</span> Semigroup<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">concat</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>동일한 타입에 대해 서로 다른 <code class=\"language-text\">Semigroup</code> 인스턴스를 정의할 수 있습니다. 아래는 <code class=\"language-text\">semigroupProductSum</code> 인스턴스로 <code class=\"language-text\">(number, +)</code>의 구현입니다. 여기서 <code class=\"language-text\">+</code>는 일반적인 <code class=\"language-text\">number</code> 타입의 더하기 연산입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/** number 타입의 덧셈 `Semigroup` */</span>\n<span class=\"token keyword\">const</span> semigroupSum<span class=\"token operator\">:</span> Semigroup<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">concat</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다른 예시로 <code class=\"language-text\">string</code> 타입을 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> semigroupString<span class=\"token operator\">:</span> Semigroup<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">concat</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"인스턴스를-찾을-수-없습니다\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EB%A5%BC-%EC%B0%BE%EC%9D%84-%EC%88%98-%EC%97%86%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"인스턴스를 찾을 수 없습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인스턴스를 찾을 수 없습니다!</h2>\n<p>타입 <code class=\"language-text\">A</code>가 주어졌을 때 <code class=\"language-text\">A</code>에서 연관 연산을 찾을 수 없으면 어떻게 할 수 있을까요? 아래의 구성을 사용하여 모든 타입에 대해 (사소한) <code class=\"language-text\">Semigroup</code> 인스턴스를 만들 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/** 항상 첫 번째 인자를 반환한다. */</span>\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">getFirstSemigroup</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">never</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Semigroup<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">concat</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/** 항상 두 번째 인자를 반환한다. */</span>\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">getLastSemigroup</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">never</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Semigroup<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">concat</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> y <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>또 다른 기술은 <code class=\"language-text\">A</code>의 <strong>자유 Semigroup</strong>이라고하는 <code class=\"language-text\">Array&lt;A></code> (*)에 대한 <code class=\"language-text\">Semigroup</code> 인스턴스를 정의하는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">getArraySemigroup</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">never</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Semigroup<span class=\"token operator\">&lt;</span><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">concat</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 <code class=\"language-text\">A</code>의 요소를 <code class=\"language-text\">Array&lt;A></code>의 단일 요소에 매핑합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token keyword\">of</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>(*)는 엄밀히 말하면 <code class=\"language-text\">A</code>의 비어 있지 않은 배열에 대한 <code class=\"language-text\">Semigroup</code> 인스턴스입니다.</p>\n<blockquote>\n<p>참고: <code class=\"language-text\">concat</code>은 배열의 메서드로, <code class=\"language-text\">Semigroup</code> 연산의 이름에 대한 초기 선택을 설명합니다.</p>\n</blockquote>\n<p><code class=\"language-text\">A</code>의 자유 <code class=\"language-text\">Semigroup</code>은 요소가 <code class=\"language-text\">A</code> 요소의 비어있지 않은 유한 시퀀스일 수 있는 <code class=\"language-text\">Semigroup</code>입니다.</p>\n<h2 id=\"code-classlanguage-textordcode로-파생시키기\" style=\"position:relative;\"><a href=\"#code-classlanguage-textordcode%EB%A1%9C-%ED%8C%8C%EC%83%9D%EC%8B%9C%ED%82%A4%EA%B8%B0\" aria-label=\"code classlanguage textordcode로 파생시키기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">Ord</code>로 파생시키기</h2>\n<p>타입 <code class=\"language-text\">A</code>에 대한 <code class=\"language-text\">Semigroup</code> 인스턴스를 만드는 또 다른 방법이 있습니다. <code class=\"language-text\">A</code>에 대한 <a href=\"https://alstn2468.github.io/TypeScript/2021-04-25-fp-ts-2/\"><code class=\"language-text\">Ord</code></a> 인스턴스가 이미있는 경우 이를 <code class=\"language-text\">Semigroup</code>으로 “변환”할 수 있습니다.</p>\n<p>아래 코드는 실제로 가능한 두 <code class=\"language-text\">Semigroup</code>입니다.</p>\n<blockquote>\n<p>원문에서는 <code class=\"language-text\">getMeetSemigroup</code>, <code class=\"language-text\">getJoinSemigroup</code>, <code class=\"language-text\">ordNumber</code>를 사용하라고 작성되어 있지만, 최신 버전의 fp-ts에서는 deprecated 되어 있으며 <a href=\"https://gcanti.github.io/fp-ts/modules/Semigroup.ts.html#min\"><code class=\"language-text\">min</code></a>, <a href=\"https://gcanti.github.io/fp-ts/modules/Semigroup.ts.html#max\"><code class=\"language-text\">max</code></a>, <a href=\"hhttps://gcanti.github.io/fp-ts/modules/number.ts.html#ord\"><code class=\"language-text\">Ord</code></a>를 사용하면 됩니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Ord <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/number'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> max<span class=\"token punctuation\">,</span> min <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Semigroup'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** 2개의 값 중 작은 값을 반환한다.  */</span>\n<span class=\"token keyword\">const</span> semigroupMin<span class=\"token operator\">:</span> Semigroup<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>Ord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** 2개의 값 중 큰 값을 반환한다.  */</span>\n<span class=\"token keyword\">const</span> semigroupMax<span class=\"token operator\">:</span> Semigroup<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>Ord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>작성한 <code class=\"language-text\">semigroupMin</code>, <code class=\"language-text\">semigroupMax</code> 인터페이스는 아래와 같이 테스트할 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">semigroupMin</code> 인터페이스를 테스트하는 코드</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Semigroup 인터페이스를 구현한 semigroupMin 인스턴스 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'semigroupMin 인스턴스 concat 함수 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>semigroupMin<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">semigroupMax</code> 인터페이스를 테스트하는 코드</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Semigroup 인터페이스를 구현한 semigroupMax 인스턴스 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'semigroupMax 인스턴스 concat 함수 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>semigroupMax<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">semigroupMin</code> 인터페이스의 <code class=\"language-text\">concat</code> 함수는 인자로 받은 두 개의 값 중 작은 값을 반환하는지 확인하며 <code class=\"language-text\">semigroupMax</code> 인터페이싀 <code class=\"language-text\">concat</code> 함수는 인자로 받은 두 개의 값 중 큰 값을 반환하는지 확인합니다.</p>\n<p>좀 더 복잡한 타입에 대한 <code class=\"language-text\">Semigroup</code> 인스턴스를 작성해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Point</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> semigroupPoint<span class=\"token operator\">:</span> Semigroup<span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">concat</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    x<span class=\"token operator\">:</span> semigroupSum<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    y<span class=\"token operator\">:</span> semigroupSum<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드의 대부분 자주 사용하는 구문입니다. 좋은 소식은 각 필드에 대해 <code class=\"language-text\">Semigroup</code> 인스턴스를 제공 할 수 있다면 <code class=\"language-text\">Point</code>와 같은 구조체에 대해 <code class=\"language-text\">Semigroup</code> 인스턴스를 만들 수 있다는 것입니다.</p>\n<p><del>실제로 <code class=\"language-text\">fp-ts/lib/Semigroup</code> 모듈은 <code class=\"language-text\">getStructSemigroup</code> 콤비네이터를 지원합니다.</del></p>\n<blockquote>\n<p>원문에서는 <code class=\"language-text\">getStructSemigroup</code>를 사용하라고 작성되어 있지만, 최신 버전의 fp-ts에서는 deprecated 되어 있으며 <a href=\"https://gcanti.github.io/fp-ts/modules/Semigroup.ts.html#struct\"><code class=\"language-text\">struct</code></a>를 사용하면 됩니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> struct <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Semigroup'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> semigroupPoint<span class=\"token operator\">:</span> Semigroup<span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">struct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> semigroupSum<span class=\"token punctuation\">,</span>\n  y<span class=\"token operator\">:</span> semigroupSum<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>계속해서 방금 정의 된 인스턴스로 <code class=\"language-text\">struct</code>를 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Vector</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  from<span class=\"token operator\">:</span> Point<span class=\"token punctuation\">;</span>\n  to<span class=\"token operator\">:</span> Point<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> semigroupVector<span class=\"token operator\">:</span> Semigroup<span class=\"token operator\">&lt;</span>Vector<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">struct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  from<span class=\"token operator\">:</span> semigroupPoint<span class=\"token punctuation\">,</span>\n  to<span class=\"token operator\">:</span> semigroupPoint<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">struct</code>은 <code class=\"language-text\">fp-ts</code>에서 제공하는 유일한 콤비네이터가 아닙니다. 여기에 함수에 대한 <code class=\"language-text\">Semigroup</code> 인스턴스를 파생시킬 수 있는 콤비네이터가 있습니다. <code class=\"language-text\">S</code>에 대한 <code class=\"language-text\">Semigroup</code> 인스턴스가 주어지면, 모든 <code class=\"language-text\">A</code>에 대해 시그니처 <code class=\"language-text\">(a: A) => S</code>에 해당하는 <code class=\"language-text\">Semigroup</code> 인스턴스를 도출할 수 있다.</p>\n<blockquote>\n<p>원문에서는 <code class=\"language-text\">getFunctionSemigroup</code>, <code class=\"language-text\">semigroupAll</code>를 사용하라고 작성되어 있지만, 최신 버전의 fp-ts에서는 deprecated 되어 있으며 <a href=\"https://gcanti.github.io/fp-ts/modules/function.ts.html#getsemigroup\"><code class=\"language-text\">getSemigroup</code></a>, <a href=\"https://gcanti.github.io/fp-ts/modules/boolean.ts.html#semigroupall\"><code class=\"language-text\">SemigroupAll</code></a>를 사용하면 됩니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> Semigroup <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Semigroup'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> Point <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./semigroupPoint'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getSemigroup <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/function'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SemigroupAll <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/boolean'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** `semigroupAll`은 결합 된 boolean Semigroup입니다. */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> semigroupPredicate<span class=\"token operator\">:</span> Semigroup<span class=\"token operator\">&lt;</span>\n  <span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> Point<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">boolean</span>\n<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">getSemigroup</span><span class=\"token punctuation\">(</span>SemigroupAll<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span>Point<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 <code class=\"language-text\">Points</code>에서 두 predicate 함수를 “병합”할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> isPositiveX <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> Point<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>x <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> isPositiveY <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> Point<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>y <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> isPositiveXY <span class=\"token operator\">=</span> semigroupPredicate<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>isPositiveX<span class=\"token punctuation\">,</span> isPositiveY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>작성한 <code class=\"language-text\">isPositiveXY</code> 함수는 아래와 같이 테스트할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'semigroupPredicate 인스턴스를 이용해 만든 isPositiveXY 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'isPositiveXY 함수 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">isPositiveXY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeTruthy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">isPositiveXY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeFalsy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">isPositiveXY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeFalsy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">isPositiveXY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeFalsy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">SemigroupAll</code>을 이용했기 때문에 <code class=\"language-text\">semigroupPredicate</code> 인스턴스의 <code class=\"language-text\">concat</code> 함수에 전달된 두 함수 모두 <code class=\"language-text\">true</code>를 반환해야 <code class=\"language-text\">isPositiveXY</code> 함수가 <code class=\"language-text\">true</code>를 반환합니다. <code class=\"language-text\">x</code>, <code class=\"language-text\">y</code> 모두 0 이상의 값이 전달되었을 경우 <code class=\"language-text\">true</code>가 반환되었는지 확인합니다.</p>\n<h2 id=\"folding\" style=\"position:relative;\"><a href=\"#folding\" aria-label=\"folding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Folding</h2>\n<p>정의에 따라 <code class=\"language-text\">concat</code>은 <code class=\"language-text\">A</code>의 두 요소에서만 작동합니다. 더 많은 요소를 연결하려면 어떻게 할 수 있을까요?</p>\n<p><del><code class=\"language-text\">fold</code> 함수는 <code class=\"language-text\">Semigroup</code> 인스턴스, 초깃값 및 요소 배열을 사용합니다.</del></p>\n<blockquote>\n<p>원문에서는 <code class=\"language-text\">fold</code>, <code class=\"language-text\">semigroupSum</code>, <code class=\"language-text\">semigroupProduct</code>를 사용하라고 작성되어 있지만, 최신 버전의 fp-ts에서는 deprecated 되어 있으며 <a href=\"https://gcanti.github.io/fp-ts/modules/Semigroup.ts.html#concatall\"><code class=\"language-text\">concatAll</code></a>, <a href=\"https://gcanti.github.io/fp-ts/modules/number.ts.html#semigroupsum\"><code class=\"language-text\">SemigroupSum</code></a>, <a href=\"https://gcanti.github.io/fp-ts/modules/number.ts.html#semigroupproduct\"><code class=\"language-text\">SemigroupProduct</code></a>를 사용하면 됩니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SemigroupSum<span class=\"token punctuation\">,</span> SemigroupProduct <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/number'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> concatAll <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Semigroup'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">concatAll</span><span class=\"token punctuation\">(</span>SemigroupSum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> product <span class=\"token operator\">=</span> <span class=\"token function\">concatAll</span><span class=\"token punctuation\">(</span>SemigroupProduct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>작성한 <code class=\"language-text\">sum</code> 함수와 <code class=\"language-text\">product</code> 함수는 아래와 같이 테스트할 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">sum</code> 함수를 테스트하는 코드</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'concatAll, SemigroupSum를 사용한 sum 함수 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sum함수 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">product</code> 함수를 테스트하는 코드</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'concatAll, SemigroupProduct를 사용한 product 함수 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'product함수 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">product</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>원문의 <code class=\"language-text\">fold</code> 함수는와 다르게 <code class=\"language-text\">concatAll</code> 함수는 초깃값을 인자로 받고 <code class=\"language-text\">concat</code>을 사용할 배열을 전달받아 값을 반환하는 함수를 반환한다. 따라서 <code class=\"language-text\">sum(0)([1, 2, 3, 4])</code>, <code class=\"language-text\">product(1)([1, 2, 3, 4])</code> 와 같이 함수 호출 연산자를 두 번 사용해 테스트할 수 있다.</p>\n<h2 id=\"타입-생성자를-위한-semigroup\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85-%EC%83%9D%EC%84%B1%EC%9E%90%EB%A5%BC-%EC%9C%84%ED%95%9C-semigroup\" aria-label=\"타입 생성자를 위한 semigroup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 생성자를 위한 Semigroup</h2>\n<p><code class=\"language-text\">Option&lt;A></code> 두 개를 “병합”하려면 어떻게 할 수 있을까요? 네 가지 경우가 있습니다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">x</th>\n<th align=\"center\">y</th>\n<th align=\"center\">concat(x, y)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">none</td>\n<td align=\"center\">none</td>\n<td align=\"center\">none</td>\n</tr>\n<tr>\n<td align=\"center\">some(a)</td>\n<td align=\"center\">none</td>\n<td align=\"center\">none</td>\n</tr>\n<tr>\n<td align=\"center\">none</td>\n<td align=\"center\">some(a)</td>\n<td align=\"center\">none</td>\n</tr>\n<tr>\n<td align=\"center\">some(a)</td>\n<td align=\"center\">some(b)</td>\n<td align=\"center\">?</td>\n</tr>\n</tbody>\n</table>\n<p>마지막 하나에 문제가 있습니다. 두 개의 <code class=\"language-text\">A</code>타입 <code class=\"language-text\">some</code> 객체를 “병합”하려면 무언가가 필요합니다.</p>\n<p>두 개의 <code class=\"language-text\">A</code>를 “병합”하는 것이 <code class=\"language-text\">Semigroup</code>이 하는 일입니다! <code class=\"language-text\">A</code>에 대한 <code class=\"language-text\">Semigroup</code> 인스턴스를 요구한 다음 <code class=\"language-text\">Option&lt;A></code>에 대한 <code class=\"language-text\">Semigroup</code> 인스턴스를 파생 할 수 있습니다. 이것이 <code class=\"language-text\">getApplySemigroup</code> 콤비네이터가 작동하는 방식입니다.</p>\n<blockquote>\n<p>원문에서는 <code class=\"language-text\">Option/getApplySemigroup</code>, <code class=\"language-text\">semigroupSum</code>, 를 사용하라고 작성되어 있지만, 최신 버전의 fp-ts에서는 deprecated 되어 있으며 <a href=\"https://gcanti.github.io/fp-ts/modules/Apply.ts.html#getapplysemigroup\"><code class=\"language-text\">Apply/getApplySemigroup</code></a>, <a href=\"https://gcanti.github.io/fp-ts/modules/number.ts.html#semigroupsum\"><code class=\"language-text\">SemigroupSum</code></a>를 사용하면 됩니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SemigroupSum <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/number'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getApplySemigroup <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Apply'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Apply <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Option'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">S</span> <span class=\"token operator\">=</span> <span class=\"token function\">getApplySemigroup</span><span class=\"token punctuation\">(</span>Apply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>SemigroupSum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>작성한 <code class=\"language-text\">Option</code> 타입을 지원하는 <code class=\"language-text\">Semigroup</code>은 아래와 같이 테스트할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Option타입을 지원하는 appliedSemigroup 인스턴스 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'appliedSemigroup 테스트 (some + none)'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">=</span> appliedSemigroup<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> none<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>none<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNone</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeTruthy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'appliedSemigroup 테스트 (some + some)'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">=</span> appliedSemigroup<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchObject</span><span class=\"token punctuation\">(</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">isSome</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeTruthy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">some</code> 객체와 <code class=\"language-text\">none</code> 객체를 더할 경우 <code class=\"language-text\">none</code>을 반환하는지 확인하고 <code class=\"language-text\">some</code> 객체와 <code class=\"language-text\">some</code> 객체를 더할 경우 두 <code class=\"language-text\">some</code> 객체의 <code class=\"language-text\">value</code>가 더해진 <code class=\"language-text\">some</code> 객체가 반환되는지 확인합니다.</p>\n<h2 id=\"부록\" style=\"position:relative;\"><a href=\"#%EB%B6%80%EB%A1%9D\" aria-label=\"부록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>부록</h2>\n<p><code class=\"language-text\">Semigroup</code>이 여러 데이터를 하나로 “연결”, “병합”또는 “결합”하고 싶을 때 도움이되는 것을 보았습니다.</p>\n<p>마지막 예제(<a href=\"http://www.tomharding.me/2017/03/13/fantas-eel-and-specification-4/\">Fantas, Eel, Specification 4 : Semigroup</a>에서 수정됨)로 모두 마무리하겠습니다.</p>\n<p>아래와 같은 고객 정보를 저장하는 시스템을 구축한다고 가정해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Customer</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  favouriteThings<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  registeredAt<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  lastUpdatedAt<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  hasMadePurchase<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>어떤 이유로든 같은 사람에 대한 중복 기록이 생길 수 있습니다. 우리에게 필요한 것은 <code class=\"language-text\">Semigroup</code>이 하는 병합 전략입니다.</p>\n<blockquote>\n<p>원문에서 사용하는 패키지 중 최신 버전의 fp-ts에서는 deprecated 되어 있는 것이 많아 아래에 목록으로 작성하겠습니다.</p>\n</blockquote>\n<details>\n    <summary>Deprecated Packages</summary>\n    <ul>\n      <li><code class=\"language-text\">Semigroup/getStructSemigroup</code>: <a href=\"https://gcanti.github.io/fp-ts/modules/Semigroup.ts.html#struct\"><code class=\"language-text\">Semigroup/struct</code></a></li>\n      <li><code class=\"language-text\">Semigroup/getJoinSemigroup</code>: <a href=\"https://gcanti.github.io/fp-ts/modules/Semigroup.ts.html#max\"><code class=\"language-text\">Semigroup/max</code></a></li>\n      <li><code class=\"language-text\">Semigroup/getJoinSemigroup</code>: <a href=\"https://gcanti.github.io/fp-ts/modules/Semigroup.ts.html#min\"><code class=\"language-text\">Semigroup/min</code></a></li>\n      <li><code class=\"language-text\">Semigroup/semigroupAny</code>: <a href=\"https://gcanti.github.io/fp-ts/modules/boolean.ts.html#semigroupany\"><code class=\"language-text\">boolean/SemigroupAny</code></a></li>\n      <li><code class=\"language-text\">Ord/ordNumber</code>: <a href=\"https://gcanti.github.io/fp-ts/modules/boolean.ts.html#semigroupany\"><code class=\"language-text\">number/Ord</code></a></li>\n    </ul>\n</details>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Semigroup<span class=\"token punctuation\">,</span> struct<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">,</span> min <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Semigroup'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getMonoid <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Array'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Ord <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/number'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> contramap <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Ord'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SemigroupAny <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/boolean'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> semigroupCustomer<span class=\"token operator\">:</span> Semigroup<span class=\"token operator\">&lt;</span>Customer<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">struct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 더 긴 이름을 유지한다.</span>\n  name<span class=\"token operator\">:</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">contramap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Ord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 항목을 축적한다.</span>\n  <span class=\"token comment\">// getMonoid는 Semigroup을 위한 `Array&lt;string>`을 반환한다.</span>\n  favouriteThings<span class=\"token operator\">:</span> <span class=\"token generic-function\"><span class=\"token function\">getMonoid</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 가장 이전의 날짜를 유지한다.</span>\n  registeredAt<span class=\"token operator\">:</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>Ord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 가장 최근의 날짜를 유지한다.</span>\n  lastUpdatedAt<span class=\"token operator\">:</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>Ord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 분리된 boolean Semigroup</span>\n  hasMadePurchase<span class=\"token operator\">:</span> SemigroupAny<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>작성한 <code class=\"language-text\">semigroupCustomer</code> 인터페이스는 아래와 같이 테스트할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Semigroup 인터페이스를 구현한 semigroupCustomer 인스턴스 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'semigroupCustomer 인스턴스 concat 함수 테스트'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>\n      semigroupCustomer<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">{</span>\n          name<span class=\"token operator\">:</span> <span class=\"token string\">'Giulio'</span><span class=\"token punctuation\">,</span>\n          favouriteThings<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'math'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'climbing'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          registeredAt<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          lastUpdatedAt<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          hasMadePurchase<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          name<span class=\"token operator\">:</span> <span class=\"token string\">'Giulio Canti'</span><span class=\"token punctuation\">,</span>\n          favouriteThings<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'functional programming'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          registeredAt<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          lastUpdatedAt<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          hasMadePurchase<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'Giulio Canti'</span><span class=\"token punctuation\">,</span>\n      favouriteThings<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'math'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'climbing'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'functional programming'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      registeredAt<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      lastUpdatedAt<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      hasMadePurchase<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">semigroupCustomer</code> 인터페이스의 <code class=\"language-text\">concat</code> 함수는 전달된 두 개의 <code class=\"language-text\">Customer</code> 타입 객체를 병합한다. <code class=\"language-text\">name</code> 속성은 둘 중 더 긴 것으로 유지하고, <code class=\"language-text\">favouriteThings</code> 속성은 두 속성을 합친다. <code class=\"language-text\">registeredAt</code> 속성은 둘 중 더 이전의 시간을 유지하며 <code class=\"language-text\">lastUpdatedAt</code> 속성은 최근 시간을 유지하고 <code class=\"language-text\">hasMadePurchase</code> 속성은 <code class=\"language-text\">true</code>가 있으면 <code class=\"language-text\">true</code>로 유지합니다.</p>\n<p>따라서 주어진 조건에 맞게 <code class=\"language-text\">Customer</code> 타입 객체가 병합되었는지 확인할 수 있다.</p>\n<p><code class=\"language-text\">getMonoid</code> 함수는 <code class=\"language-text\">Array&lt;string></code>에 대한 <code class=\"language-text\">Semigroup을</code> 반환합니다. 실제로 <strong>monid</strong>는 <code class=\"language-text\">Semigroup</code> 이상의 것을 반환합니다.</p>\n<p>그래서 monoid는 무엇일까요? 다음 포스트에서는 Monoids에 대해 이야기하겠습니다.</p>","frontmatter":{"title":"fp-ts로 Typescript 함수형 프로그래밍 시작하기 3 (Semigroup)","date":"April 25, 2021","thumbnail":null}}},"pageContext":{"slug":"/TypeScript/2021-04-25-fp-ts-3/","previous":{"fields":{"slug":"/TypeScript/2021-04-25-fp-ts-2/"},"frontmatter":{"title":"fp-ts로 Typescript 함수형 프로그래밍 시작하기 2 (Ord)","category":"TypeScript","draft":false}},"next":{"fields":{"slug":"/TypeScript/2021-04-29-fp-ts-4/"},"frontmatter":{"title":"fp-ts로 Typescript 함수형 프로그래밍 시작하기 4 (Monoid)","category":"TypeScript","draft":false}}}},"staticQueryHashes":["3001444076","3128451518"]}