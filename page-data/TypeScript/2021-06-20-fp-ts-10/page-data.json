{"componentChunkName":"component---src-templates-blog-post-js","path":"/TypeScript/2021-06-20-fp-ts-10","result":{"data":{"site":{"siteMetadata":{"title":"Minsu's Dev Log","author":"Minsu Kim","siteUrl":"https://alstn2468.github.io","comment":{"disqusShortName":"","utterances":"alstn2468/alstn2468.github.io"},"sponsor":{"buyMeACoffeeId":"eMLdEwU"}}},"markdownRemark":{"id":"ce3bfb42-67bf-5dce-b0c6-52900cdf6f53","excerpt":"본 포스트는 fp-ts 공식 문서의 Learning Resources에 있는 Getting Started에서 소개하는 문서들을 번역하며 학습한 문서입니다. 원본 문서는 링크에서 확인할 수 있으며 작성한 코드들은 여기에서 확인할 수 있습니다. fp-ts 시작하기 (IO…","html":"<p>본 포스트는 fp-ts 공식 문서의 <a href=\"https://gcanti.github.io/fp-ts/learning-resources/\">Learning Resources</a>에 있는 Getting Started에서 소개하는 문서들을 번역하며 학습한 문서입니다. 원본 문서는 <a href=\"https://dev.to/gcanti/getting-started-with-fp-ts-io-36p6\">링크</a>에서 확인할 수 있으며 작성한 코드들은 <a href=\"https://github.com/alstn2468/getting-started-fp-ts/tree/main/src/getting_started_series/10_io\">여기</a>에서 확인할 수 있습니다.</p>\n<h2 id=\"fp-ts-시작하기-io\" style=\"position:relative;\"><a href=\"#fp-ts-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-io\" aria-label=\"fp ts 시작하기 io permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fp-ts 시작하기 (IO)</h2>\n<p><code class=\"language-text\">fp-ts</code>에서 동기적인 이펙트 있는 계산은 기본적으로 <code class=\"language-text\">() => A</code> 시그니처를 갖는 <strong>썽크</strong>인 <code class=\"language-text\">IO</code> 타입으로 표현합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>참고: <code class=\"language-text\">IO</code>는 <strong>절대 실패하지 않는</strong> 계산을 표현합니다.</p>\n</blockquote>\n<p>이러한 계산의 예시는 아래와 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">localStorage</code>에 읽기 / 쓰기</li>\n<li>현재 시간을 얻기</li>\n<li>콘솔에 쓰기</li>\n<li>임의의 숫자를 얻기</li>\n</ul>\n<h3 id=\"예시-code-classlanguage-textlocalstoragecode에-읽기--쓰기\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-code-classlanguage-textlocalstoragecode%EC%97%90-%EC%9D%BD%EA%B8%B0--%EC%93%B0%EA%B8%B0\" aria-label=\"예시 code classlanguage textlocalstoragecode에 읽기  쓰기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 (<code class=\"language-text\">localStorage</code>에 읽기 / 쓰기)</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> Option <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Option'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> fromNullable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Option'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> getItem <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span>Option<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">>></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">fromNullable</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> setItem <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"예시-현재-시간을-얻기\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-%ED%98%84%EC%9E%AC-%EC%8B%9C%EA%B0%84%EC%9D%84-%EC%96%BB%EA%B8%B0\" aria-label=\"예시 현재 시간을 얻기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 (현재 시간을 얻기)</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> now<span class=\"token operator\">:</span> <span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"예시-콘솔에-쓰기\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-%EC%BD%98%EC%86%94%EC%97%90-%EC%93%B0%EA%B8%B0\" aria-label=\"예시 콘솔에 쓰기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 (콘솔에 쓰기)</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> log <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"예시-임의의-숫자를-얻기\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-%EC%9E%84%EC%9D%98%EC%9D%98-%EC%88%AB%EC%9E%90%EB%A5%BC-%EC%96%BB%EA%B8%B0\" aria-label=\"예시 임의의 숫자를 얻기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 (임의의 숫자를 얻기)</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> random<span class=\"token operator\">:</span> <span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">IO</code> 타입은 <a href=\"https://alstn2468.github.io/TypeScript/2021-06-05-fp-ts-8/\">Monad</a> 인스턴스를 허용하므로 <code class=\"language-text\">map</code>을 사용할 수 있습니다.</p>\n<blockquote>\n<p>원문에서는 <code class=\"language-text\">io.map</code>을 사용하라고 작성되어 있지만, 최신 버전의 fp-ts에서는 deprecated 되어 있으며 <a href=\"https://gcanti.github.io/fp-ts/modules/IO.ts.html#map\"><code class=\"language-text\">IO/map</code></a>을 사용하면 됩니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> map <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/IO'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** 무작위의 boolean을 반환한다. */</span>\n<span class=\"token keyword\">const</span> randomBool<span class=\"token operator\">:</span> <span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=></span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>또한 <code class=\"language-text\">chain</code> 연산을 사용할 수 있습니다.</p>\n<blockquote>\n<p>원문에서는 <code class=\"language-text\">io.chain</code>을 사용하라고 작성되어 있지만, 최신 버전의 fp-ts에서는 deprecated 되어 있으며 <a href=\"https://gcanti.github.io/fp-ts/modules/IO.ts.html#chain\"><code class=\"language-text\">IO/chain</code></a>을 사용하면 됩니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> chain <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/IO'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** 무작위의 boolean을 콘솔에 출력한다. */</span>\n<span class=\"token keyword\">const</span> program<span class=\"token operator\">:</span> <span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">chain</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>randomBool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">program</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>참고: <code class=\"language-text\">program()</code>을 호출할 때까지 <strong>아무 일도 일어나지 않습니다</strong>.</p>\n</blockquote>\n<p>그 이유는 <code class=\"language-text\">program</code>은 이펙트 있는 계산을 <strong>표현</strong>하는 <strong>값</strong>이기 때문에, 어떤 사이드 이펙트를 실행하기 위해서는 ”<code class=\"language-text\">IO</code> 액션을 실행”해야 하기 때문입니다.</p>\n<p><code class=\"language-text\">IO</code> 액션은 값일 뿐이므로 <a href=\"https://alstn2468.github.io/TypeScript/2021-04-29-fp-ts-4/\">Monoid</a>와 같은 유용한 추상화를 사용하여 처리할 수 있습니다.</p>\n<h3 id=\"예시-dungeons-and-dragons\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-dungeons-and-dragons\" aria-label=\"예시 dungeons and dragons permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 (Dungeons and Dragons)</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">IO</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/IO'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> Monoid <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Monoid'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> log <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Console'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> chain <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/IO'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> concatAll <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Monoid'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> MonoidSum <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/number'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> randomInt <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Random'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getApplicativeMonoid <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Applicative'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Die</span> <span class=\"token operator\">=</span> <span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> monoidDie<span class=\"token operator\">:</span> Monoid<span class=\"token operator\">&lt;</span>Die<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">getApplicativeMonoid</span><span class=\"token punctuation\">(</span>Applicative<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>MonoidSum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/** 주사위를 굴린 결과의 합을 반환합니다. */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">roll</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>dice<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>Die<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">concatAll</span><span class=\"token punctuation\">(</span>monoidDie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">D4</span><span class=\"token operator\">:</span> Die <span class=\"token operator\">=</span> <span class=\"token function\">randomInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">D10</span><span class=\"token operator\">:</span> Die <span class=\"token operator\">=</span> <span class=\"token function\">randomInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">D20</span><span class=\"token operator\">:</span> Die <span class=\"token operator\">=</span> <span class=\"token function\">randomInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> dice <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">D4</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">D10</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">D20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">chain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Result is: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">roll</span><span class=\"token punctuation\">(</span>dice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\nResult is: 11\n*/</span></code></pre></div>\n<p>또는 유용한 <a href=\"https://dev.to/gcanti/functional-design-combinators-14pn\">콤비네이터</a>를 정의할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/** 디버깅을 위해 콘솔에 값을 기록한다. */</span>\n<span class=\"token keyword\">const</span> withLogging <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>action<span class=\"token operator\">:</span> <span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span>\n  <span class=\"token generic-function\"><span class=\"token function\">chain</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Value is: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">chain</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=></span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Result is: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">roll</span><span class=\"token punctuation\">(</span>dice<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>withLogging<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\nValue is: 4\nValue is: 2\nValue is: 13\nResult is: 19\n*/</span></code></pre></div>\n<h2 id=\"에러-처리\" style=\"position:relative;\"><a href=\"#%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC\" aria-label=\"에러 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>에러 처리</h2>\n<p><strong>실패할 수 있는</strong> 동기적인 이펙트 있는 계산을 표현하려면 어떻게 해야 할까요?</p>\n<p>우리는 두 가지 이펙트가 필요합니다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">타입 생성자</th>\n<th align=\"left\">이펙트 (해석)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code class=\"language-text\">IO&lt;A></code></td>\n<td align=\"left\">비동기적인 이펙트 있는 계산</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">Either&lt;E, A></code></td>\n<td align=\"left\">실패할 수 있는 계산</td>\n</tr>\n</tbody>\n</table>\n<p>해결책은 <code class=\"language-text\">Either</code>를 <code class=\"language-text\">IO</code> 내부에 두는 것입니다. 이것은 <code class=\"language-text\">IOEither</code> 타입으로 이어집니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IOEither<span class=\"token operator\">&lt;</span><span class=\"token constant\">E</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">IO</span><span class=\"token operator\">&lt;</span>Either<span class=\"token operator\">&lt;</span><span class=\"token constant\">E</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">>></span></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">IOEither&lt;E, A></code> 타입의 값을 “실행”할 때 <code class=\"language-text\">Left</code>가 있으면 <code class=\"language-text\">E</code> 타입의 오류로 인해 계산이 실패했음을 의미하고 그렇지 않으면 <code class=\"language-text\">Right</code>를 얻습니다. 이는 <code class=\"language-text\">A</code> 타입의 값으로 계산이 성공했음을 의미합니다.</p>\n<h3 id=\"예시-파일-읽기\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-%ED%8C%8C%EC%9D%BC-%EC%9D%BD%EA%B8%B0\" aria-label=\"예시 파일 읽기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 (파일 읽기)</h3>\n<p><code class=\"language-text\">fs.readFileSync</code>가 예외를 발생시킬 수 있음므로 <code class=\"language-text\">tryCatch</code> 헬퍼를 사용하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">tryCatch<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">E</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">f</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">A</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> IOEither<span class=\"token operator\">&lt;</span><span class=\"token constant\">E</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span></code></pre></div>\n<p>여기서 <code class=\"language-text\">f</code>는 오류(<code class=\"language-text\">tryCatch</code>에 의해 자동으로 포착 됨)를 던지거나 <code class=\"language-text\">A</code> 타입의 값을 반환하는 썽크입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">{</span> IOEither <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/IOEither'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> toError <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Either'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> tryCatch <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/IOEither'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">'fs'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> readFileSync <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IOEither<span class=\"token operator\">&lt;</span>Error<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">tryCatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> toError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => left(Error: ENOENT: no such file or directory, open 'foo')</span>\n<span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>__filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => right(...)</span></code></pre></div>\n<h2 id=\"lifiting\" style=\"position:relative;\"><a href=\"#lifiting\" aria-label=\"lifiting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lifiting</h2>\n<p><code class=\"language-text\">fp-ts/lib/IOEither</code> 모듈은 <code class=\"language-text\">IOEither</code> 타입의 값을 생성 할 수 있는 다른 헬퍼 함수를 제공하며, 이를 집합적으로 <strong>lifting 함수</strong>라고 합니다.</p>\n<p>요약은 아래와 같습니다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">시작 값</th>\n<th>lifting 함수</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code class=\"language-text\">IO&lt;E></code></td>\n<td><code class=\"language-text\">leftIO: &lt;E, A>(ml: IO&lt;E>) => IOEither&lt;E, A></code></td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">E</code></td>\n<td><code class=\"language-text\">left: &lt;E, A>(e: E) => IOEither&lt;E, A></code></td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">Either&lt;E, A></code></td>\n<td><code class=\"language-text\">fromEither: &lt;E, A>(ma: Either&lt;E, A>) => IOEither&lt;E, A></code></td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">A</code></td>\n<td><code class=\"language-text\">right: &lt;E, A>(a: A) => IOEither&lt;E, A></code></td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">IO&lt;A></code></td>\n<td><code class=\"language-text\">rightIO: &lt;E, A>(ma: IO&lt;A>) => IOEither&lt;E, A></code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"예시-임의의-파일을-읽기\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-%EC%9E%84%EC%9D%98%EC%9D%98-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%9D%BD%EA%B8%B0\" aria-label=\"예시 임의의 파일을 읽기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 (임의의 파일을 읽기)</h3>\n<p>3개 파일 <code class=\"language-text\">1.txt</code>, <code class=\"language-text\">2.txt</code>, <code class=\"language-text\">3.txt</code> 중 하나의 내용을 무작위로 읽는다고 가정해 보겠습니다.</p>\n<p><code class=\"language-text\">randomInt: (low: number, high: number) => IO&lt;number></code> 함수는 닫힌 범위 <code class=\"language-text\">[low, high]</code>에 균일하게 분포된 임의의 정수를 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> randomInt <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/Random'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위에 정의된 <code class=\"language-text\">readFileSync</code> 함수로 <code class=\"language-text\">randomInt</code>를 연결할 수 있습니다.</p>\n<blockquote>\n<p>원문에서는 <code class=\"language-text\">ioEither.chain</code>을 사용하라고 작성되어 있지만, 최신 버전의 fp-ts에서는 deprecated 되어 있으며 <a href=\"https://gcanti.github.io/fp-ts/modules/IOEither.ts.html#chain\"><code class=\"language-text\">IOEither/chain</code></a>을 사용하면 됩니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> chain <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'fp-ts/lib/IOEither'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> randomFile <span class=\"token operator\">=</span> <span class=\"token function\">chain</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=></span> <span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>__dirname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>n<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.txt</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">randomInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 정적 오류</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>타입이 맞지 않습니다. <code class=\"language-text\">randomInt</code>는 <code class=\"language-text\">IO</code> 컨텍스트에서 실행되고 <code class=\"language-text\">readFileSync</code>는 <code class=\"language-text\">IOEither</code> 컨텍스트에서 실행됩니다.</p>\n<p>그러나 <code class=\"language-text\">rightIO</code>를 사용하여 <code class=\"language-text\">randomInt</code>를 <code class=\"language-text\">IOEither</code> 컨텍스트로 들어 올릴 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> randomFile <span class=\"token operator\">=</span> <span class=\"token function\">chain</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=></span> <span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>__dirname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>n<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.txt</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">rightIO</span><span class=\"token punctuation\">(</span><span class=\"token function\">randomInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"fp-ts로 Typescript 함수형 프로그래밍 시작하기 10 (IO)","date":"June 20, 2021","thumbnail":null}}},"pageContext":{"slug":"/TypeScript/2021-06-20-fp-ts-10/","previous":{"fields":{"slug":"/TypeScript/2021-06-12-fp-ts-9/"},"frontmatter":{"title":"fp-ts로 Typescript 함수형 프로그래밍 시작하기 9 (Either vs Validation)","category":"TypeScript","draft":false}},"next":{"fields":{"slug":"/TypeScript/2021-07-05-fp-ts-11/"},"frontmatter":{"title":"fp-ts로 Typescript 함수형 프로그래밍 시작하기 11 (Reader)","category":"TypeScript","draft":false}}}},"staticQueryHashes":["3001444076","3128451518"]}