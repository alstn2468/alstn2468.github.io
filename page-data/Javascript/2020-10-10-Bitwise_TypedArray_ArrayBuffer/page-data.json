{"componentChunkName":"component---src-templates-blog-post-js","path":"/Javascript/2020-10-10-Bitwise_TypedArray_ArrayBuffer","result":{"data":{"site":{"siteMetadata":{"title":"Minsu's Dev Log","author":"Minsu Kim","siteUrl":"https://alstn2468.github.io","comment":{"disqusShortName":"","utterances":"alstn2468/alstn2468.github.io"},"sponsor":{"buyMeACoffeeId":"eMLdEwU"}}},"markdownRemark":{"id":"7d9be4ba-2136-55bf-b775-47e1bafb26db","excerpt":"33-js-concepts를 스터디하며 정리한 포스트 입니다. 비트 연산자 자바스크립트는 아래의 7가지의 비트 연산자를 지원한다. 연산자 이름 설명 & AND 양쪽의 비트가 모두 1인 비트만 1로 설정한다. | OR 양쪽 비트 중 하나가 1이면 비트를 1로 설정한다. ^ XOR 양쪽 비트 중 하나만 1일 경우 비트를 1로 설정한다. ~ NOT 모든 비트를 반전시킨다. << Zero fill left shift 오른쪽에 0을 넣어 왼쪽으로 이동하고 가장 왼쪽 비트를 버립니다. >> Signed…","html":"<p><a href=\"https://github.com/leonardomso/33-js-concepts\">33-js-concepts</a>를 스터디하며 정리한 포스트 입니다.</p>\n<h2 id=\"비트-연산자\" style=\"position:relative;\"><a href=\"#%EB%B9%84%ED%8A%B8-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"비트 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비트 연산자</h2>\n<p>자바스크립트는 아래의 7가지의 <strong>비트 연산자</strong>를 지원한다.<br/></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">연산자</th>\n<th align=\"center\">이름</th>\n<th align=\"center\">설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">&#x26;</td>\n<td align=\"center\">AND</td>\n<td align=\"center\">양쪽의 비트가 모두 1인 비트만 1로 설정한다.</td>\n</tr>\n<tr>\n<td align=\"center\">|</td>\n<td align=\"center\">OR</td>\n<td align=\"center\">양쪽 비트 중 하나가 1이면 비트를 1로 설정한다.</td>\n</tr>\n<tr>\n<td align=\"center\">^</td>\n<td align=\"center\">XOR</td>\n<td align=\"center\">양쪽 비트 중 하나만 1일 경우 비트를 1로 설정한다.</td>\n</tr>\n<tr>\n<td align=\"center\">~</td>\n<td align=\"center\">NOT</td>\n<td align=\"center\">모든 비트를 반전시킨다.</td>\n</tr>\n<tr>\n<td align=\"center\">&#x3C;&#x3C;</td>\n<td align=\"center\">Zero fill left shift</td>\n<td align=\"center\">오른쪽에 0을 넣어 왼쪽으로 이동하고 가장 왼쪽 비트를 버립니다.</td>\n</tr>\n<tr>\n<td align=\"center\">>></td>\n<td align=\"center\">Signed right shift</td>\n<td align=\"center\">가장 왼쪽 비트를 왼쪽에 넣고 가장 오른쪽 비트를 버립니다.</td>\n</tr>\n<tr>\n<td align=\"center\">>>></td>\n<td align=\"center\">Zero fill right shift</td>\n<td align=\"center\">왼쪽에 0을 넣어 오른쪽으로 이동하고 가장 오른쪽 비트를 버립니다.</td>\n</tr>\n</tbody>\n</table>\n<p>자바스크립트에서 10진수를 2진수 문자열로 변환하기 위해서는 <code class=\"language-text\">toString(2)</code>와 같이 사용한다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 101</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1111101000</span></code></pre></div>\n<p>2진수 문자열을 10진수 숫자로 변환하기 위해서는 <code class=\"language-text\">parseInte(\"2진수 문자열\", 2)</code>와 같이 사용한다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'101'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'10'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1111101000'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1000</span></code></pre></div>\n<h3 id=\"비트연산자-사용-예시\" style=\"position:relative;\"><a href=\"#%EB%B9%84%ED%8A%B8%EC%97%B0%EC%82%B0%EC%9E%90-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%8B%9C\" aria-label=\"비트연산자 사용 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비트연산자 사용 예시</h3>\n<h4 id=\"-연산자\" style=\"position:relative;\"><a href=\"#-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\" 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>&#x26; 연산자</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a.toString(2): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// a.toString(2): 101</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">b.toString(2): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// b.toString(2): 01</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a &amp; b: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a <span class=\"token operator\">&amp;</span> b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// a &amp; b: 0</span></code></pre></div>\n<p><code class=\"language-text\">&amp;</code> 연산자는 양쪽의 비트가 모두 1인 비트만 1로 설정한다.<br/></p>\n<h4 id=\"-연산자-1\" style=\"position:relative;\"><a href=\"#-%EC%97%B0%EC%82%B0%EC%9E%90-1\" aria-label=\" 연산자 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>| 연산자</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a.toString(2): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// a.toString(2): 101</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">b.toString(2): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// b.toString(2): 01</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a | b: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a <span class=\"token operator\">|</span> b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// a | b: 7</span></code></pre></div>\n<p><code class=\"language-text\">|</code> 연산자는 양쪽 비트 중 하나가 1이면 비트를 1로 설정한다.<br/></p>\n<h4 id=\"-연산자-2\" style=\"position:relative;\"><a href=\"#-%EC%97%B0%EC%82%B0%EC%9E%90-2\" aria-label=\" 연산자 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>^ 연산자</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a.toString(2): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// a.toString(2): 101</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">b.toString(2): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// b.toString(2): 01</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a ^ b: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a <span class=\"token operator\">^</span> b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// a ^ b: 7</span></code></pre></div>\n<p><code class=\"language-text\">^</code> 연산자는 양쪽 비트 중 하나만 1일 경우 비트를 1로 설정한다.<br/></p>\n<h4 id=\"-연산자-3\" style=\"position:relative;\"><a href=\"#-%EC%97%B0%EC%82%B0%EC%9E%90-3\" aria-label=\" 연산자 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>~ 연산자</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a.toString(2): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// a.toString(2): 101</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">~a: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token operator\">~</span>a<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ~a: -6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(~a).toString(2): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// (~a).toString(2): -110</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">b.toString(2): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// b.toString(2): 01</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">~b: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token operator\">~</span>b<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ~b: -3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(~b).toString(2): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// (~b).toString(2): -11</span></code></pre></div>\n<p><code class=\"language-text\">~</code> 연산자는 모든 비트를 반전시킨다.<br/>\n자바스크립트는 <strong>가장 왼쪽 비트를 빼기 부호</strong>로 사용하는 <strong>32비트 부호있는 정수</strong>를 사용한다.<br/>\n따라서 숫자 5의 2진수인 <code class=\"language-text\">101</code>에 <code class=\"language-text\">~</code>연산자를 사용하면 2가 아닌 -6을 반환한다.<br/></p>\n<h4 id=\"-연산자-4\" style=\"position:relative;\"><a href=\"#-%EC%97%B0%EC%82%B0%EC%9E%90-4\" aria-label=\" 연산자 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>&#x3C;&#x3C; 연산자</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a.toString(2): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// a.toString(2): 101</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a &lt;&lt; 1: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// a &lt;&lt; 1: 10</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(a &lt;&lt; 1).toString(2): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// (a &lt;&lt; 1).toString(2): 1010</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a &lt;&lt; 2: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// a &lt;&lt; 2: 20</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(a &lt;&lt; 2).toString(2): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// (a &lt;&lt; 2).toString(2): 10100</span></code></pre></div>\n<p><code class=\"language-text\">&lt;&lt;</code> 연산자는 오른쪽에 0을 넣어 왼쪽으로 이동하고 가장 왼쪽 비트를 버립니다.<br/></p>\n<h4 id=\"-연산자-5\" style=\"position:relative;\"><a href=\"#-%EC%97%B0%EC%82%B0%EC%9E%90-5\" aria-label=\" 연산자 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>>> 연산자</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a.toString(2): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// a.toString(2): -101</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a >> 1: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// a >> 1: 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(a >> 1).toString(2): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// (a >> 1).toString(2): -11</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a >> 2: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a <span class=\"token operator\">>></span> <span class=\"token number\">2</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// a >> 2: -2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(a >> 2).toString(2): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// (a >> 2).toString(2): -10</span></code></pre></div>\n<p><code class=\"language-text\">>></code> 연산자는 가장 왼쪽 비트를 왼쪽에 넣고 가장 오른쪽 비트를 버립니다.<br/></p>\n<h4 id=\"-연산자-6\" style=\"position:relative;\"><a href=\"#-%EC%97%B0%EC%82%B0%EC%9E%90-6\" aria-label=\" 연산자 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>>>> 연산자</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a.toString(2): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// a.toString(2): -101</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a >>> 1: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a <span class=\"token operator\">>>></span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// a >>> 1: 2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(a >>> 1).toString(2): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">>>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// (a >>> 1).toString(2): 10</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a >>> 2: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>a <span class=\"token operator\">>>></span> <span class=\"token number\">2</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// a >>> 2: 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(a >>> 2).toString(2): </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">>>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// (a >>> 2).toString(2): 1</span></code></pre></div>\n<p><code class=\"language-text\">>></code> 연산자는 왼쪽에 0을 넣어 오른쪽으로 이동하고 가장 오른쪽 비트를 버립니다.<br/></p>\n<h2 id=\"비트-연산자-활용하기\" style=\"position:relative;\"><a href=\"#%EB%B9%84%ED%8A%B8-%EC%97%B0%EC%82%B0%EC%9E%90-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"비트 연산자 활용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비트 연산자 활용하기</h2>\n<p>아래와 같이 4개의 독립적인 <code class=\"language-text\">true</code>, <code class=\"language-text\">false</code> 변수들을 갖는 객체들이 존재할 수 있다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">d</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>각 속성의 존재를 확인하고 저장하는 가장 좋은 방법이 무엇일지 생각해 볼 수 있을 것이다.<br/>\n이 속성들의 아주 많은 조합을 체크해야될 필요가 있고 앞으로 새로운 속성이 추가될 수도 있다.<br/>\n이런 문제를 해결하기 위해서 아래의 두가지의 확실한 방법이 존재한다.<br/></p>\n<h3 id=\"1-모든-가능한-경우-객체를-만들어-비교하기\" style=\"position:relative;\"><a href=\"#1-%EB%AA%A8%EB%93%A0-%EA%B0%80%EB%8A%A5%ED%95%9C-%EA%B2%BD%EC%9A%B0-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4-%EB%B9%84%EA%B5%90%ED%95%98%EA%B8%B0\" aria-label=\"1 모든 가능한 경우 객체를 만들어 비교하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 모든 가능한 경우 객체를 만들어 비교하기</h3>\n<p>아래의 <code class=\"language-text\">hasAandB</code> 객체와 같이 확인해야 할 조건의 모든 객체들을 생성해 비교할 수 있을 것이다.<br/>\n아래처럼 객체를 이용해 확인할 경우 a, b 속성 외에 다른 속성을 가지고 있는지 확인할 수 없습니다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> hasAandB <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">d</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isEqual</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> hasAandB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// obj가 a, b 뿐만 아니라 c, d 또한 가지고 있을 수 있다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다만 이렇게 모든 객체들을 만들어 확인을 해야할 경우 4개의 속성이 존재할 때 16개의 객체를 생성해야한다.<br/>\n또한 확인해야할 객체에 새로운 속성이 추가될 경우 비교할 객체를 2배로 늘려야하는 문제가 발생한다.<br/></p>\n<h3 id=\"2-조건문에서-각-속성을-확인하기\" style=\"position:relative;\"><a href=\"#2-%EC%A1%B0%EA%B1%B4%EB%AC%B8%EC%97%90%EC%84%9C-%EA%B0%81-%EC%86%8D%EC%84%B1%EC%9D%84-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\" aria-label=\"2 조건문에서 각 속성을 확인하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 조건문에서 각 속성을 확인하기</h3>\n<p>아래와 같이 조건문에서 직접 각 속성의 존재 여부를 확인할 수도 있습니다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> obj<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> obj<span class=\"token punctuation\">[</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// obj가 a와 b 속성만 가지고 있는지 확인할 수 있다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 이런 방식의 코드는 처음 코드를 작성할때 부터 유지보수할 때까지 오류가 발생하기 쉽다.<br/>\n그리고 객체에 어떤 속성을 추가하게 될 경우 엄청나게 많은 작업이 필요하게 될 것이다.<br/></p>\n<h3 id=\"비트-연산자를-활용해-문제-해결하기\" style=\"position:relative;\"><a href=\"#%EB%B9%84%ED%8A%B8-%EC%97%B0%EC%82%B0%EC%9E%90%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%B4-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0\" aria-label=\"비트 연산자를 활용해 문제 해결하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비트 연산자를 활용해 문제 해결하기</h3>\n<p>자바스크립트의 모든 정수들은 <code class=\"language-text\">toString(2)</code>를 호출해 2진법으로 표기할 수 있다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token number\">3877494</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1110110010101001110110</span></code></pre></div>\n<p>아래와 같이 <code class=\"language-text\">&lt;&lt;</code> 비트 연산자는 10진법 정수를 2진법의 규칙에 맞게 증가시켜 줍니다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 100</span></code></pre></div>\n<p>이와 같이 비트연산의 전반을 고려해 자바스크립트는 2진법에서 값을 더하거나 빼거나 비교할 수 있다.<br/>\n위의 문제에서 각 객체의 속성을 4비트 숫자 내부에 저장할 수 있게 된다는 사실을 알 수 있게 있다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> hasAandB <span class=\"token operator\">=</span> <span class=\"token string\">'0011'</span>\n<span class=\"token keyword\">const</span> hasAandC <span class=\"token operator\">=</span> <span class=\"token string\">'0101'</span>\n\n<span class=\"token comment\">// 더 많은 경우의 수</span></code></pre></div>\n<p>각 속성이 <code class=\"language-text\">true</code>일 때는 1로 <code class=\"language-text\">false</code>일 때는 0으로 표기를 할 수 있습니다.<br/>\n중요한 점은 첫번째 속성인 <code class=\"language-text\">a</code>만 <code class=\"language-text\">true</code>인 경우의 값은 <code class=\"language-text\">\"0001\"</code>과 같이 표기가 된다는 점이다.<br/>\n<strong>이진법에서 값의 증가는 오른쪽에서 왼쪽</strong>으로 간다는 것을 염두에 두어야 한다.<br/>\n제시된 문제를 해결하기 위해 <code class=\"language-text\">&lt;&lt;</code> 비트 연산자를 이용해 각 속성을 갖는지 확인하는 상수를 정의한다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">d</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">HAS_A</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 0001</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">HAS_B</span> <span class=\"token operator\">=</span> <span class=\"token constant\">HAS_A</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 0010</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">HAS_C</span> <span class=\"token operator\">=</span> <span class=\"token constant\">HAS_B</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 0100</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">HAS_D</span> <span class=\"token operator\">=</span> <span class=\"token constant\">HAS_C</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 1000</span></code></pre></div>\n<p>그 후 결과를 담을 변수를 선언하고 초기값으로 <code class=\"language-text\">0</code>을 대입한다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span></code></pre></div>\n<p>이제 각 속성을 수동으로 확인하고 조건문 하나에 각 속성을 확인해 결과에 추가해 줍니다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  result <span class=\"token operator\">=</span> result <span class=\"token operator\">|</span> <span class=\"token constant\">HAS_A</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  result <span class=\"token operator\">=</span> result <span class=\"token operator\">|</span> <span class=\"token constant\">HAS_B</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  result <span class=\"token operator\">=</span> result <span class=\"token operator\">|</span> <span class=\"token constant\">HAS_C</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  result <span class=\"token operator\">=</span> result <span class=\"token operator\">|</span> <span class=\"token constant\">HAS_D</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1010</span></code></pre></div>\n<p>최종 결과를 저장한 <code class=\"language-text\">result</code> 변수는 이제 <code class=\"language-text\">1010</code>이라는 값을 갖게 된다.<br/>\n<code class=\"language-text\">obj</code> 객체가 두번째, 네번째 속성을 가지고 있기 때문에 뒤에서 두번째와 네번째 비트가 1이 된다.<br/>\n<code class=\"language-text\">|</code> 연산자을 이용해 생성된 결과에서 어떤 속성을 갖는지 확인하기 위해서 <code class=\"language-text\">&amp;</code> 연산자를 사용할 수 있다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">&amp;</span> <span class=\"token constant\">HAS_A</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// (1010 &amp; 0001) = 0000 -> False</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">&amp;</span> <span class=\"token constant\">HAS_B</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// (1010 &amp; 0010) = 0010 -> True</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>또한 특정 속성중 하나를 가지고 있는지 확인할 수도 있다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">HAS_A</span> <span class=\"token operator\">|</span> <span class=\"token constant\">HAS_B</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// (1010 &amp; (0001 | 0010)) = (1010 &amp; 0011) = 0010 -> True</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">HAS_A</span> <span class=\"token operator\">|</span> <span class=\"token constant\">HAS_C</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// (1010 &amp; (0001 | 0100)) = (1010 &amp; 0101) = 0000 -> False</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아래와 같이 조건문에 명시된 속성들만 가지고 있는지 확인할 수 있다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">HAS_B</span> <span class=\"token operator\">|</span> <span class=\"token constant\">HAS_D</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1010 == (0010 | 1000) -> 1010 == 1010 -> True</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">HAS_B</span> <span class=\"token operator\">|</span> <span class=\"token constant\">HAS_C</span> <span class=\"token operator\">|</span> <span class=\"token constant\">HAS_D</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 1010 == (0010 | 0100 | 1000) -> 1010 == 1110 -> False</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>비트 연산자를 사용해 <code class=\"language-text\">true</code>, <code class=\"language-text\">false</code>로 이루어진 객체의 속성을 효율적으로 저장하고 비교할 수 있다.<br/>\n또한 비트 연산자를 이용하면서 코드를 업데이트하거나 유지보수하기 조금 더 간편해질 것이다.<br/></p>\n<h2 id=\"형식화-배열\" style=\"position:relative;\"><a href=\"#%ED%98%95%EC%8B%9D%ED%99%94-%EB%B0%B0%EC%97%B4\" aria-label=\"형식화 배열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>형식화 배열</h2>\n<p>자바스크립트의 형식화 배열(Typed Array)은 일반적인 배열(Array)와 몇 가지 차이가 있는 유사 배열 객체다.<br/></p>\n<ul>\n<li>형식화 배열의 원소는 모두 숫자다.</li>\n<li>생성자에 숫자의 타입과 크기를 사용해 형식화 배열을 생성한다.</li>\n<li>형식화 배열은 크기가 고정된다.</li>\n<li>배열이 생성된 시점에 형식화 배열의 원소들은 항상 0으로 초기화 된다.</li>\n</ul>\n<p>생성할 수 있는 형식화 배열의 종류는 아래와 같다.<br/></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">생성자</th>\n<th align=\"left\">범위</th>\n<th align=\"left\">원소의 타입</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Int8Array()</td>\n<td align=\"left\">-128 ~ 127</td>\n<td align=\"left\">부호 있는 8비트 정수</td>\n</tr>\n<tr>\n<td align=\"left\">Uint8Array()</td>\n<td align=\"left\">0 ~ 255</td>\n<td align=\"left\">부호 없는 8비트 정수</td>\n</tr>\n<tr>\n<td align=\"left\">Int16Array()</td>\n<td align=\"left\">-32,768 ~ 32,767</td>\n<td align=\"left\">부호 있는 16비트 정수</td>\n</tr>\n<tr>\n<td align=\"left\">Uint16Array()</td>\n<td align=\"left\">0 ~ 65,535</td>\n<td align=\"left\">부호 없는 16비트 정수</td>\n</tr>\n<tr>\n<td align=\"left\">Int32Array()</td>\n<td align=\"left\">-2,147,483,648 ~ 2,147,483,647</td>\n<td align=\"left\">부호 있는 32비트 정수</td>\n</tr>\n<tr>\n<td align=\"left\">Uint32Array()</td>\n<td align=\"left\">0 ~ 4,294,967,295</td>\n<td align=\"left\">부호 없는 32비트 정수</td>\n</tr>\n<tr>\n<td align=\"left\">Float32Array()</td>\n<td align=\"left\">-3.4 x 10^38 ~ 3.4 x 10^38</td>\n<td align=\"left\">32비트 부동 소수점 값 (실수)</td>\n</tr>\n<tr>\n<td align=\"left\">Float64Array()</td>\n<td align=\"left\">-1.79 x 10^308 ~ 1.79 x 10^308</td>\n<td align=\"left\">64비트 부동 소수점 값 (실수)</td>\n</tr>\n</tbody>\n</table>\n<p>형식화 베열을 생성할 때는 생성자에 배열의 크기를 전달하거나 배열 또는 타입 배열을 전달해 원소를 초기화 한다.<br/>\n형식화 배열을 사용하면 일반 배열에 비하여 <strong>실행 시간과 메모리 사용 측면에서 효율적</strong>일 수 있다.<br/></p>\n<h2 id=\"버퍼배열\" style=\"position:relative;\"><a href=\"#%EB%B2%84%ED%8D%BC%EB%B0%B0%EC%97%B4\" aria-label=\"버퍼배열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>버퍼(배열)</h2>\n<p>버퍼는 길이가 정해져 있는 이진 데이터를 저장하며 데이터 부분을 나타낸다.<br/>\n형식화 배열의 버퍼를 생성하는 방법은 아래와 같으며 생성자의 매개변수는 <strong>버퍼의 바이트 크기</strong>다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위의 <code class=\"language-text\">ArrayBuffer</code>로 생성된 <code class=\"language-text\">buffer</code>는 8바이트 크기의 버퍼다.<br/>\n버퍼는 데이터에 직접 접근할 수 있는 방법을 저장하지 않으며 접근하기 위해서는 뷰를 사용해야 한다.<br/></p>\n<h3 id=\"버퍼와-뷰\" style=\"position:relative;\"><a href=\"#%EB%B2%84%ED%8D%BC%EC%99%80-%EB%B7%B0\" aria-label=\"버퍼와 뷰 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>버퍼와 뷰</h3>\n<p>뷰는 아래와 같이 <code class=\"language-text\">DataView</code> 생성자를 이용해 생성하며 버퍼를 매개변수로 받는다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> view <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataView</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">DataView</code>는 메모리에 접근해 다양한 형태의 데이터를 읽고 쓸 수 있다.<br/></p>\n<h3 id=\"dataview의-데이터를-설정하는-set-메소드\" style=\"position:relative;\"><a href=\"#dataview%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%84%A4%EC%A0%95%ED%95%98%EB%8A%94-set-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"dataview의 데이터를 설정하는 set 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DataView의 데이터를 설정하는 set 메소드</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">메소드 이름</th>\n<th align=\"left\">메소드 설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">setInt8</td>\n<td align=\"left\">8비트 크기의 값을 설정한다.</td>\n</tr>\n<tr>\n<td align=\"left\">setUint8</td>\n<td align=\"left\">8비트 크기의 부호없는 값을 설정한다.</td>\n</tr>\n<tr>\n<td align=\"left\">setInt16</td>\n<td align=\"left\">16비트 크기의 값을 설정한다.</td>\n</tr>\n<tr>\n<td align=\"left\">setUint16</td>\n<td align=\"left\">16비트 크기의 부호없는 값을 설정한다.</td>\n</tr>\n<tr>\n<td align=\"left\">setInt32</td>\n<td align=\"left\">32비트 크기의 값을 설정한다.</td>\n</tr>\n<tr>\n<td align=\"left\">setUint32</td>\n<td align=\"left\">32비트 크기의 부호없는 값을 설정한다.</td>\n</tr>\n<tr>\n<td align=\"left\">setFloat32</td>\n<td align=\"left\">32비트 크기의 부동 소수점 값을 설정한다.</td>\n</tr>\n<tr>\n<td align=\"left\">setFloat64</td>\n<td align=\"left\">64비트 크기의 부동 소수점 값을 설정한다.</td>\n</tr>\n</tbody>\n</table>\n<p><code class=\"language-text\">setInt8</code>과 같이 값을 설정하는 메서드는 두 개의 매개변수를 받는다.<br/>\n첫 번째 매개변수는 값을 설정하는 버퍼의 위치 두번째 매개변수는 설정되는 값이다.<br/></p>\n<h3 id=\"dataview의-데이터를-읽는-get-메소드\" style=\"position:relative;\"><a href=\"#dataview%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%9D%BD%EB%8A%94-get-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\"dataview의 데이터를 읽는 get 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DataView의 데이터를 읽는 get 메소드</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">메소드 이름</th>\n<th align=\"left\">메소드 설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">getInt8</td>\n<td align=\"left\">8비트 크기의 값을 반환한다.</td>\n</tr>\n<tr>\n<td align=\"left\">getUint8</td>\n<td align=\"left\">8비트 크기의 부호없는 값을 반환한다.</td>\n</tr>\n<tr>\n<td align=\"left\">getInt16</td>\n<td align=\"left\">16비트 크기의 값을 반환한다.</td>\n</tr>\n<tr>\n<td align=\"left\">getUint16</td>\n<td align=\"left\">16비트 크기의 부호없는 값을 반환한다.</td>\n</tr>\n<tr>\n<td align=\"left\">getInt32</td>\n<td align=\"left\">32비트 크기의 값을 반환한다.</td>\n</tr>\n<tr>\n<td align=\"left\">getUint32</td>\n<td align=\"left\">32비트 크기의 부호없는 값을 반환한다.</td>\n</tr>\n<tr>\n<td align=\"left\">getFloat32</td>\n<td align=\"left\">32비트 크기의 부동 소수점 값을 반환한다.</td>\n</tr>\n<tr>\n<td align=\"left\">getFloat64</td>\n<td align=\"left\">64비트 크기의 부동 소수점 값을 반환한다.</td>\n</tr>\n</tbody>\n</table>\n<p><code class=\"language-text\">getInt8</code>과 같은 값을 반환하는 메서드는 읽을 버퍼의 위치를 의미하는 하나의 매개변수를 받는다.<br/></p>\n<p><code class=\"language-text\">ArrayBuffer</code>를 이용해 자바스크립트에서도 메모리를 수동적으로 관리할 수 있게 된다.<br/>\n하지만 메모리를 수동 관리할 만큼의 성능 저하가 발생하지 않고 수동 관리를 해도 오히려 성능이 나빠질 수 있다.<br/>\n상황에 맞게 메모리를 수동관리하게 된다면 성능을 향상 시킬 수 있고 그때 <code class=\"language-text\">ArrayBuffer</code>를 사용하면 된다.<br/></p>","frontmatter":{"title":"비트 연산자, 형식화 배열, 버퍼(배열)","date":"October 10, 2020","thumbnail":null}}},"pageContext":{"slug":"/Javascript/2020-10-10-Bitwise_TypedArray_ArrayBuffer/","previous":{"fields":{"slug":"/Retrospective/2020-10-05-개발자로서-첫-이직-회고/"},"frontmatter":{"title":"개발자로서 첫 이직 회고","category":"Retrospective","draft":false}},"next":{"fields":{"slug":"/ReScript/2020-12-15-ReScriptTutorialPart1/"},"frontmatter":{"title":"ReScript 공식문서로 ReScript 훑어보기 (1)","category":"ReScript","draft":false}}}},"staticQueryHashes":["3001444076","3128451518"]}