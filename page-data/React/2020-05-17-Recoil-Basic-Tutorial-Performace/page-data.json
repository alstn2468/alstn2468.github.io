{"componentChunkName":"component---src-templates-blog-post-js","path":"/React/2020-05-17-Recoil-Basic-Tutorial-Performace","result":{"data":{"site":{"siteMetadata":{"title":"Minsu's Dev Log","author":"Minsu Kim","siteUrl":"https://alstn2468.github.io","comment":{"disqusShortName":"","utterances":"alstn2468/alstn2468.github.io"},"sponsor":{"buyMeACoffeeId":"eMLdEwU"}}},"markdownRemark":{"id":"fd372b16-7eef-58bd-b5de-d296aa7b78c7","excerpt":"Recoil 공식 문서 중 Basic Tutorial Bonus: Performance를 번역한 포스트입니다. Bonus : 성능 우리가 구현한 기존의 것은 완벽하게 유요하다.\n하지만 우리 앱이 작은 토이 프로젝트에서 백만줄짜리 기업 프로그램으로 발전하면서 고려해야 할 중요한 성능적 측면이 있다. 우리의 컴포넌트들을 다시 랜더링 시키는 원인이 무엇인지 생각해보자. <TodoList /> 이 컴포넌트는 ‘todoListState’와 ‘todoListFilterState’에 의존하는 selector…","html":"<p><a href=\"https://recoiljs.org/\">Recoil 공식 문서</a> 중 <a href=\"\">Basic Tutorial Bonus: Performance</a>를 번역한 포스트입니다.<br/></p>\n<h2 id=\"bonus--성능\" style=\"position:relative;\"><a href=\"#bonus--%EC%84%B1%EB%8A%A5\" aria-label=\"bonus  성능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bonus : 성능</h2>\n<p>우리가 구현한 기존의 것은 완벽하게 유요하다.<br/>\n하지만 우리 앱이 작은 토이 프로젝트에서 백만줄짜리 기업 프로그램으로 발전하면서 고려해야 할 중요한 성능적 측면이 있다.<br/></p>\n<p>우리의 컴포넌트들을 다시 랜더링 시키는 원인이 무엇인지 생각해보자.<br/></p>\n<h2 id=\"todolist-\" style=\"position:relative;\"><a href=\"#todolist-\" aria-label=\"todolist  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>&#x3C;TodoList /></h2>\n<p>이 컴포넌트는 ‘todoListState’와 ‘todoListFilterState’에 의존하는 selector인 ‘filteredToListState’를 구독한다.<br/>\n이는 다음 상태가 변경될 때 ‘TodoList’가 다시 렌더링됨을 의미한다.<br/></p>\n<ul>\n<li><code class=\"language-text\">todoListState</code></li>\n<li><code class=\"language-text\">todoListFilterState</code></li>\n</ul>\n<h2 id=\"todoitem-\" style=\"position:relative;\"><a href=\"#todoitem-\" aria-label=\"todoitem  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>&#x3C;TodoItem /></h2>\n<p>이 컴포넌트는 ‘todoListState’를 구독한다.<br/>\n그래서 ‘todoListState’가 바뀔 때나 부모 컴포넌트인 ‘todoList’가 다시 렌더링 될 때 다시 렌더링 된다.<br/></p>\n<h2 id=\"todoitemcreator-\" style=\"position:relative;\"><a href=\"#todoitemcreator-\" aria-label=\"todoitemcreator  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>&#x3C;TodoItemCreator /></h2>\n<p>이 컴포넌트는 Recoil 상태(“SetRecoilState()“가 구독을 생성하지 않음)를 구독하지 않는다.<br/>\n그래서 부모 컴포넌트인 <code class=\"language-text\">TodoList</code>가 다시 렌더링 될 때만 다시 렌더링 된다.<br/></p>\n<h2 id=\"todolistfilters-\" style=\"position:relative;\"><a href=\"#todolistfilters-\" aria-label=\"todolistfilters  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>&#x3C;TodoListFilters /></h2>\n<p>이 컴포넌트는 ‘todoListFilterState’를 구독한다.<br/>\n그래서 해당 상태가 변경되거나 부모 컴포넌트인 ‘todoList’가 다시 렌더링될 때 다시 렌더링된다.<br/></p>\n<h2 id=\"todoliststats-\" style=\"position:relative;\"><a href=\"#todoliststats-\" aria-label=\"todoliststats  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>&#x3C;TodoListStats /></h2>\n<p>이 컴포넌트는 <code class=\"language-text\">filteredToListState</code>를 구독한다.<br/>\n그래서 해당 상태가 바뀌거나 부모 컴포넌트인 <code class=\"language-text\">TodoList</code>가 다시 렌더링 될 때마다 다시 렌더링 된다.<br/></p>\n<h2 id=\"개션될-여지\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%85%98%EB%90%A0-%EC%97%AC%EC%A7%80\" aria-label=\"개션될 여지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개션될 여지</h2>\n<p>기존 구현에는 몇 가지 단점이 있다.<br/>\n주로 <code class=\"language-text\">&lt;TodoList /></code>가 우리 모든 컴포넌트의 부모라는 점 때문에<br/>\n우리가 ‘todoListState’를 변경할 때마다 트리 전체를 다시 렌더링하고 있다는 점이 있다.<br/></p>\n<p>이상적인 경우에는 컴포넌트가 반드시 필요한 경우(화면에 표시되는 데이터가 변경된 경우)에만 다시 렌더링 될 수 있다.<br/></p>\n<h2 id=\"최적화-1-reactmemo\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EC%A0%81%ED%99%94-1-reactmemo\" aria-label=\"최적화 1 reactmemo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최적화 #1: React.memo()</h2>\n<p>하위 컴포넌트가 불필요하게 다시 렌더링되는 문제를 완화하기 위해<br/>\n우리는 그 컴포넌트에 전달된 <strong>props</strong>를 기반으로 컴포넌트를 기억하는 <a href=\"https://reactjs.org/docs/react-api.html#reactmemo\"><code class=\"language-text\">React.memo()</code></a>를 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> TodoItem <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> TodoItemCreator <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> TodoListFilters <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> TodoListStats <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그것은 <code class=\"language-text\">&lt;TodoItemCreator /></code>와 <code class=\"language-text\">&lt;TodoListFilters /></code>가 이것들의 부모 컴포넌트인 <code class=\"language-text\">&lt;TodoList /></code>가<br/>\n다시 렌더링 되는 반응에 의해 더 이상 다시 렌더링 되지 않도록 돕는다.<br/>\n그러나  <code class=\"language-text\">&lt;TodoItem /></code>와 <code class=\"language-text\">&lt;TodoListStats /></code>에는 여전히 개별적인 todo 아이템이 갖는 텍스트를 변경할 때<br/>\n새로운 <code class=\"language-text\">todoListFilterState</code>가 생성되면서 그것을 구독하는 <code class=\"language-text\">&lt;TodoItem /></code>와  <code class=\"language-text\">&lt;TodoListStats /></code>가 다시 렌더링되는 문제가 있다.<br/></p>\n<h2 id=\"최적화-2-atomfamily\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EC%A0%81%ED%99%94-2-atomfamily\" aria-label=\"최적화 2 atomfamily permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최적화 #2: atomFamily()</h2>\n<h2 id=\"상태의-모양을-다시-생각하기\" style=\"position:relative;\"><a href=\"#%EC%83%81%ED%83%9C%EC%9D%98-%EB%AA%A8%EC%96%91%EC%9D%84-%EB%8B%A4%EC%8B%9C-%EC%83%9D%EA%B0%81%ED%95%98%EA%B8%B0\" aria-label=\"상태의 모양을 다시 생각하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상태의 모양을 다시 생각하기</h2>\n<p>todo 리스트를 객체의 배열로 생각하는 것은 각각의 todo 아이템과 전체 todo 아이템 리스트 사이에 긴밀한 결합을 형성하기 때문에 문제가 있다.<br/></p>\n<p>이 문제를 해결하기 위해 우리는 <strong>정규화된 상태</strong>를 생각하며 상태의 모양을 다시 생각할 필요가 있다.<br/>\n우리의 todo 리스트 앱의 맥락에서 이것은 각각의 아이템에 대한 데이터와 별도로 아이템 ID 리스트를 저장하는 것을 의미한다.<br/></p>\n<blockquote>\n<p>어떻게 정규화된 상태에 대해 생각할 것인가에 대한 더 상세한 논의는 <a href=\"https://redux.js.org/recipes/structuring-reducers/normalizing-state-shape\">이 Redux 문서의 페이지</a>를 보면된다.</p>\n</blockquote>\n<p>이것은 궁극적으로 ‘todoListState’를 두 가지로 나눈다는 것을 의미한다.<br/></p>\n<ul>\n<li>todo 아이템의 ID를 갖는 배열</li>\n<li>아이템의 ID를 아이템의 데이터에 매핑</li>\n</ul>\n<p>다음과 같이 atom을 사용해서 todo 아이템 ID를 갖는 배열을 구현할 수 있다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> todoListItemIdsState <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">'todoListItemIdsState'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>아이템의 ID를 아이템의 데이터에 매핑하는 것을 구현하기 위해서 Recoil은 ID로 atom을 동적으로 매핑할 수 있는 유틸리티 매서드을 제공한다.<br/>\n이 유틸리티가 <a href=\"https://recoiljs.org/docs/api-reference/utils/atomFamily\"><code class=\"language-text\">atomFamily()</code></a>다.<br/></p>\n<h2 id=\"atomfamily\" style=\"position:relative;\"><a href=\"#atomfamily\" aria-label=\"atomfamily permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>atomFamily()</h2>\n<p>우리는 <code class=\"language-text\">atomFamily()</code> 함수를 이용한다.</p>\n<h2 id=\"실행-결과\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89-%EA%B2%B0%EA%B3%BC\" aria-label=\"실행 결과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행 결과</h2>\n<p>실제 작성한 코드는 <a href=\"https://github.com/alstn2468/Recoil_Tutorial/tree/master/BasicTutorial\">여기</a>에서 확인할 수 있습니다.<br/>\nBonus: Performance는 아직 배포되지 않은 문서입니다.<br/>\n추가적으로 내용이 추가되는 대로 확인 후 번역을 진행하겠습니다.<br/></p>","frontmatter":{"title":"Bonus: Performance","date":"May 17, 2020","thumbnail":null}}},"pageContext":{"slug":"/React/2020-05-17-Recoil-Basic-Tutorial-Performace/","previous":{"fields":{"slug":"/React/2020-05-16-Recoil-Basic-Tutorial-Selectors/"},"frontmatter":{"title":"Selectors","category":"React","draft":false}},"next":{"fields":{"slug":"/React/2020-05-17-Recoil-Core-Concepts/"},"frontmatter":{"title":"Recoil - Core Concepts","category":"React","draft":false}}}},"staticQueryHashes":["3001444076","3128451518"]}