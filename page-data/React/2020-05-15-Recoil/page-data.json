{"componentChunkName":"component---src-templates-blog-post-js","path":"/React/2020-05-15-Recoil","result":{"data":{"site":{"siteMetadata":{"title":"Minsu's Dev Log","author":"Minsu Kim","siteUrl":"https://alstn2468.github.io","comment":{"disqusShortName":"","utterances":"alstn2468/alstn2468.github.io"},"sponsor":{"buyMeACoffeeId":"eMLdEwU"}}},"markdownRemark":{"id":"6361bbaf-4089-5bc3-a1c5-3b97024522e1","excerpt":"Recoil 공식 문서 중 Getting Started를 번역한 포스트입니다. React 애플리케이션 생성하기 Recoil는 React를 위한 상태 관리 라이브러리다.\n따라서 Recoil를 사용하기 위해서는 React가 설치되어 있어야 한다.\nReact 애플리케이션을 시작하는 가장 쉽고 추천하는 방법은 Create React App을 사용하는 것이다. 는 npm 5.2+ 이상에서 함께 제공되는 패키지 실행 도구다.\n오래된 버전의 npm은 이 설명를 보면된다. Create React App…","html":"<p><a href=\"https://recoiljs.org/\">Recoil 공식 문서</a> 중 <a href=\"https://recoiljs.org/docs/introduction/getting-started\">Getting Started</a>를 번역한 포스트입니다.</p>\n<h2 id=\"react-애플리케이션-생성하기\" style=\"position:relative;\"><a href=\"#react-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"react 애플리케이션 생성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React 애플리케이션 생성하기</h2>\n<p>Recoil는 React를 위한 <strong>상태 관리 라이브러리</strong>다.<br/>\n따라서 Recoil를 사용하기 위해서는 React가 설치되어 있어야 한다.<br/>\nReact 애플리케이션을 시작하는 가장 쉽고 추천하는 방법은 <a href=\"https://github.com/facebook/create-react-app#creating-an-app\">Create React App</a>을 사용하는 것이다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">npx create-react-app my-app</code></pre></div>\n<blockquote>\n<p><a href=\"https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b\"><code class=\"language-text\">npx</code></a>는 npm 5.2+ 이상에서 함께 제공되는 패키지 실행 도구다.<br/>\n오래된 버전의 npm은 이 <a href=\"https://gist.github.com/gaearon/4064d3c23a77c74a3614c498a8bb1c5f\">설명</a>를 보면된다.</p>\n</blockquote>\n<p>Create React App을 설치하는 더 많은 방법은 <a href=\"https://github.com/facebook/create-react-app#creating-an-app\">공식 문서</a>를 보면된다.</p>\n<h2 id=\"설치\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98\" aria-label=\"설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치</h2>\n<p>Recoil 패키지는 <a href=\"https://www.npmjs.com/get-npm\" target=\"_blank\">npm</a>에 존재한다.<br/>\n안정한 최신 버전을 설치하기 위해서는 아래의 명령어를 실행하면 된다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> recoil</code></pre></div>\n<p>또는 <a href=\"https://classic.yarnpkg.com/en/docs/install/\" target=\"_blank\">yarn</a>을 사용한다면 이 명령어를 사용하면 된다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> recoil</code></pre></div>\n<h2 id=\"recoilroot\" style=\"position:relative;\"><a href=\"#recoilroot\" aria-label=\"recoilroot permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RecoilRoot</h2>\n<p>recoil 상태를 사용하는 컴포넌트는 부모 트리 어딘가에 나타나는 <code class=\"language-text\">RecoilRoot</code> 가 필요하다.<br/>\n루트 컴포넌트가 <code class=\"language-text\">RecoilRoot</code>를 넣기에 가장 좋은 장소다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  RecoilRoot<span class=\"token punctuation\">,</span>\n  atom<span class=\"token punctuation\">,</span>\n  selector<span class=\"token punctuation\">,</span>\n  useRecoilState<span class=\"token punctuation\">,</span>\n  useRecoilValue<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'recoil'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">RecoilRoot</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharacterCounter</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">RecoilRoot</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>우리는 다음 부분에서 <code class=\"language-text\">CharacterCounter</code> 컴포넌트를 구현할 것이다.<br/></p>\n<h2 id=\"atom\" style=\"position:relative;\"><a href=\"#atom\" aria-label=\"atom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Atom</h2>\n<p><strong>Atom</strong>은 <strong>상태</strong>(<strong>state</strong>)의 일부를 나타낸다.<br/>\nAtoms는 어떤 컴포넌트에서나 읽고 쓸 수 있다. <br/>\natom의 값을 읽는 컴포넌트들은 암묵적으로 atom을 <strong>구독</strong>한다.<br/>\n그래서 atom에 어떤 변화가 있으면 그 atom을 구독하는 모든 컴포넌트들이 재 렌더링 되는 결과가 발생할 것이다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> textState <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">'textState'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// unique ID (with respect to other atoms/selectors)</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// default value (aka initial value)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>컴포넌트가 atom을 읽고 쓰게 하기 위해서는 <code class=\"language-text\">useRecoilState()</code>를 아래와 같이 사용하면 된다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">CharacterCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>TextInput <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>CharacterCount <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">TextInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>text<span class=\"token punctuation\">,</span> setText<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRecoilState</span><span class=\"token punctuation\">(</span>textState<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onChange</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onChange<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token literal-property property\">Echo</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"selector\" style=\"position:relative;\"><a href=\"#selector\" aria-label=\"selector permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Selector</h2>\n<p><strong>Selector</strong>는 파생된 상태(<strong>derived state</strong>)의 일부를 나타냅니다. 파생된 상태는 상태의 <strong>변화</strong>다.<br/>\n파생된 상태를 순수 함수에 전달된 상태를 어떤 방법으로든 수정된 결과물로 생각할 수 있다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> charCountState <span class=\"token operator\">=</span> <span class=\"token function\">selector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">'charCountState'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// unique ID (with respect to other atoms/selectors)</span>\n  <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> get <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>textState<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> text<span class=\"token punctuation\">.</span>length\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>우리는 <code class=\"language-text\">useRecoilValue()</code> 훅을 사용해서 <code class=\"language-text\">charCountState</code> 값을 읽을 수 있다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">CharacterCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">useRecoilValue</span><span class=\"token punctuation\">(</span>charCountState<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Character Count: </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"demo\" style=\"position:relative;\"><a href=\"#demo\" aria-label=\"demo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Demo</h2>\n<p>아래는 완성된 결과물이다.<br/></p>\n<img src=\"/4efb084cf36b0a0ba74e2b7f632c7d2d/demo.gif\" width=\"400\" height=\"auto\">\n<p><code class=\"language-text\">input</code>에 값을 적고 그 값의 길이를 확인하는 짧은 예제를 살펴보았다.<br/>\n개인적으로 <code class=\"language-text\">redux</code>나 <code class=\"language-text\">contextAPI</code>를 사용했던 것 보다 쉽게 쓸 수 있을 것 같다.<br/>\n<code class=\"language-text\">useRecoilState</code>, <code class=\"language-text\">useRecoilValue</code>가 <code class=\"language-text\">useState</code>나 <code class=\"language-text\">useMemo</code>같은 <code class=\"language-text\">Hook</code>과 비슷한 것 같다.<br/>\n어렵지 않게 <code class=\"language-text\">Hook</code>을 이용해 <strong>전역적</strong>으로 <strong>상태 관리</strong>를 하게 도와주는 좋은 <strong>패키지</strong>인 것 같다.<br/>\n실제 작성한 코드는 <a href=\"https://github.com/alstn2468/Recoil_Tutorial/tree/master/GettingStarted\">여기</a>에서도 확인할 수 있다.<br/></p>","frontmatter":{"title":"Recoil 시작하기","date":"May 15, 2020","thumbnail":null}}},"pageContext":{"slug":"/React/2020-05-15-Recoil/","previous":{"fields":{"slug":"/Javascript/2020-05-14-Expression_vs_Statement/"},"frontmatter":{"title":"식(expression) vs 문(statement)","category":"Javascript","draft":false}},"next":{"fields":{"slug":"/React/2020-05-15-Recoil-Basic-Tutorial-Intro/"},"frontmatter":{"title":"Recoil Basic Tutorial Intro","category":"React","draft":false}}}},"staticQueryHashes":["3001444076","3128451518"]}